---
always_allow_html: true
title: "Aula 11"
---

## Strings

```{r}
library(tidyverse)
library(magrittr)

x <- "Uma string aqui"
y <- 'Uma string aqui' 

x == y
```

```{r}
var_com_aspas <- "Ela disse: 'Olá'"
var_com_aspas
print(var_com_aspas)

var_com_aspas_simples <- 'Ela disse: "Olá"'
var_com_aspas_simples

var_com_aspas_dupla <- "Ela disse: \"Olá\""
var_com_aspas_dupla

str_view(var_com_aspas_dupla) # Imprime na tela: interpreta escape char
var_com_aspas_dupla # imprimir na tela: cru
cat(var_com_aspas_dupla) # Dentro de funções
```

## Caracteres especiais

```{r}
var_com_espaco <- " Olá, meu nome é Deisy."
var_com_espaco

var_com_espaco_2 = "\\sOlá, meu nome é Deisy."
str_view(var_com_espaco_2)

var_com_2_linhas = "Olá\nmeu nome é\nDeisy"
str_view(var_com_2_linhas)

var_com_tab = "Olá\tmeu\tnome\té"
var_com_tab
str_view(var_com_tab)
```

```{r}
"\\"
```

```{r}
texto_unicode_grau <- "A temperatura é de 25\u00B0C."
str_view(texto_unicode_grau)
```

```{r}
texto_multilinhas_unicode <- "Primeira linha\u000ASegunda linha"
str_view(texto_multilinhas_unicode)

simbolo_somatorio <- "O símolo do somatório é: \u2211"
str_view(simbolo_somatorio)

emoji <- "OMG! Também posso usar emoji! \U1F631"
str_view(emoji)
```

```{r}
df <- data.frame(nome = c("Ana", "Maria", "João", NA), 
                 sobrenome= c("Santos", "Silva", "Souza", NA))
df %>% 
  mutate(ola = paste("Boa noite", nome))

df %>% 
  mutate(ola = str_c("Boa noite ", nome, " ", sobrenome, "!"))
```

```{r}
df %>% 
  mutate(mensagem = str_glue("Boa noite {nome} {sobrenome}!"))
```

```{r}
df$nome %>% 
  na.exclude() %>% 
  paste(., collapse = ", ")

df$nome %>% 
  str_flatten(na.rm = TRUE, 
              collapse = ", ")



df$nome %>% 
  str_flatten(na.rm = TRUE, 
              collapse = ", ", 
              last = " e " )
```

```{r}
df %<>% 
  mutate(Nome_Sobrenome = str_c(nome, sobrenome, 
                                sep = " "))

df$Nome_Sobrenome %>%
  str_split(., " ")


df$Nome_Sobrenome %>%
  str_split(., " ", simplify = T) %>%
  as.data.frame()


```

## Formatação

```{r}
texto_exemplo = c("caixa baixa",
                  "CAIXA ALTA", 
                  "Texto de sentença", 
                  "Texto Em Título")
str_to_lower(texto_exemplo)
str_to_upper(texto_exemplo)
str_to_sentence(texto_exemplo)
str_to_title(texto_exemplo)
```

```{r}
texto_com_espaços = "  Olá, esse texto tem    diversos        espaços completamente desnecessários. "
str_view(texto_com_espaços)
str_trim(texto_com_espaços, side = "left")
str_trim(texto_com_espaços, side = "right")
str_trim(texto_com_espaços, side = "both")

str_squish(texto_com_espaços)
```

## Comprimento de String

```{r}
df %>% 
  mutate(comprimento_nome = str_length(nome), 
         comprimento_nome_completo = str_length(Nome_Sobrenome))
```

```{r}
df %>% 
  mutate(qtd_a = str_count(nome, "a|A|ã"))


df %>% 
  mutate(qtd_a = str_count(nome, "[aAã]"))

df %>% 
  mutate(qtd_vogais = str_count(nome, "[aeiouAEIOUã]")) %>% 
    mutate(qtd_consoantes = str_count(nome, "[^aeiouAEIOUã]")) 

df %>% 
  mutate(qtd_vogais = str_count(nome, "(An)"))%>%
  mutate(qtd_numeros = str_count(nome, "[1-9]"))
```

## Substituicao de Strings

```{r}
df %>% 
  mutate(nome = str_replace(nome, "ã", "a"))

df %>% 
  mutate(nome = str_replace(nome, "ã", "a")) %>% 
  mutate(nome = str_replace_all(nome, "a", "A")) 


df %>% 
  mutate(nome = str_replace(Nome_Sobrenome, "ã", "a")) %>% 
  mutate(nome = str_remove_all(Nome_Sobrenome, "a")) 

df %>% 
  mutate(nome = str_remove_all(nome, "[aeiouã]"))
```

## RegEx

```{r}
texto <- "Eu gosto de gato."
padrao <- "gato"

str_detect(texto, padrao)
```

```{r}
texto <- c("O rato correu para o buraco.", 
           "O gato correu para o buraco.",
           "O mato.")
padrao <- "(g|r|m)ato"
str_detect(texto, padrao)
```

```{r}
texto <- c("Banana", "Ana", "Ananas")
padrao <- "^ana"
str_detect(texto, padrao)
padrao <- "(?i)^ana"
str_detect(texto, padrao)

padrao <- "(?i)ana$"
str_detect(texto, padrao)


padrao <- "(?i)^ana$"
str_detect(texto, padrao)


str_extract(texto, "(na)")
str_extract(texto, "(na)+")
str_count(texto, "(na){1}")

texto <- "Os números 123 e 456 são importantes."
padrao <- "\\d{3}"
numeros <- str_extract_all(texto, 
                           padrao, 
                           simplify = TRUE)

class(numeros)
numeros %>% 
  as.numeric()

texto <- "Os números 123 e 456 são importantes."
padrao <- "\\d{4}"
numeros <- str_extract_all(texto, 
                           padrao, 
                           simplify = TRUE)

texto <- "Os números 123 e 456 são importantes."
padrao <- "\\d{2}"
numeros <- str_extract_all(texto, 
                           padrao, 
                           simplify = TRUE)
numeros
```
