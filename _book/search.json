[
  {
    "objectID": "01_markdown_git.html#markdown",
    "href": "01_markdown_git.html#markdown",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n2.1 1.1  Markdown",
    "text": "2.1 1.1  Markdown\nMarkdown é uma linguagem de marcação leve1, criada por John Gruber em 2004, que permite formatação de texto de forma simples e rápida, sem a necessidade de conhecimentos avançados de programação ou design. É amplamente utilizado em diversas plataformas para criar documentos, páginas web, blogs, e-mails e muito mais.\nO Markdown foi projetado para ser fácil de ler e escrever, utilizando uma sintaxe simples e intuitiva. Compatível com HTML, ele pode ser convertido diretamente para outras linguagens de marcação, facilitando a publicação em diferentes plataformas.\nO uso do Markdown tem se popularizado principalmente entre escritores, programadores, blogueiros e criadores de conteúdo online sem a complexidade de outras linguagens de marcação, como HTML.\nNeste capítulo, veremos os conceitos básicos do Markdown e como utilizá-lo para criar conteúdo com formatação atraente e organizada.\n\n2.1.1 1.1.1 Editores de Markdown\nAntes de começarmos a escrever em Markdown, é útil saber que podemos utilizar qualquer editor de texto simples para criar arquivos Markdown. No entanto, existem editores específicos que oferecem recursos adicionais, como visualização em tempo real, realce de sintaxe e pré-visualização.\nAlguns editores de Markdown populares são:\n\nVisual Studio Code: Um editor de código altamente configurável que possui extensões para suporte ao Markdown. Além disso, o Visual Studio Code oferece uma pré-visualização em tempo real à medida que você digita seu conteúdo Markdown.\nAtom: Outro editor de código fonte aberto com suporte ao Markdown e uma comunidade ativa de desenvolvedores. O Atom também fornece pacotes que aprimoram a experiência de escrita em Markdown.\nTypora: Um editor Markdown com visualização em tempo real e uma interface de escrita amigável. O Typora é conhecido por sua abordagem “What You See Is What You Get” (WYSIWYG), o que significa que a visualização em tempo real mostra o documento final como apareceria após ser renderizado.\nStackEdit: Uma ferramenta online que permite escrever e salvar seus documentos Markdown na nuvem. O StackEdit também possui uma visualização em tempo real para facilitar a visualização do resultado final. Teste Aqui\nRStudio/Posit: RStudio é uma IDE (Integrated Development Environment) muito utilizada por programadores e cientistas de dados em projetos envolvendo a linguagem R. O RStudio possui um ambiente dedicado para edição de documentos R Markdown, que combina a facilidade do Markdown com a capacidade de incorporar análises e gráficos gerados pelo R.\n\nArquivos puramente em Markdown apresentam a extensão .md. Porém, quando utilizamos RMarkdown ou Quarto sua extensão se torna .Rmd ou .qmd, respectivamente.\n\n2.1.2 1.1.2 Sintaxe Básica\n\n2.1.2.1 1.1.2.1 Títulos\nPara criar títulos em Markdown, podemos utilizar a sintaxe de hashtags (#). A quantidade de hashtags determina o nível do título.\n\nExemplo\n Código\n\n# Título de Nível 1\n## Título de Nível 2\n### Título de Nível 3\n\n Resultado\n\n3 Título de Nível 1\n\n3.1 Título de Nível 2\n\n3.1.1 Título de Nível 3\n\n\n3.1.1.1 1.1.2.2 Parágrafos e Quebras de Linha\nPara criar parágrafos, basta digitar o texto normalmente. Para criar uma quebra de linha, insira dois espaços no final do parágrafo.\n\nExemplo\n Código\n\nIsso é um parágrafo.\n\nIsso é outro parágrafo.\n\n Resultado\nIsso é um parágrafo.\nIsso é outro parágrafo.\n\n\n3.1.1.2 1.1.2.3 Ênfase\nPara destacar palavras ou frases, você pode utilizar o asterisco (*) ou o sublinhado (_).\n\nExemplo\n Código\n\n*Itálico* ou _Itálico_\n\n**Negrito** ou __Negrito__\n\n Resultado\nItálico ou Itálico\nNegrito ou Negrito\n\n\n3.1.1.3 1.1.2.4 Listas\n\n3.1.1.3.1 1.1.2.4.1 Lista Não Ordenada\nPara criar uma lista não ordenada, utilize o asterisco (*), o sinal de mais (+) ou o traço (-) seguido do item.\n\nExemplo\n Código\n\n- Item 1\n- Item 2\n- Item 3\n\n\n+ Item 1\n+ Item 2\n+ Item 3\n\n\n* Item 1\n* Item 2\n* Item 3\n\n Resultado\n\nItem 1\nItem 2\nItem 3\n\n\n\n3.1.1.3.2 1.1.2.4.2 Lista Ordenada\nPara criar uma lista ordenada, digitamos o número seguido de um ponto.\n\nExemplo\n Código\n\n1.  Item 1\n2.  Item 2\n3.  Item 3\n\n Resultado\n\nItem 1\nItem 2\nItem 3\n\n\n\nSe os números forem colocados fora de ordem, os itens ainda serão numerados corretamente.\n\n\n3.1.1.4 1.1.2.5 Lista Aninhada\nPara criar uma lista aninhada, simplesmente digitamos uma tabulação antes do indicador de lista (*, +, -, 1.).\n\nExemplo\n Código\n\n*  Item 1\n   +  Item 1.1\n\n Resultado\n\nItem 1\n\nItem 1.1\n\n\n\n\n\n3.1.1.5 1.1.2.6 Links\nPara adicionar um link, utilizamos a sintaxe [texto](URL).\n\nExemplo\n Código\n\n[Google.com](google.com)\n\n Resultado\nGoogle.com\n\n\nPara incluir links rapidamente também podemos utilizar &lt;link&gt;.\n\n\n3.1.1.6 1.1.2.7 Imagens\nPara inserirmos uma imagem, utilizamos a sintaxe ![texto alternativo](URL da imagem).\n\nExemplo\n Código\n\n![Logo do Markdown](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/312px-Markdown-mark.svg.png?20190322184628)\n\n Resultado\n\n\n\n3.1.1.7 1.1.2.8 Citações\nPara adcionar uma citação, utilizamos o sinal de maior que (&gt;).\n\nExemplo\n Código\n\n&gt; E nessa loucura de dizer que não te quero  \n&gt; Vou negando as aparências  \n&gt; Disfarçando as evidências  \n&gt; (Evidências, \nChitãozinho & Xororó)\n\n Resultado\n\nE nessa loucura de dizer que não te quero  Vou negando as aparências  Disfarçando as evidências  (Evidências, Chitãozinho & Xororó)\n\n\n\n3.1.2 1.1.3 Funcionalidades Avançadas do Markdown\nAgora que já aprendemos os conceitos básicos do Markdown, vamos explorar algumas funcionalidades mais avançadas que tornam essa linguagem ainda mais poderosa e versátil.\n\n3.1.2.1 1.1.3.1 Referência cruzada\nAs referências cruzadas permitem que você crie links para seções específicas dentro do seu documento Markdown. Isso é especialmente útil para documentos extensos, onde você deseja facilitar a navegação do leitor. Para criar uma referência cruzada precisamos atribuir um identificador único a um título usando a sintaxe {#identificador} e, em seguida, criar o link utilizando o mesmo identificador precedido de #.\n\nExemplo\n Código\n\n## Seção 1 {#sec-01}\n\nEste é o conteúdo da seção 1.\n\nPara referenciar esta seção, [clique aqui](#sec-01).\n\n Resultado\n\n3.2 Seção 1\nEste é o conteúdo da seção 1.\nPara referenciar esta seção, clique aqui.\n\nOutra opção para referenciamento é utilizando o @.\n\n\n## Seção 2 {#sec-02}\n\nEste é o conteúdo da seção 2.\n\nComo visto na @sec-02, ... .\n\n Resultado\n\n3.3 Seção 2\nEste é o conteúdo da seção 2.\nComo visto na Section 3.3, … .\n\n\nPara uma melhor organização das referências cruzadas em um projeto categorizamos figuras como fig-, tabelas como tab- e seções como sec-.\n\n\n3.3.0.1 1.3.0.1 Tabelas\nAs tabelas permitem organizar dados em formato tabular. Para criar uma tabela em Markdown, utilizamos o caractere de pipe (|) para separar as colunas e o hífen (-) na segunda linha para definir o alinhamento das células.\n\nExemplo\n Código\n\n| Nome   | Idade | Profissão       |\n|--------|-------|-----------------|\n| João   | 30    | Estatístico     |\n| Maria  | 28    | Designer        |\n| Pedro  | 35    | Desenvolvedor   |\n\n Resultado\n\n\nNome\nIdade\nProfissão\n\n\n\nJoão\n30\nEstatístico\n\n\nMaria\n28\nDesigner\n\n\nPedro\n35\nDesenvolvedor\n\n\n\n\n\n3.3.0.2 1.3.0.2 Blocos de Código\nPara exibir blocos de código, utilizamos três acentos graves (```) seguidos do nome da linguagem de programação. Isso destacará a sintaxe de acordo com a linguagem escolhida.\nQuando estamos utilizando Quarto, portanto, um arquivo .qmd o código incluído dentro do bloco delimitado será executado de acordo com a linguagem definida. Isto é, se o código dentro do bloco é um código em R, será executado como em R, se é um código em Python, será executado em Python, se é um código em Mermaid, será executado em Mermaid, e assim por diante.\n\nExemplo\n Código\n\n```{r}\n1 + 1 \n\\```\n\n\n```{python}\n1 + 1 \n\\```\n\n Resultado\n\n1 + 1\n\n[1] 2\n\n\n\n1 + 1\n\n2\n\n\n\n\n3.3.0.3 1.3.0.3 Linhas Horizontais\nPara criar uma linha horizontal, utilize três hífens (---).\n\nExemplo\n Código\n\nTexto acima da linha horizontal.\n\n---\n\nTexto abaixo da linha horizontal.\n\n Resultado\nTexto acima da linha horizontal.\n\nTexto abaixo da linha horizontal.\n\n\n3.3.0.4 1.3.0.4 Fórmulas Matemáticas\nSe você precisa escrever fórmulas matemáticas, é possível utilizar a notação LaTeX dentro de um par de cifrões ($$). Isso permitirá que o Markdown renderize a fórmula corretamente.\n\nExemplo\n Código\n\nA equação quadrática é definida como $$ax^2 + bx + c = 0.$$\n\n Resultado\nA equação quadrática é definida como \\[ax^2 + bx + c = 0.\\]\n\nQuando queremos utilizar alguma fórmula matemática dentro de um texto utilizamos apenas um cifrão $ de cada lado da equação.\n\nExemplo\n Código\n\nA equação quadrática é definida como $ax^2 + bx + c = 0.$\n\n Resultado\nA equação quadrática é definida como \\(ax^2 + bx + c = 0.\\)\n\n\nPara saber mais sobre como escrever equações em LaTex acesse a Apostila Online.\n\n\n3.3.1 1.3.1 Cheat-Sheet\nClique aqui para a cheat-sheet so material de Markdown."
  },
  {
    "objectID": "01_markdown_git.html#organização",
    "href": "01_markdown_git.html#organização",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n3.4 1.4 Organização",
    "text": "3.4 1.4 Organização\nAs boas práticas de programação são essenciais para desenvolver código de qualidade, que seja fácil de entender, manter e evoluir. Uma das áreas importantes dentro das boas práticas é a organização dos arquivos, que ajuda a tornar o projeto mais coeso e legível.\n\n3.4.1 1.4.1 Nomenclatura Adequada\nA nomenclatura adequada dos arquivos é essencial para uma organização eficiente. Ao criar arquivos para projetos de análise de dados, independente da linguagem, devemos escolher nomes descritivos que reflitam o conteúdo ou a finalidade do arquivo. Por exemplo, limpeza_dados.R ou analise_exploratoria.R são nomes mais informativos do que arquivo1.R ou script_final.R.\nQuando lidamos com uma sequência nas quais os códigos devem ser executados prefira salvar os códigos com nomes que indiquem essa ordem. Por exemplo, se há necessidade de que os dados sejam limpos antes de iniciarmos uma análise exploratória devemos salvar os códigos com os seguintes nomes 01_limpeza_dados.R e 02_analise_exploratoria.R, indicando a ordem na qual os códigos devem ser executados.\nAo longo do curso, utilizaremos nomes consistentes para facilitar a compreensão e a busca de arquivos relacionados.\n\n3.4.2 1.4.2 Estrutura de Diretórios\nA organização dos arquivos em diretórios lógicos é crucial para projetos de análise de dados. Considere uma estrutura de diretórios que abranja etapas comuns da análise, como dados para armazenar os dados brutos, codigo para conter os códigos de análise e resultados para guardar os resultados da análise.\nExemplo de estrutura de diretórios:\n\nmeu_projeto/\n|-- dados/\n|-- codigos/\n|-- resultados/\n\nTambém podemos ter essa mesma estrutura em inglês:\n\nmy_project/\n|-- data/\n|-- code/\n|-- results/\n\nMantendo uma estrutura organizada torna mais fácil encontrar e gerenciar os arquivos relevantes para cada etapa da análise em cada um dos projetos.\nObviamente, cada pasta pode conter sub-pastas, por exemplo, em projetos onde temos muitos dados brutos e dados processados podemos subdividir a pasta data em raw e clean, ou input e output.\n\nmy_project/\n|-- data/\n|   |-- raw/\n|   |-- clean/\n|-- code/\n|-- results/\n\n\nmy_project/\n|-- data/\n|   |-- input/\n|   |-- output/\n|-- code/\n|-- results/\n\n\n3.4.3 1.4.3 Módulos e Funções Reutilizáveis\nEm diversas linguagens, como R, Python, Perl, C, etc, podemos criar funções reutilizáveis para realizar tarefas específicas. Separe o código em módulos e funções para facilitar a manutenção e a reutilização em diferentes partes da análise.\nPor exemplo, podemos criar um módulo limpeza_dados.R que contenha funções para lidar com a limpeza e preparação dos dados brutos. Dessa forma, essas funções podem ser reutilizadas em outras análises futuras, economizando tempo e esforço.\nTambém devemos nomear os arquivos de módulos e funções através de um prefixo que identifique que aquele arquivo contém funções e módulos ao invés das análises específicas para o projeto em questão. Por exemplo, identifique com o prefixo mod_, obtendo o arquivo mod_limpeza_dados.R.\n\n3.4.4 1.4.4 Divisão por Responsabilidade\nAgrupe os arquivos de acordo com suas responsabilidades na análise. Por exemplo, separe os scripts que realizam a limpeza dos dados dos scripts que executam a análise estatística. Além disso, crie um arquivo específico para a geração de gráficos e visualizações dos resultados.\nEssa abordagem facilita a manutenção do código, já que cada arquivo é responsável por uma tarefa específica.\n\n3.4.5 1.4.5 Documentação\nA documentação adequada é essencial para entender a análise de dados, independente da linguagem. Sempre comente o código de forma clara e inclua explicações para as etapas mais importantes da análise.\nTambém podemos considerar a utilização de arquivos do tipo R Markdown ou Quarto para criar relatórios interativos que combinem código, gráficos e texto explicativo em um único documento. Essa prática é excelente para comunicar os resultados da análise de forma mais clara e visual.\n\n3.4.6 1.4.6 Versionamento com Git\nUtilize o Git para controlar as versões do código e acompanhar o histórico de alterações. O versionamento é especialmente útil em análises de dados, pois permite que você explore diferentes abordagens e compare os resultados de diferentes versões do código.\n\n3.4.7 1.4.7 Exemplo de Estrutura Completa do Projeto\n\nmy_projeto/\n|-- data/\n|   |-- raw/\n|   |-- clean/\n|-- scripts/\n|   |-- 00_limpeza_dados.R\n|   |-- 01_analise_estatistica.R\n|   |-- 02_visualizacao_resultados.R\n|   |-- mod_limpeza_dados.R\n|-- results/\n|   |-- relatorio_analise.html\n|   |-- graficos/\n|       |-- grafico1.png\n|       |-- grafico2.png"
  },
  {
    "objectID": "01_markdown_git.html#sistemas-de-versionamento",
    "href": "01_markdown_git.html#sistemas-de-versionamento",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n3.5 1.5 Sistemas de Versionamento",
    "text": "3.5 1.5 Sistemas de Versionamento\nVersionamento de Código refere-se ao controle cuidadoso das alterações feitas em um projeto de software ao longo do tempo. Isso é realizado através de um sistema de controle de versão, como o Git, que registra todas as modificações no código-fonte do projeto. Cada conjunto de mudanças é registrado em uma versão, permitindo que os desenvolvedores acessem e revertam as alterações conforme necessário.\nUm sistema de controle de versão é uma ferramenta essencial para o desenvolvimento colaborativo, permitindo que várias pessoas trabalhem em um mesmo projeto sem conflitos e de maneira mais organizada. O Git é um exemplo de sistema de versionamento de códigos, que pode ser hospedado no GitHub, por exemplo.\n\n3.5.1 1.5.1  Git\nGit é um sistema de controle de versão distribuído. Foi criado por Linus Torvalds em 2005 e é amplamente utilizado na indústria de desenvolvimento de software. O Git permite que desenvolvedores rastreiem mudanças no código-fonte ao longo do tempo, facilitando o trabalho em equipe e a colaboração. Ele oferece recursos para criar ramos (ramificações) do código, mesclá-los e reverter alterações, permitindo que os desenvolvedores experimentem diferentes abordagens sem afetar a versão principal do projeto. O Git é executado localmente no computador do desenvolvedor e não requer uma conexão com a internet, a menos que você queira sincronizar com um repositório remoto, como o GitHub.\n\n3.5.2 1.5.2  GitHub\nO GitHub é uma plataforma de hospedagem de código-fonte e colaboração baseada em Git. Lançado em 2008, o GitHub tornou-se rapidamente um dos maiores repositórios de código-fonte do mundo. Ele permite que os desenvolvedores hospedem seus repositórios Git na nuvem e colaborem com outros membros da equipe ou contribuidores externos. O GitHub facilita o compartilhamento de código, rastreamento de problemas (issues), solicitações de pull (pull requests) e revisão de código. Além disso, fornece uma interface amigável para visualizar histórico de alterações, ramos, problemas e outras informações importantes relacionadas ao desenvolvimento do software.\n\n3.5.3 1.5.3 Importância do Versionamento de Código\n1. Rastreamento de Alterações: Com o versionamento de código, é possível rastrear todas as modificações feitas no projeto, incluindo quem realizou cada alteração e quando. Isso facilita a identificação de problemas e a compreensão do histórico do projeto.\n2. Reversão Segura: Caso um erro seja introduzido no código, é possível reverter para uma versão anterior que esteja funcionando corretamente. Isso é especialmente útil em situações de bugs críticos ou mudanças indesejadas.\n3. Colaboração Eficiente: Equipes de desenvolvimento podem trabalhar em paralelo em diferentes partes do projeto, sem interferir no trabalho um do outro. O versionamento permite que cada desenvolvedor trabalhe em sua própria cópia (branch) do código antes de integrá-lo ao projeto principal.\n4. Testes e Experimentações: É possível criar branches para testar novos recursos, correções ou experimentações sem impactar o código principal. Esses branches podem ser compartilhados com colegas para revisão antes de serem incorporados.\n5. Backup e Segurança: Os repositórios versionados atuam como um backup seguro para o código-fonte do projeto. Em caso de falha no hardware ou perda de dados local, as versões remotas do código podem ser recuperadas.\n\n3.5.4 1.5.4 Criando uma Conta no GitHub\nGitHub é uma plataforma popular para hospedar projetos versionados usando o Git. Siga os seguintes passos para criar uma conta:\n\nAcesse o site oficial do GitHub em https://github.com/.\nClique em “Sign Up” ou “Criar conta”.\nPreencha seus dados, incluindo nome de usuário, endereço de e-mail e senha.\nSelecione um plano de conta.\nConclua o processo de criação de conta seguindo as instruções na tela.\n\n\nUtilize seu e-mail @ufpr para criação da conta para ter acesso a conta Pro.\n\n\n3.5.5 1.5.5 Mantendo Projetos e Colaborando no GitHub\n1. Repositórios: Após criar uma conta no GitHub, você pode criar um novo repositório ou clonar (fazer uma cópia local) um repositório existente para começar a trabalhar no projeto.\n2. Commits: Os commits são registros das alterações feitas no código. Ao fazer um commit, é importante fornecer uma mensagem clara e concisa que explique o que foi alterado. Isso ajuda na compreensão das mudanças realizadas em cada versão.\n3. Branches: Os branches permitem que você crie cópias do seu repositório para trabalhar em funcionalidades específicas ou correções. Branches são úteis para desenvolver recursos em paralelo sem afetar o projeto principal. Quando um trabalho em um branch estiver concluído, ele pode ser mesclado ao projeto principal através de um pull request.\n4. Pull Requests: Um pull request é uma solicitação para mesclar as alterações de um branch ao projeto principal. É uma etapa crucial para a colaboração, pois permite que outros membros da equipe revisem as mudanças, façam comentários e discutam as alterações antes de serem integradas ao código principal.\n5. Forks: Quando você deseja contribuir para um projeto mantido por outra pessoa, pode criar um fork, que é uma cópia independente do repositório original em sua conta do GitHub. Após fazer as alterações em seu fork, você pode enviar um pull request para o repositório original, sugerindo que suas mudanças sejam incorporadas ao projeto principal.\n\n3.5.6 1.5.6 Comandos Básicos do Git\nAqui estão os comandos essenciais do Git que ajudarão você a começar com o versionamento de código:\n1. git init: Inicializa um novo repositório Git em um diretório vazio ou converte um projeto existente em um repositório Git.\n2. git clone: Cria uma cópia local de um repositório Git existente. Você pode clonar um repositório do GitHub ou de outro servidor Git.\n3. git add: Adiciona arquivos ao índice (staging area) para serem incluídos no próximo commit. Use “git add .” para adicionar todos os arquivos modificados.\n4. git commit: Registra as alterações adicionadas ao índice como uma nova versão no histórico do repositório. Lembre-se de fornecer uma mensagem significativa usando o parâmetro “-m”.\n5. git status: Exibe o estado atual do seu repositório, mostrando os arquivos modificados, adicionados e aqueles que ainda não foram monitorados pelo Git.\n6. git log: Mostra o histórico de commits do repositório, incluindo os autores, datas e mensagens de commit.\n7. git branch: Lista todas as branches do repositório. O branch atual é marcado com um asterisco.\n8. git checkout: Permite alternar entre branches. Use “git checkout -b nome-do-branch” para criar e alternar para um novo branch.\n9. git merge: Mescla as alterações de um branch específico no branch atual. Use após realizar um pull request ou ao concluir o trabalho em um branch paralelo.\n10.git pull: Puxa as alterações do repositório remoto para o seu repositório local. É uma combinação dos comandos “git fetch” e “git merge”.\n11. git push: Envia as alterações do seu repositório local para o repositório remoto (por exemplo, GitHub). Use “git push origin nome-do-branch” para enviar um branch específico.\n12. git remote: Exibe informações sobre os repositórios remotos conectados ao seu projeto.\n13. git fetch: Busca as alterações do repositório remoto, mas não as mescla automaticamente em seu repositório local.\n14. git rm: Remove arquivos do repositório e os prepara para serem removidos do controle de versão.\n15. git diff: Mostra as diferenças entre o código no diretório de trabalho e as alterações confirmadas.\n\n3.5.7 1.5.7 Cheat-Sheet Git\nClique aqui para a cheat-sheet do material de Git.\n\n3.5.8 1.5.8 Cheat-Sheet RStudio & Git\nClique aqui para a cheat-sheet do material de Git & Rstudio."
  },
  {
    "objectID": "01_markdown_git.html#recursos-extras",
    "href": "01_markdown_git.html#recursos-extras",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n3.6 1.6 Recursos extras",
    "text": "3.6 1.6 Recursos extras\nAlguns recursos extras que podem ser utilizados:\n\nAprenda Markdown em 60 segundos\nMelhore seu .Rmd\nComo usar o GitHub\nMais sobre o GitHub"
  },
  {
    "objectID": "01_markdown_git.html#footnotes",
    "href": "01_markdown_git.html#footnotes",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "",
    "text": "conjunto de sinais e códigos aplicados a um texto ou a dados para para definir formatos, maneiras de exibição e padrões. Ao contrário de linguagens de programação, não possui estruturas de controle como os comandos condicionais e de repetição.↩︎"
  }
]