{
  "hash": "87bc3d47fe62451dead9cb10dcf7fc39",
  "result": {
    "markdown": "---\nalways_allow_html: true\ntitle: \"12  Git & RStudio Cheat-Sheet\"\n---\n\n\nEsse material é baseado no suporte da [Posit](https://posit.co/) para sincronização do Git & RStudio disponível [aqui](https://support.posit.co/hc/en-us/articles/200532077).\n\n## 12.1 Instalação\n\nAntes de utilizar os recursos de controle de versão do RStudio, você precisará garantir que o **Git** e/ou **Subversion** estejam instalados em seu sistema. Descrevo a seguir como fazer isso em diversas plataformas.\n\n### 12.1.1 Git\n\nAntes de usar o Git com o RStudio, você deve instalá-lo usando o método apropriado para a sua plataforma:\n\n* Windows e OS X: http://git-scm.com/downloads\n* Debian/Ubuntu: sudo apt-get install git-core\n* Fedora/RedHat: sudo yum install git-core\n\n#### 12.1.2 Subversion\n\nAntes de usar o Subversion com o RStudio, você deve instalá-lo usando o método apropriado para a sua plataforma:\n\n* Windows: [SilkSVN](https://sliksvn.com/download/)\n* OSX (≤ v10.7): Não é necessário - já está incluído nas versões do OSX 10.7 e anteriores\n* OSX (v10.8+): Instale as Ferramentas de Linha de Comando do Xcode a partir dos downloads do desenvolvedor da Apple\n* Debian/Ubuntu: `sudo apt-get install subversion`\n* Fedora/RedHat: `sudo yum install subversion`\n\n## 12.2 Ativando Git no RStudio\n\nApós instalar o seu sistema de Controle de Versão preferido, você precisará ativá-lo no RStudio seu sistema seguindo estes passos:\n\n* Acesse as Opções Globais (no menu Ferramentas)\n* Clique em Git/SVN\n* Clique em Habilitar interface de controle de versão para projetos do RStudio\n* Se necessário, insira o caminho para o executável do Git ou SVN, se fornecido. Você também pode criar ou adicionar sua chave RSA para SSH, se necessário.\n\n![Tools -> Global Options -> Git/SNV](.\\imagens\\c1_global_options.png)\n\n## 12.3 Configurar o Git\n\nApós ativarmos o Git no RStudio, precisamos declarar para o Git seu nome e e-mail associado a sua conta do GitHub. Isso pode ser feito da seguinte forma:\n\n1. Pelo **Terminal** no RStudio, digite esses comandos substituindo seu nome/e-mail:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit config --global user.name 'Seu Nome'\ngit config --global user.email 'seu.email@email.com'\n```\n:::\n\n\n2. Usando o pacote `usethis`, no **Console** do RStudio:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\nuse_git_config(user.name = \"Seu Nome\", \n               user.email = \"seu.email@email.com\")\n```\n:::\n\n\n## 12.4 Criar um token do GitHub\n\nPara que a interação entre o seu computador (especificamente o repositório Git local) e o GitHub (repositório remoto) funcione corretamente, é necessário autenticação. Essa autenticação garante que você possui as permissões necessárias para realizar as ações desejadas. Uma maneira fácil de implementar essa autenticação é configurando um token do GitHub, também conhecido como PAT (Personal Access Token).\n\nPodemos criar o token da seguinte maneira no **console** do RStudio:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\nEsse comando abrirá uma página no seu navegador. Clique em *Generate token* e copie o código do token gerado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNota\nNão feche a página. Ao fechar a página não será possível visualizá-lo novamente.\n```\n:::\n\n\n\n\nAgora precisamos garantir que o RStudio irá se recordar do seu token e suas credenciais. Para isso, utilizamos o código a seguir:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\nEm seguida, cole o código obitido anteriormente.\n\n## 12.5 Testando\n\nTecnicamente, agora está tudo configurado. Vamos agora testar se está funcionamento adequadamente. Para essa averiguação, criaremos um repositório no GitHub, faremos o clone do mesmo para o computador local, iremos gerar alterações locais, salvar e “commitar”, e, por fim, enviar as alterações locais para o repositório remoto (“push”).\n\n### 12.5.1 Criar um repositório no GitHub\n\nA seguir estão as etapas para criar um novo repositório no GitHub:\n\n1. Acesse o site do GitHub e verifique se você já fez o login na sua conta.\n\n2. Próximo à seção “Repositories”, clique no botão verde “New”.\n\n3. Na nova página, preencha o nome do repositório (CE302) e adicione uma breve descrição, se desejar.\n\n4. Marque as opções “Public” (público) e “Add a README file” (adicionar um arquivo README).\n\n5. Por fim, clique em “Create repository”.\n\nApós criar o repositório, você será direcionado para a página do mesmo no GitHub. Agora, clique no botão verde escrito “Code” e copie a URL que aparece na opção “HTTPS” (recomendado).\n\nEssas etapas permitirão que você crie um novo repositório no GitHub e obtenha a URL necessária para interagir com ele através de comandos Git.\n\n###12.5.2 Clonar repositório pelo RStudio\n\nExistem duas maneiras de clonar o repositório no RStudio, ambas criam um novo projeto local contendo o repositório do GitHub desejado:\n\n1. Via Menu:\n  * Navegue para File > New Project > Version Control > Git.\n  * Cole a URL do GitHub em “Repository URL”.\n  * Mantenha o campo “Project directory name” inalterado e escolha um local (pasta) onde o projeto será criado.\n  * Marque a opção “Open in new session”.\n  * Clique em “Create Project”.\n\n2. Via Console usando o pacote usethis:\n  * Utilize a função `create_from_github` do pacote `usethis`.\n  * Informe o nome de usuário (que criou o repositório) e o nome do repositório.\n  * Exemplo: `usethis::create_from_github(\"nome_do_usuario/nome_do_repositorio\")`.\n    \nApós clonar o repositório, você estará trabalhando em um novo projeto do RStudio que contém o repositório do GitHub. No painel “Files” do RStudio, procure pelo arquivo “README.md” e abra-o para visualizá-lo diretamente no RStudio.\n\n### 12.5.3 Fazer alterações locais, salvar, commitar\n\nPara adicionar uma linha com uma frase informativa ao arquivo README.md e salvar essas alterações, siga os passos abaixo para realizar o commit no seu repositório local:\n\n1. Clique na aba “Git” do RStudio.\n\n2. Em seguida, clique no botão “Commit”.\n\n3. Na coluna “Staged”, marque a caixinha ao lado de README.md para incluir o arquivo no commit.\n\n4. No campo “Commit message”, digite uma mensagem informativa que descreva as alterações no código.\n\n5. Clique no botão “Commit”, aguarde a mensagem de sucesso e depois clique em “Close”.\n\nCaso existam outros arquivos no repositório criados automaticamente pelo RStudio, não é necessário fazer alterações neles. Apenas o arquivo README.md, contendo a nova linha com sua frase criativa, será incluído no commit.\n\n### 12.5.4 Enviar alterações (`push`) para o GitHub\n\nPara enviar suas alterações realizadas no repositório local para o repositório remoto (GitHub), siga o passo abaixo:\n\n1. Clique no botão verde “Push”.\nCaso todas as etapas e configurações tenham sido executadas corretamente, você não será solicitado a digitar o token e suas alterações locais serão enviadas para a página do repositório no GitHub (recomendo atualizar a página para verificar).\n\nSe você chegou até aqui, a configuração do RStudio com o Git e GitHub está concluída com sucesso! Agora você pode realizar alterações no seu projeto local, fazer commits e enviar essas alterações para o repositório remoto no GitHub, mantendo seu projeto sempre atualizado.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}