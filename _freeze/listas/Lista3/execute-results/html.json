{
  "hash": "7c7c6d4e268a8f1620baf200d3ebf8cc",
  "result": {
    "markdown": "---\ntitle: \"Lista 3\"\nauthor: \"Raymundo\"\n#date: \"2023-09-27\"\noutput:\n  html_document:                    \n    toc: true                       \n    toc_depth: 3                    \n    toc_float:                      \n      collapsed: true\n      smooth_scroll: true\n    number_sections: true           \n\n    highlight: espresso\n               \n    fig_width: 7                    \n    fig_height: 6                   \n    fig_caption: true               \n    fig_align: 'center'\n    #code_folding: hide              \n    #keep_md: true \n---\n\n\n---\n\n# \n\n---\n\n## Exercícios sobre Matrizes:\n\n---\n\n### 1. Crie uma matriz 3x3 com os números: 2 96 49 35 2 100 42 43 92.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz <- matrix(c(2, 96, 49,\n                  35, 2, 100,\n                  42, 43, 92),\n                nrow = 3,\n                ncol = 3)\n\nmatriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2   35   42\n[2,]   96    2   43\n[3,]   49  100   92\n```\n:::\n:::\n\n\n---\n\n### 2. Calcule a soma dos elementos de cada coluna da matriz A.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoma_matriz <- colSums(matriz)\n\nsoma_matriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 147 137 177\n```\n:::\n:::\n\n\n---\n\n### 3. Calcule a média dos elementos de cada linha da matriz A.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedia_matriz <- rowMeans(matriz)\n\nmedia_matriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26.33333 47.00000 80.33333\n```\n:::\n:::\n\n\n---\n\n### 4. Transponha a matriz A.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransposta_matriz <- t(matriz)\n\ntransposta_matriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2   96   49\n[2,]   35    2  100\n[3,]   42   43   92\n```\n:::\n:::\n\n\n---\n\n### 5. Multiplique a matriz A por 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmult_matriz <- matriz * 3\n\nmult_matriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    6  105  126\n[2,]  288    6  129\n[3,]  147  300  276\n```\n:::\n:::\n\n\n---\n\n### 6. Calcule o determinante de A.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeterminante_matriz <- det(matriz)\n\ndeterminante_matriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 155477\n```\n:::\n:::\n\n\n---\n\n### 7. Crie uma matriz identidade 4x4.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_identidade <- diag(4)\n\nmatriz_identidade\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    0    0    0\n[2,]    0    1    0    0\n[3,]    0    0    1    0\n[4,]    0    0    0    1\n```\n:::\n:::\n\n\n---\n\n### 8. Resolva um sistema de equações lineares usando a matriz e o método da inversa.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Equação da Matriz do exercicio 1:\n# 2x  +  35y + 42z = 0\n# 96x +   2y + 43z = 0\n# 49x + 100y + 92z = 0\n\n# Definição das matrizes\nmatrizA <- matriz \nvetor <- c(0, 0, 0)\n\n# Verifique se A é invertível\nif (det(matrizA) != 0) {\n  # Calcule a matriz inversa de A\n  invA <- solve(matrizA)\n  \n  # Calcule a solução para x\n  x <- invA %*% vetor\n  \n  # Imprima a solução\n  print(x)\n} else {\n  print(\"A matriz A não é invertível.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]    0\n[2,]    0\n[3,]    0\n```\n:::\n:::\n\n\n---\n\n### 9. Crie uma matriz com números aleatórios e encontre o maior valor.\n* Utilize a função runif() \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dimensões da matriz\nl <- 3\nc <- 4\n\n# Crie a matriz com números aleatórios entre 0 e 1\nmatrizB <- matrix(runif(l * c),\n                  nrow = l,\n                  ncol = c)\n\n# Maior valor na matriz\nmaiorB <- max(matrizB)\n\n# Resultado\ncat(\"Matriz:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMatriz:\n```\n:::\n\n```{.r .cell-code}\nprint(matrizB)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]      [,2]      [,3]      [,4]\n[1,] 0.03287555 0.9984157 0.1861256 0.9307909\n[2,] 0.23088818 0.9982641 0.6104579 0.6545324\n[3,] 0.03086007 0.5959231 0.5184232 0.8978979\n```\n:::\n\n```{.r .cell-code}\ncat(\"\\nMaior valor na matriz:\", maiorB, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nMaior valor na matriz: 0.9984157 \n```\n:::\n:::\n\n\n---\n\n* Utilize a função rnorm() \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dimensões da matriz\nl <- 3\nc <- 4\n\n# matriz\nmatrizC <- matrix(rnorm(l * c),\n                   nrow = l, \n                   ncol = c)\n\n# Maior valor na matriz\nmaiorC <- max(matrizC)\n\n# Resultado\ncat(\"Matriz:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMatriz:\n```\n:::\n\n```{.r .cell-code}\nprint(matrizC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]       [,2]       [,3]      [,4]\n[1,] -0.6351853 -0.1143822  0.2539818 0.1569579\n[2,] -1.4161576 -0.0692797  0.2878801 1.1023713\n[3,] -0.5261695  1.1062756 -0.4786442 0.8954156\n```\n:::\n\n```{.r .cell-code}\ncat(\"\\nMaior valor na matriz:\", maiorC, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nMaior valor na matriz: 1.106276 \n```\n:::\n:::\n\n\n---\n\n### 10. Substitua todos os elementos negativos da matriz por zero.\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrizD <- matrizC\n\nmatrizD[matrizD < 0] <- 0\n\nmatrizD\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]     [,2]      [,3]      [,4]\n[1,]    0 0.000000 0.2539818 0.1569579\n[2,]    0 0.000000 0.2878801 1.1023713\n[3,]    0 1.106276 0.0000000 0.8954156\n```\n:::\n:::\n\n\n---\n\n# Exercícios sobre Operações com Matrizes:\n\n---\n\n### 11. Crie duas matrizes de mesmo tamanho e some-as.\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz1 <- matrix(c(1, 2, 3,\n                    4, 5, 6,\n                    7, 8, 9), \n                  nrow = 3, \n                  ncol = 3)\nmatriz2 <- matrix(c(9, 8, 7,\n                    6, 5, 4,\n                    3, 2, 1),\n                  nrow = 3, \n                  ncol = 3)\n\nsoma_matrizes <- matriz1 + matriz2\nsoma_matrizes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   10   10   10\n[2,]   10   10   10\n[3,]   10   10   10\n```\n:::\n:::\n\n\n---\n\n### 12. Multiplique as duas matrizes criadas no exercício 11.\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplicacao_matrizes <- matriz1 %*% matriz2\nmultiplicacao_matrizes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   90   54   18\n[2,]  114   69   24\n[3,]  138   84   30\n```\n:::\n:::\n\n\n---\n\n### 13. Calcule o produto matricial entre a transposta de uma matriz e a matriz original.\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_transposta <- t(matriz1)\n\nmatricial <- matriz_transposta %*% matriz1\n\nmatricial\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   14   32   50\n[2,]   32   77  122\n[3,]   50  122  194\n```\n:::\n:::\n\n\n---\n\n### 14. Crie uma matriz diagonal com números diferentes na diagonal principal.\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_diagonal <- diag(c(1, 2, 3))\nmatriz_diagonal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    2    0\n[3,]    0    0    3\n```\n:::\n:::\n\n\n---\n\n### 15. Calcule a soma de todos os elementos acima da diagonal principal.\n\n::: {.cell}\n\n```{.r .cell-code}\nsoma_diagonal <- sum(matriz1[upper.tri(matriz1)])\nsoma_diagonal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19\n```\n:::\n:::\n\n\n---\n\n### 16. Calcule a média de uma matriz.\n\n::: {.cell}\n\n```{.r .cell-code}\nmedia_matriz <- mean(matriz1)\nmedia_matriz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n---\n\n### 17. Crie uma matriz simétrica qualquer.\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_simetrica <- matrix(c(1, 2, 3,\n                             2, 4, 5,\n                             3, 5, 6),\n                           nrow = 3,\n                           ncol = 3)\nmatriz_simetrica\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    2    4    5\n[3,]    3    5    6\n```\n:::\n:::\n\n\n---\n\n### 18. Encontre os autovalores e autovetores de uma matriz simétrica.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Encontrando os autovalores e autovetores\nautovalores <- eigen(matriz_simetrica)$values\nautovetores <- eigen(matriz_simetrica)$vectors\nautovalores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.3448143  0.1709152 -0.5157295\n```\n:::\n\n```{.r .cell-code}\nautovetores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]       [,2]       [,3]\n[1,] -0.3279853  0.5910090  0.7369762\n[2,] -0.5910090 -0.7369762  0.3279853\n[3,] -0.7369762  0.3279853 -0.5910090\n```\n:::\n:::\n\n\n---\n\n# Exercícios sobre Arrays:\n\n---\n\n### 19. Crie um array 3D com números inteiros de sua escolha.\n\n::: {.cell}\n\n```{.r .cell-code}\narray3d <- array(data = c(1, 2, 3,\n                          4, 5, 6,\n                          7, 8, 9), \n                 dim = c(3, 3, 3))\narray3d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n:::\n\n\n---\n\n### 20. Acesse o elemento na primeira linha, segunda coluna e primeira \"profundidade\".\n\n::: {.cell}\n\n```{.r .cell-code}\narrayelemento <- array3d[1, 2, 1]\narrayelemento\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n---\n\n### 21. Calcule a média dos elementos em cada camada do array 3D.\n\n::: {.cell}\n\n```{.r .cell-code}\nmedias_camadas <- apply(array3d, \n                        MARGIN = 3,\n                        FUN = mean)\nmedias_camadas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 5 5\n```\n:::\n:::\n\n\n---\n\n### 22. Substitua todos os elementos negativos do array por zero.\n\n::: {.cell}\n\n```{.r .cell-code}\narraynegativo <- array3d[array3d < 0] <- 0\narraynegativo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n---\n\n### 23. Encontre o máximo valor em um array.\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_valor <- max(array3d)\nmax_valor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n---\n\n### 24. Crie um array 4D representando volumes de dados em diferentes dimensões.\n\n::: {.cell}\n\n```{.r .cell-code}\narray4d <- array(data = 1:24,\n                 dim = c(2, 3, 2, 2))\narray4d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1, 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2, 1\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n\n, , 1, 2\n\n     [,1] [,2] [,3]\n[1,]   13   15   17\n[2,]   14   16   18\n\n, , 2, 2\n\n     [,1] [,2] [,3]\n[1,]   19   21   23\n[2,]   20   22   24\n```\n:::\n:::\n\n\n---\n\n# Exercícios Mistos:\n\n---\n\n### 25. Crie uma matriz e um array e realize uma operação entre eles.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar uma matriz\nmatriz <- matrix(1:9, nrow = 3, ncol = 3)\n\n# Criar um array usando a função array()\narray <- array(1:3, dim = c(3, 1, 1))\n\n# Converter o array em uma matriz com dimensões compatíveis\narray_matriz <- array[,,1]\n\n# Realizar uma operação entre a matriz e o array convertido em matriz\nresultado <- matriz + array_matriz\n\n# Imprimir a matriz, o array e o resultado\nprint(\"Matriz:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Matriz:\"\n```\n:::\n\n```{.r .cell-code}\nprint(matriz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n\n```{.r .cell-code}\nprint(\"Array:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Array:\"\n```\n:::\n\n```{.r .cell-code}\nprint(array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1]\n[1,]    1\n[2,]    2\n[3,]    3\n```\n:::\n\n```{.r .cell-code}\nprint(\"Array convertido em matriz:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Array convertido em matriz:\"\n```\n:::\n\n```{.r .cell-code}\nprint(array_matriz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nprint(\"Resultado:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Resultado:\"\n```\n:::\n\n```{.r .cell-code}\nprint(resultado)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2    5    8\n[2,]    4    7   10\n[3,]    6    9   12\n```\n:::\n:::\n\n\n---\n\n### 26. Resolva um sistema de equações usando uma matriz e um array.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar a matriz de coeficientes como uma matriz\nmatriz26 <- matrix(c(2, 3, 4, -2), nrow = 2, byrow = TRUE)\n\n# Criar o array de constantes usando a função array()\narray26 <- array(c(12, 6), dim = c(2, 1, 1))\n\n\n# Resolver o sistema de equações usando a função solve()\nsolucao <- solve(matriz26, array26)\n\n# Imprimir a solução\nprint(\"Solução:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Solução:\"\n```\n:::\n\n```{.r .cell-code}\nprint(solucao)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.625 2.250\n```\n:::\n:::\n\n\n---\n\n### 27. Crie uma matriz diagonal a partir dos autovalores de uma matriz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Defina uma matriz\nmatriz <- matrix(c(2, 1, 1, 3), nrow = 2)\n\n# Calcular os autovalores\nautovalores <- eigen(matriz)$values\n\n# Criar a matriz diagonal\nmatriz_diagonal <- diag(autovalores)\n\n# Defina uma matriz\nmatriz <- matrix(c(2, 1, 1, 3), nrow = 2)\n\n# Calcular os autovalores\nautovalores <- eigen(matriz)$values\n\n# Criar a matriz diagonal\nmatriz_diagonal <- diag(autovalores)\n\n# Imprimir a matriz diagonal\nprint(\"Matriz Diagonal:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Matriz Diagonal:\"\n```\n:::\n\n```{.r .cell-code}\nprint(matriz_diagonal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         [,1]     [,2]\n[1,] 3.618034 0.000000\n[2,] 0.000000 1.381966\n```\n:::\n:::\n\n\n---\n\n### 28. Multiplique uma matriz por um array e vice-versa.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar uma matriz\nmatriz <- matrix(1:9, nrow = 3, ncol = 3)\n\n# Criar um array usando a função array()\narray <- array(1:3, dim = c(3, 1, 1))\n\n# Multiplicar a matriz por vetor (matriz por vetor)\nresultado1 <- matriz %*% array\n\n# Multiplicar o vetor por matriz (vetor por matriz)\nresultado2 <- array %*% matriz\n\n# Imprimir os resultados\nprint(\"Multiplicação da matriz por vetor:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Multiplicação da matriz por vetor:\"\n```\n:::\n\n```{.r .cell-code}\nprint(resultado1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]   30\n[2,]   36\n[3,]   42\n```\n:::\n\n```{.r .cell-code}\nprint(\"Multiplicação do vetor por matriz:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Multiplicação do vetor por matriz:\"\n```\n:::\n\n```{.r .cell-code}\nprint(resultado2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   14   32   50\n```\n:::\n:::\n\n\n---\n\n### 29. Acesse elementos de um array usando diferentes técnicas de indexação.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando um array 2x3x4\narray <- array(1:24, dim = c(2, 3, 4))\n\n# Acessar o primeiro elemento\nprimeiro_elemento <- array[1]\n\n# Acessar o terceiro elemento\nterceiro_elemento <- array[3]\n\n# Acessar elementos nas posições 2 e 4\nposicoes <- c(2, 4)\nelementos_selecionados <- array[posicoes]\n\n# Criar um vetor lógico para acessar elementos maiores que 5\nelementos_maiores_que_5 <- array > 5\nelementos_selecionados <- array[elementos_maiores_que_5]\n\n# Excluir o terceiro elemento\narray_sem_terceiro_elemento <- array[-3]\n\n# Imprimir os resultados com mensagens descritivas\nprint(paste(\"Indexação posição numérica - Primeiro elemento:\", primeiro_elemento, \". Terceiro elemento:\", terceiro_elemento))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Indexação posição numérica - Primeiro elemento: 1 . Terceiro elemento: 3\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Indexação por vetor de posições - Elementos nas posições 2 e 4:\", elementos_selecionados))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 6\" \n [2] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 7\" \n [3] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 8\" \n [4] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 9\" \n [5] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 10\"\n [6] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 11\"\n [7] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 12\"\n [8] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 13\"\n [9] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 14\"\n[10] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 15\"\n[11] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 16\"\n[12] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 17\"\n[13] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 18\"\n[14] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 19\"\n[15] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 20\"\n[16] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 21\"\n[17] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 22\"\n[18] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 23\"\n[19] \"Indexação por vetor de posições - Elementos nas posições 2 e 4: 24\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Indexação Lógica - Elementos maiores que 5:\", elementos_selecionados))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Indexação Lógica - Elementos maiores que 5: 6\" \n [2] \"Indexação Lógica - Elementos maiores que 5: 7\" \n [3] \"Indexação Lógica - Elementos maiores que 5: 8\" \n [4] \"Indexação Lógica - Elementos maiores que 5: 9\" \n [5] \"Indexação Lógica - Elementos maiores que 5: 10\"\n [6] \"Indexação Lógica - Elementos maiores que 5: 11\"\n [7] \"Indexação Lógica - Elementos maiores que 5: 12\"\n [8] \"Indexação Lógica - Elementos maiores que 5: 13\"\n [9] \"Indexação Lógica - Elementos maiores que 5: 14\"\n[10] \"Indexação Lógica - Elementos maiores que 5: 15\"\n[11] \"Indexação Lógica - Elementos maiores que 5: 16\"\n[12] \"Indexação Lógica - Elementos maiores que 5: 17\"\n[13] \"Indexação Lógica - Elementos maiores que 5: 18\"\n[14] \"Indexação Lógica - Elementos maiores que 5: 19\"\n[15] \"Indexação Lógica - Elementos maiores que 5: 20\"\n[16] \"Indexação Lógica - Elementos maiores que 5: 21\"\n[17] \"Indexação Lógica - Elementos maiores que 5: 22\"\n[18] \"Indexação Lógica - Elementos maiores que 5: 23\"\n[19] \"Indexação Lógica - Elementos maiores que 5: 24\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Indexação Negativa - Excluindo Terceiro Elemento:\", array_sem_terceiro_elemento))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Indexação Negativa - Excluindo Terceiro Elemento: 1\" \n [2] \"Indexação Negativa - Excluindo Terceiro Elemento: 2\" \n [3] \"Indexação Negativa - Excluindo Terceiro Elemento: 4\" \n [4] \"Indexação Negativa - Excluindo Terceiro Elemento: 5\" \n [5] \"Indexação Negativa - Excluindo Terceiro Elemento: 6\" \n [6] \"Indexação Negativa - Excluindo Terceiro Elemento: 7\" \n [7] \"Indexação Negativa - Excluindo Terceiro Elemento: 8\" \n [8] \"Indexação Negativa - Excluindo Terceiro Elemento: 9\" \n [9] \"Indexação Negativa - Excluindo Terceiro Elemento: 10\"\n[10] \"Indexação Negativa - Excluindo Terceiro Elemento: 11\"\n[11] \"Indexação Negativa - Excluindo Terceiro Elemento: 12\"\n[12] \"Indexação Negativa - Excluindo Terceiro Elemento: 13\"\n[13] \"Indexação Negativa - Excluindo Terceiro Elemento: 14\"\n[14] \"Indexação Negativa - Excluindo Terceiro Elemento: 15\"\n[15] \"Indexação Negativa - Excluindo Terceiro Elemento: 16\"\n[16] \"Indexação Negativa - Excluindo Terceiro Elemento: 17\"\n[17] \"Indexação Negativa - Excluindo Terceiro Elemento: 18\"\n[18] \"Indexação Negativa - Excluindo Terceiro Elemento: 19\"\n[19] \"Indexação Negativa - Excluindo Terceiro Elemento: 20\"\n[20] \"Indexação Negativa - Excluindo Terceiro Elemento: 21\"\n[21] \"Indexação Negativa - Excluindo Terceiro Elemento: 22\"\n[22] \"Indexação Negativa - Excluindo Terceiro Elemento: 23\"\n[23] \"Indexação Negativa - Excluindo Terceiro Elemento: 24\"\n```\n:::\n:::\n\n\n---\n\n# Manipulação de Listas e Data Frames:\n\n---\n\n### 31. Crie uma lista contendo três vetores: nomes, idades e salários.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar vetores com nomes, idades e salários\nnomes <- c(\"Alice\", \"Bob\", \"Carol\", \"David\")\nidades <- c(25, 30, 28, 35)\nsalarios <- c(5000, 6000, 5500, 700)\n\n# Criar uma lista com os vetores\nlista <- list(Nomes = nomes,\n              Idades = idades,\n              Salarios = salarios)\n\n# Imprimir a lista\nprint(lista)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Nomes\n[1] \"Alice\" \"Bob\"   \"Carol\" \"David\"\n\n$Idades\n[1] 25 30 28 35\n\n$Salarios\n[1] 5000 6000 5500  700\n```\n:::\n:::\n\n\n---\n\n### 32. Converta essa lista em um data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(lista)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Nomes Idades Salarios\n1 Alice     25     5000\n2   Bob     30     6000\n3 Carol     28     5500\n4 David     35      700\n```\n:::\n:::\n\n\n---\n\n### 33. Adicione uma nova coluna chamada \"gênero\" ao data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$genero <- c(\"F\", \"M\", \"F\", \"M\")\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Nomes Idades Salarios genero\n1 Alice     25     5000      F\n2   Bob     30     6000      M\n3 Carol     28     5500      F\n4 David     35      700      M\n```\n:::\n:::\n\n\n---\n\n### 34. Remova a coluna \"idades\" do data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2 <- data\ndata2$Idades <- NULL\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Nomes Salarios genero\n1 Alice     5000      F\n2   Bob     6000      M\n3 Carol     5500      F\n4 David      700      M\n```\n:::\n:::\n\n\n---\n\n### 35. Acesse o segundo elemento da lista original.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25 30 28 35\n```\n:::\n:::\n\n\n---\n\n### 36. Crie uma nova lista de pessoas com informações diferentes e adicione-a ao data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar um data frame com as novas pessoas\nnovas_pessoas <- data.frame(\n  Nomes = c(\"Eva\", \"João\", \"José\", \"Luis\"),\n  Idades = c(27, 45, 50, 18),\n  Salarios = c(6200, 1000, 1200, 8000),\n  genero = c(\"F\", \"M\", \"M\", \"M\")\n)\n\n# Adicionar a nova pessoa ao data frame existente\ndata4 <- rbind(data, novas_pessoas)\n\ndata4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Nomes Idades Salarios genero\n1 Alice     25     5000      F\n2   Bob     30     6000      M\n3 Carol     28     5500      F\n4 David     35      700      M\n5   Eva     27     6200      F\n6  João     45     1000      M\n7  José     50     1200      M\n8  Luis     18     8000      M\n```\n:::\n:::\n\n\n---\n\n### 37. Aninhe uma lista dentro da lista original para armazenar informações de endereço.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aninhando listas\nendereco <- list(\n  rua = c(\"Rua 1\",\"Rua 5\", \"Rua 7\", \"Rua 5\"),\n  numero = c(123, 265, 6568, 978),\n  cidade = c(\"São Paulo\", \"São Paulo\", \"São Paulo\", \"São Paulo\")\n)\n\nlista$endereco <- endereco\nlista\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Nomes\n[1] \"Alice\" \"Bob\"   \"Carol\" \"David\"\n\n$Idades\n[1] 25 30 28 35\n\n$Salarios\n[1] 5000 6000 5500  700\n\n$endereco\n$endereco$rua\n[1] \"Rua 1\" \"Rua 5\" \"Rua 7\" \"Rua 5\"\n\n$endereco$numero\n[1]  123  265 6568  978\n\n$endereco$cidade\n[1] \"São Paulo\" \"São Paulo\" \"São Paulo\" \"São Paulo\"\n```\n:::\n:::\n\n\n---\n\n### 38. Acesse o número da casa da primeira pessoa no data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata5 <- data.frame(lista)\n```\n:::\n\n\n---\n\n### 39. Crie um novo data frame apenas com as pessoas com salário acima de 5000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsalario_maior_5000 <- data5[data5$Salarios > 5000, ]  \nsalario_maior_5000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Nomes Idades Salarios endereco.rua endereco.numero endereco.cidade\n2   Bob     30     6000        Rua 5             265       São Paulo\n3 Carol     28     5500        Rua 7            6568       São Paulo\n```\n:::\n:::\n\n\n---\n\n### 40. Ordene o data frame pelo nome das pessoas em ordem alfabética.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordem <- data[order(data$Nomes), ]\nordem\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Nomes Idades Salarios genero\n1 Alice     25     5000      F\n2   Bob     30     6000      M\n3 Carol     28     5500      F\n4 David     35      700      M\n```\n:::\n:::\n\n\n---\n\n# Manipulação de Fatores:\n\n---\n\n### 41. Crie um vetor de fatores representando o grau de escolaridade (fundamental, médio, superior).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criação de fator\ngrau_escolaridade <- factor(c(\"fundamental\", \"médio\", \"superior\"))\ngrau_escolaridade\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] fundamental médio       superior   \nLevels: fundamental médio superior\n```\n:::\n:::\n\n\n---\n\n### 42. Converta o vetor de fatores para um vetor de strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvetor_string <- as.character(grau_escolaridade)\nvetor_string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"fundamental\" \"médio\"       \"superior\"   \n```\n:::\n:::\n\n\n---\n\n### 43. Crie um fator com níveis personalizados e aplique-o a um vetor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Definindo fator com níveis específicos\nq43 <- factor(c(\"fundamental\", \"médio\", \"superior\"), \n                levels = c(\"fundamental\", \"médio\", \"superior\", \"doutorado\"))\nq43\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] fundamental médio       superior   \nLevels: fundamental médio superior doutorado\n```\n:::\n:::\n\n\n---\n\n### 44. Ordene os níveis do fator em ordem alfabética.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq44 <- as.character(q43)\nq44\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"fundamental\" \"médio\"       \"superior\"   \n```\n:::\n:::\n\n\n---\n\n### 45. Faça a contagem de frequência de cada nível no fator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fazer a contagem de frequência dos níveis no fator\nq45 <- table(q43)\n\n# Imprimir a contagem de frequência\nq45\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nq43\nfundamental       médio    superior   doutorado \n          1           1           1           0 \n```\n:::\n:::\n\n\n---\n\n### 46. Concatenação de Fatores com Strings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exemplo de fatores\nfator1 <- factor(c(\"A\", \"B\", \"C\"))\nfator2 <- factor(c(\"X\", \"Y\", \"Z\"))\n\n# Converter os fatores em strings usando as.character()\nstrings1 <- as.character(fator1)\nstrings2 <- as.character(fator2)\n\n# Concatenar as strings com outros strings\nq46 <- paste(strings1, \"e\", strings2)\n\n# Imprimir o resultado\nq46\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A e X\" \"B e Y\" \"C e Z\"\n```\n:::\n:::\n\n\n---\n\n### 47. Crie um vetor de strings representando nomes de cidades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar um vetor de strings com nomes de cidades\nq47 <- c(\"Nova Iorque\", \"São Paulo\", \"Londres\", \"Buenos Aires\", \"Munique\")\n\n# Imprimir o vetor de nomes de cidades\nq47\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nova Iorque\"  \"São Paulo\"    \"Londres\"      \"Buenos Aires\" \"Munique\"     \n```\n:::\n:::\n\n\n---\n\n### 48. Crie um fator a partir desse vetor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq48 <- factor(q47)\nq48\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Nova Iorque  São Paulo    Londres      Buenos Aires Munique     \nLevels: Buenos Aires Londres Munique Nova Iorque São Paulo\n```\n:::\n:::\n\n\n---\n\n### 49. Crie um novo vetor de strings representando países.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar um vetor de strings com nomes de países\nq49 <- c(\"Estados Unidos\", \"Brasil\", \"Inglaterra\", \"Argentina\", \"Alemanha\")\n\n# Imprimir o vetor de nomes de países\nq49\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Estados Unidos\" \"Brasil\"         \"Inglaterra\"     \"Argentina\"     \n[5] \"Alemanha\"      \n```\n:::\n:::\n\n\n---\n\n### 50. Concatene o fator de cidades com o vetor de países, separando-os por vírgula.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq50 = paste(as.character(q48), q49, sep = \", \")\nq50\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nova Iorque, Estados Unidos\" \"São Paulo, Brasil\"          \n[3] \"Londres, Inglaterra\"         \"Buenos Aires, Argentina\"    \n[5] \"Munique, Alemanha\"          \n```\n:::\n:::\n\n\n---\n\n### 51. Converta o resultado da concatenação de volta para um vetor de strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq51 <- strsplit(q50, \", \")\n\nq51 <- unlist(q51)\n\nq51\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Nova Iorque\"    \"Estados Unidos\" \"São Paulo\"      \"Brasil\"        \n [5] \"Londres\"        \"Inglaterra\"     \"Buenos Aires\"   \"Argentina\"     \n [9] \"Munique\"        \"Alemanha\"      \n```\n:::\n:::\n\n\n---\n\n# Exercícios de Desafio:\n\n---\n\n### 52. Crie uma lista de data frames, onde cada data frame representa dados de uma turma diferente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar data frames para turmas\nturma1 <- data.frame(\n  Aluno = c(\"Alice\", \"Bob\", \"Carol\"),\n  Nota = c(95, 88, 78)\n)\n\nturma2 <- data.frame(\n  Aluno = c(\"David\", \"Eva\", \"Frank\"),\n  Nota = c(89, 92, 85)\n)\n\nturma3 <- data.frame(\n  Aluno = c(\"Grace\", \"Hank\", \"Ivy\"),\n  Nota = c(76, 91, 83)\n)\n\n# Criar uma lista de data frames\nlista_turmas <- list(turma1, turma2, turma3)\n\n# Imprimir a lista de data frames\nprint(lista_turmas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n  Aluno Nota\n1 Alice   95\n2   Bob   88\n3 Carol   78\n\n[[2]]\n  Aluno Nota\n1 David   89\n2   Eva   92\n3 Frank   85\n\n[[3]]\n  Aluno Nota\n1 Grace   76\n2  Hank   91\n3   Ivy   83\n```\n:::\n:::\n\n\n---\n\n### 53. Crie um fator a partir de um vetor lógico representando aprovação ou reprovação.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar um vetor lógico representando aprovação (TRUE) e reprovação (FALSE)\naprovacao_reprovacao <- c(TRUE, FALSE, TRUE, FALSE, TRUE)\n\n# Converter o vetor lógico em um fator\nfator_aprovacao <- factor(aprovacao_reprovacao, levels = c(FALSE, TRUE), labels = c(\"Reprovado\", \"Aprovado\"))\n\n# Imprimir o fator\nprint(fator_aprovacao)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Aprovado  Reprovado Aprovado  Reprovado Aprovado \nLevels: Reprovado Aprovado\n```\n:::\n:::\n\n\n---\n\n### 54. Concatene o fator de aprovação com um vetor de notas como strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar um fator de aprovação\nfator_aprovacao <- factor(c(\"Reprovado\", \"Aprovado\", \"Reprovado\", \"Aprovado\", \"Aprovado\"))\n\n# Criar um vetor de notas como strings\nnotas <- c(\"85\", \"92\", \"78\", \"95\", \"89\")\n\n# Converter o fator de aprovação em um vetor de strings\nstrings_aprovacao <- as.character(fator_aprovacao)\n\n# Concatenar o fator de aprovação com as notas\nresultado <- paste(strings_aprovacao, notas, sep = \": \")\n\n# Imprimir o resultado\nprint(resultado)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Reprovado: 85\" \"Aprovado: 92\"  \"Reprovado: 78\" \"Aprovado: 95\" \n[5] \"Aprovado: 89\" \n```\n:::\n:::\n\n\n---\n\n### 55. Crie um data frame a partir do resultado da concatenação, com colunas \"Resultado\" e \"Nota\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Resultado da concatenação\nresultado <- c(\"Reprovado: 85\", \"Aprovado: 92\", \"Reprovado: 78\", \"Aprovado: 95\", \"Aprovado: 89\")\n\n# Separar o resultado em colunas \"Resultado\" e \"Nota\" usando strsplit\nresultado_separado <- strsplit(resultado, \": \")\n\n# Criar o data frame\ndata_frame_resultado <- data.frame(\n  Resultado = sapply(resultado_separado, \"[[\", 1),\n  Nota = as.numeric(sapply(resultado_separado, \"[[\", 2))\n)\n\n# Imprimir o data frame\nprint(data_frame_resultado)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Resultado Nota\n1 Reprovado   85\n2  Aprovado   92\n3 Reprovado   78\n4  Aprovado   95\n5  Aprovado   89\n```\n:::\n:::\n\n\n---\n\n### 56. Aninhe um data frame dentro de outro data frame, representando informações detalhadas sobre cada pessoa.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar um data frame com informações gerais sobre as pessoas\ninfo_pessoas <- data.frame(\n  Nome = c(\"Alice\", \"Bob\", \"Carol\"),\n  Idade = c(25, 30, 28)\n)\n\n# Criar um data frame aninhado com informações detalhadas\ninfo_detalhadas <- list(\n  data.frame(\n    Nome = \"Alice\",\n    Endereco = \"123 Main St\",\n    Telefone = \"555-1234\"\n  ),\n  data.frame(\n    Nome = \"Bob\",\n    Endereco = \"456 Elm St\",\n    Telefone = \"555-5678\"\n  ),\n  data.frame(\n    Nome = \"Carol\",\n    Endereco = \"789 Oak St\",\n    Telefone = \"555-9876\"\n  )\n)\n\n# Adicionar o data frame aninhado ao data frame principal\ninfo_pessoas$InfoDetalhada <- info_detalhadas\n\n# Imprimir o data frame principal\nprint(info_pessoas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Nome Idade                InfoDetalhada\n1 Alice    25 Alice, 123 Main St, 555-1234\n2   Bob    30    Bob, 456 Elm St, 555-5678\n3 Carol    28  Carol, 789 Oak St, 555-9876\n```\n:::\n:::\n\n\n---\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}