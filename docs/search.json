[
  {
    "objectID": "03_objetcs.html#vetores-em-r",
    "href": "03_objetcs.html#vetores-em-r",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.1 3.1 Vetores em R",
    "text": "4.1 3.1 Vetores em R\nVamos recapitular um pouco do que vimos anteriormento sobre vetores. Os vetores são um bloco de construção básica para programação em R. Vetores são muito versáteis, formando a base para construções mais complexas, como matrizes, listas e data frames. Eles desempenham um papel central na manipulação de dados.\nUm vetor é uma estrutura de dados fundamental que consiste em uma sequência ordenada de elementos do mesmo tipo. Esses elementos podem ser números inteiros, números de ponto flutuante, caracteres, valores lógicos ou qualquer outro tipo de dado.\nEm termos mais simples, um vetor é como uma “caixa” que pode conter vários valores do mesmo tipo. Cada valor dentro do vetor é chamado de elemento. Os elementos de um vetor podem ser acessados individualmente por meio de um índice que indica sua posição na sequência. Em R o primeiro elemento de um vetor é acessado pelo índice [1], em outras linguagens, como em Python, esse índice é [0].\n\n4.1.1 3.1.1 Criação de Vetores e Manipulação de Propriedades\nUm vetor em R é uma sequência ordenada de elementos do mesmo tipo. Você pode criar um vetor usando a função c(), que combina elementos em um único vetor. Por exemplo:\n\n# Criando um vetor de números inteiros\nvetor_inteiro &lt;- c(2, 4, 6, 8, 10)\n\n# Criando um vetor de números reais\nvetor_real &lt;- c(3.14, 1.618, 2.718, 3.48, 1.9)\n\n# Criando um vetor de caracteres\nvetor_caracteres &lt;- c(\"maçã\", \"banana\", \"laranja\")\n\n# Criando um vetor misto\nvetor_misto &lt;- c(1, 2, \"maçã\", \"banana\", \"laranja\")\n\nPara sabermos o comprimento de um vetor utilizamos a função length().\n\nlength(vetor_inteiro)\n\n[1] 5\n\n\n\nlength(vetor_real)\n\n[1] 5\n\n\n\nlength(vetor_caracteres)\n\n[1] 3\n\n\n\nlength(vetor_misto)\n\n[1] 5\n\n\nPara sabermos a classe de um vetor utilizamos a função class().\n\nclass(vetor_inteiro)\n\n[1] \"numeric\"\n\n\n\nclass(vetor_real)\n\n[1] \"numeric\"\n\n\n\nclass(vetor_caracteres)\n\n[1] \"character\"\n\n\n\nclass(vetor_misto)\n\n[1] \"character\"\n\n\n\n4.1.2 3.1.2 Operações Aritméticas Vetoriais\nOperações aritméticas em vetores são realizadas elemento por elemento, facilitando cálculos eficientes. Por exemplo:\n\n# Soma de vetores\nsoma_vetores &lt;- vetor_inteiro + vetor_real\nsoma_vetores\n\n[1]  5.140  5.618  8.718 11.480 11.900\n\n\n\n# Subtração de vetores\nsubtracao_vetores &lt;- vetor_real - vetor_inteiro\nsubtracao_vetores\n\n[1]  1.140 -2.382 -3.282 -4.520 -8.100\n\n\n\n# Multiplicação de vetores\nmultiplicacao_vetores &lt;- vetor_inteiro * 2\nmultiplicacao_vetores\n\n[1]  4  8 12 16 20\n\n\n\n# Divisão de vetores\ndivisao_vetores &lt;- vetor_real / 3\ndivisao_vetores\n\n[1] 1.0466667 0.5393333 0.9060000 1.1600000 0.6333333\n\n\n\n4.1.3 3.1.3 Aplicação da Regra da Reciclagem\nA regra da reciclagem permite aplicar operações entre vetores de tamanhos diferentes. Essa regra permite que vetores de tamanhos distintos sejam combinados de maneira coerente em operações aritméticas ou lógicas. O vetor menor é “reciclado” ou replicado várias vezes para se ajustar ao tamanho do vetor maior, permitindo que as operações sejam realizadas de forma consistente em todos os elementos.\nPara compreender melhor a regra da reciclagem, considere a seguinte operação:\n\nvetor_a &lt;- c(1, 2)\nvetor_b &lt;- c(10, 20, 30)\nresultado &lt;- vetor_a + vetor_b\n\nWarning in vetor_a + vetor_b: comprimento do objeto maior não é múltiplo do\ncomprimento do objeto menor\n\n\n\nresultado\n\n[1] 11 22 31\n\n\n\nlength(vetor_a)\n\n[1] 2\n\n\n\nlength(vetor_b)\n\n[1] 3\n\n\nNote que o vetor vetor_a tem apenas dois elementos, enquanto o vetor vetor_b tem três elementos. Ao realizar a operação de adição, a regra da reciclagem faz com que o vetor vetor_a seja replicado para corresponder ao tamanho do vetor vetor_b. Isso resulta em vetor_a transformado em c(1, 2, 1) e, então, a operação de adição é realizada elemento a elemento:\n\nc(1, 2, 1) + c(10, 20, 30)\n\n[1] 11 22 31\n\n\nVale ressaltar que a regra da reciclagem funciona quando o comprimento do vetor maior é um múltiplo inteiro do comprimento do vetor menor. Caso contrário, um aviso ou erro será gerado.\n\n4.1.4 3.1.4 Exploração de Vetores Lógicos\nVetores lógicos desempenham um papel crucial na programação e análise de dados, permitindo a seleção e filtragem de elementos com base em condições específicas. Um vetor lógico contém valores booleanos (TRUE ou FALSE), onde cada elemento indica se uma determinada condição é verdadeira ou falsa para o elemento correspondente no vetor original.\n\n4.1.4.1 3.1.4.1 Aplicação de Vetores Lógicos: Filtragem e Seleção\nOs vetores lógicos são frequentemente usados para filtrar e selecionar elementos de um vetor com base em uma condição. Suponha que temos um vetor de idades e queremos selecionar apenas as idades maiores que 18:\n\nidades &lt;- c(16, 21, 14, 30, 25)\ncondicao &lt;- idades &gt; 18\ncondicao\n\n[1] FALSE  TRUE FALSE  TRUE  TRUE\n\n\n\nidades_maiores &lt;- idades[condicao]\nidades_maiores\n\n[1] 21 30 25\n\n\n\n## Também poderiamos incluir a condição \n## diretamente no vetor que queremos filtrar\n\nidades_maiores &lt;- idades[idades &gt; 18]\nidades_maiores\n\n[1] 21 30 25\n\n\n\n4.1.4.2 3.1.4.2 Operações Lógicas em Vetores Lógicos\nAlém da filtragem, os vetores lógicos podem ser combinados com operações lógicas. Por exemplo, é possível usar operadores como & (AND) e | (OR) para criar condições mais complexas:\n\nidades &lt;- c(16, 21, 14, 30, 25, 45)\ncondicao1 &lt;- idades &gt; 18\ncondicao2 &lt;- idades &lt; 30\ncondicao_final &lt;- condicao1 & condicao2\nidades_selecionadas &lt;- idades[condicao_final]\nidades_selecionadas\n\n[1] 21 25\n\n\n\n## Também poderiamos incluir a condição \n## diretamente no vetor que queremos filtrar\nidades_selecionadas &lt;- idades[condicao_final]\nidades_selecionadas &lt;- idades[idades &gt; 18 & idades &lt; 30]\n\n\n4.1.5 3.1.5 Tratamento de Informações Faltantes\nAo lidar com dados do mundo real, é comum encontrar diversos tipos de informações faltantes, como valores ausentes (NA), valores que não são um número (NaN). O tratamento adequado desses valores é essencial para garantir a integridade das análises estatísticas.\n\n4.1.5.1 3.1.5.1 Valores Ausentes (NA)\nO valor NA (Not Available) é usado em R para representar informações ausentes. É fundamental identificar e tratar esses valores ao realizar análises estatísticas.\n\n4.1.5.1.1 3.1.5.1.1 Identificação de Valores NA\nPara identificar valores NA, você pode usar a função is.na():\n\ndados &lt;- c(1, NA, 3, 4, NA)\nvalores_faltantes &lt;- is.na(dados)\n\n\n4.1.5.1.2 3.1.5.1.2 Remoção de Valores NA\n\nAs funções na.omit() e na.exclude removem os valores NA de um vetor, mas pode levar à perda de outros dados associados:\n\ndados &lt;- c(1, NA, 3, 4, NA)\ndados_sem_na &lt;- na.omit(dados)\ndados_sem_na\n\n[1] 1 3 4\nattr(,\"na.action\")\n[1] 2 5\nattr(,\"class\")\n[1] \"omit\"\n\n\n\ndados_sem_na_exclude &lt;- na.exclude(dados)\ndados_sem_na_exclude\n\n[1] 1 3 4\nattr(,\"na.action\")\n[1] 2 5\nattr(,\"class\")\n[1] \"exclude\"\n\n\n\n4.1.5.1.3 3.1.5.1.3 Preenchimento de Valores NA\n\n\ndados &lt;- c(1, NA, 3, 4, NA)\ndados[is.na(dados)] &lt;- 0\ndados\n\n[1] 1 0 3 4 0\n\n\n\n4.1.5.2 3.1.5.2 Valores que Não São um Número (NaN)\nO valor NaN (Not a Number) é usado para representar resultados matemáticos inválidos, como a divisão por zero ou a raiz quadrada de um número negativo.\n\n4.1.5.2.0.1 3.1.5.2.1 Identificação de Valores NaN\n\nA função is.nan() identifica valores NaN:\n\nresultado &lt;- 0 / 0\nresultado\n\n[1] NaN\n\n\n\nvalor_nao_eh_numero &lt;- is.nan(resultado)\nvalor_nao_eh_numero\n\n[1] TRUE\n\n\n\n4.1.6 3.1.6 Vetores nomeados\nPodemos atribuir um “nome” para cada elemento de um vetor. Com isso, podemos selecionar elementos nomeados do nosso vetor.\n\nidades &lt;- c(20, 28, 35)\nnames(idades)\n\nNULL\n\n\n\nnames(idades) &lt;- c(\"João\", \"Aline\", \"Márcio\") \nnames(idades)\n\n[1] \"João\"   \"Aline\"  \"Márcio\"\n\n\n\nidades\n\n  João  Aline Márcio \n    20     28     35 \n\n\n\nidades[\"Aline\"]\n\nAline \n   28 \n\n\n\nidades[c(\"Aline\", \"João\")]\n\nAline  João \n   28    20"
  },
  {
    "objectID": "03_objetcs.html#matrizes",
    "href": "03_objetcs.html#matrizes",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.2 3.2 Matrizes",
    "text": "4.2 3.2 Matrizes\nAs matrizes e arrays são estruturas de dados bidimensionais e multidimensionais, respectivamente. Suas propriedades e funções permitem realizar uma variedade de operações, desde cálculos matriciais até resolução de sistemas lineares e decomposições espectrais.\n\n4.2.1 3.2.1 Criação e Manipulação de Matrizes em R\nA maneira mais simples para criarmos uma matriz em R é através das funções cbind() e rbind(), nas quais podemos concatenar vetores pelas colunas (columns) ou linhas (rows), respectivamente.\n\nvetor_a = c(1,2,3,4)\nvetor_b = c(5,6,7,8)\n\nmatriz_linha = rbind(vetor_a, \n                     vetor_b)\nmatriz_linha\n\n        [,1] [,2] [,3] [,4]\nvetor_a    1    2    3    4\nvetor_b    5    6    7    8\n\n\n\nclass(matriz_linha)\n\n[1] \"matrix\" \"array\" \n\n\n\nis.matrix(matriz_linha)\n\n[1] TRUE\n\n\n\nmatriz_coluna= cbind(vetor_a, \n                     vetor_b)\nmatriz_coluna\n\n     vetor_a vetor_b\n[1,]       1       5\n[2,]       2       6\n[3,]       3       7\n[4,]       4       8\n\n\n\nclass(matriz_coluna)\n\n[1] \"matrix\" \"array\" \n\n\n\nis.matrix(matriz_coluna)\n\n[1] TRUE\n\n\nMatrizes também podem ser criadas através da função matrix(), que permite especificar os elementos, o número de linhas e colunas, e se os elementos devem ser preenchidos por linha ou por coluna.\n\nA &lt;- matrix(c(1:9), \n            ncol = 3,\n            byrow = TRUE)\nA\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\nB &lt;- matrix(c(1:9), \n            ncol = 3, \n            byrow = FALSE)\nB\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n4.2.2 3.2.2 Seleção de Elementos em Matrizes no R\nA seleção de elementos em matrizes no R é uma operação fundamental para acessar e manipular dados específicos contidos na matriz. As técnicas de seleção permitem obter valores individuais, linhas, colunas ou subconjuntos da matriz com base em critérios específicos. Vamos explorar as diferentes formas de seleção de elementos em matrizes.\n\n4.2.2.1 3.2.2.1 Seleção de Elementos Específicos\nPodemos selecionar elementos específicos de uma matriz informando o número da linha e da coluna correspondentes.\n\nA &lt;- matrix(c(2, -1, 3, \n              1, 4, 1, \n              5, -2, 7), \n            ncol = 3, \n            byrow = TRUE)\nelemento_1_2 &lt;- A[1, 2]  # Seleciona o elemento na primeira linha e segunda coluna \nelemento_1_2\n\n[1] -1\n\n\n\nelemento_3_3 &lt;- A[3, 3]  # Seleciona o elemento na terceira linha e terceira coluna \nelemento_3_3\n\n[1] 7\n\n\n\n4.2.2.2 3.2.2.2 Seleção de Linhas ou Colunas Inteiras\nPodemos selecionar todas as entradas de uma linha ou coluna especificada.\n\ncoluna_2 &lt;- A[, 2]  # Seleciona a segunda coluna inteira \ncoluna_2\n\n[1] -1  4 -2\n\n\n\nlinha_1 &lt;- A[1, ]   # Seleciona a primeira linha inteira \nlinha_1\n\n[1]  2 -1  3\n\n\n\n4.2.2.3 3.2.2.3 Seleção com Base em Condições\nPodemos selecionar elementos com base em condições específicas. A função which() é útil para selecionar elementos em matrizes com base em condições específicas. Ela retorna os índices dos elementos que atendem à condição fornecida.\n\n## Exemplo 1: Seleção de Elementos Maiores que um Valor\nB\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nelementos_maior_que_3 &lt;- B[which(B &gt; 3)]\nelementos_maior_que_3\n\n[1] 4 5 6 7 8 9\n\n\n\n## Exemplo 2: Seleção de Elementos Ímpares\nelementos_impares &lt;- B[which(B %% 2 != 0)]\nelementos_impares\n\n[1] 1 3 5 7 9\n\n\n\n## Exemplo 3: Seleção de Elementos Negativos da Segunda Coluna\nelementos_negativos_coluna_2 &lt;- A[, 2][which(A[, 2] &lt; 0)] \nelementos_negativos_coluna_2\n\n[1] -1 -2\n\n\n\n## Exenplo 4: Seleção de Elementos por Linha\nelementos_linha_1_maior_que_2 &lt;- B[1, which(B[1, ] &gt; 2)]\nelementos_linha_1_maior_que_2\n\n[1] 4 7\n\n\n\n4.2.2.4 3.2.2.4 Remoção de Linhas/Colunas (A[-linhas, -colunas])\nPodemos remover linhas ou colunas da matriz, criando uma nova matriz sem as linhas ou colunas especificadas.\n\nA\n\n     [,1] [,2] [,3]\n[1,]    2   -1    3\n[2,]    1    4    1\n[3,]    5   -2    7\n\n\n\nA_sem_terceira_coluna &lt;- A[, -3]  # Remove a terceira coluna da matriz\nA_sem_terceira_coluna\n\n     [,1] [,2]\n[1,]    2   -1\n[2,]    1    4\n[3,]    5   -2\n\n\n\nA_sem_primeiras_duas_linhas &lt;- A[-(1:2), ]  # Remove as duas primeiras linhas da matriz\n\nA_sem_primeiras_duas_linhas\n\n[1]  5 -2  7\n\n\n\nA_sem_linha_coluna &lt;- A[-1, -2]  # Remove a primeira linha e segunda coluna\n\nA_sem_linha_coluna\n\n     [,1] [,2]\n[1,]    1    1\n[2,]    5    7\n\n\n\n4.2.3 3.2.3 Operações Matriciais e Funções de Matrizes\nAs operações matriciais e funções associadas desempenham um papel fundamental na manipulação e análise de dados em matrizes. Elas permitem realizar cálculos matemáticos essenciais para diversas aplicações, incluindo álgebra linear e estatísticas.\n\n4.2.3.1 3.2.3.1 Soma e Subtração (A + B e A - B)\nA adição e subtração de matrizes envolvem a combinação de elementos correspondentes nas matrizes A e B. As dimensões das matrizes devem ser compatíveis para que essas operações sejam válidas. Para verificarmos a dimensão de uma matriz utilizamos a função dim().\n\nA &lt;- matrix(c(4, -3, 7, \n              10, 1, 1, \n              -5, 2, 3), \n            ncol = 3, \n            byrow = TRUE)\nA\n\n     [,1] [,2] [,3]\n[1,]    4   -3    7\n[2,]   10    1    1\n[3,]   -5    2    3\n\n\n\ndim(A) \n\n[1] 3 3\n\n\n\nB &lt;- matrix(c(2, -1, 3,\n              1, 4, 1, \n              5, -2, 7), \n            ncol = 3, \n            byrow = TRUE)\nB\n\n     [,1] [,2] [,3]\n[1,]    2   -1    3\n[2,]    1    4    1\n[3,]    5   -2    7\n\n\n\ndim(B)\n\n[1] 3 3\n\n\n\nsoma &lt;- A + B\nsoma\n\n     [,1] [,2] [,3]\n[1,]    6   -4   10\n[2,]   11    5    2\n[3,]    0    0   10\n\n\n\ndim(soma)\n\n[1] 3 3\n\n\n\nsubtracao &lt;- A - B\nsubtracao\n\n     [,1] [,2] [,3]\n[1,]    2   -2    4\n[2,]    9   -3    0\n[3,]  -10    4   -4\n\n\n\ndim(subtracao)\n\n[1] 3 3\n\n\n\n4.2.3.2 3.2.3.2 Soma das Colunas (colSums(A)) e Soma das Linhas (rowSums(A))\nEssas funções retornam vetores com as somas das colunas e das linhas da matriz A, respectivamente.\n\nsoma_colunas_A &lt;- colSums(A)\nsoma_colunas_A\n\n[1]  9  0 11\n\n\n\nsoma_linhas_A &lt;- rowSums(A)\nsoma_linhas_A\n\n[1]  8 12  0\n\n\n\n4.2.3.3 3.2.3.3 Média das Colunas (colMeans()) e Média das Linhas (rowMeans())\nAs funções colMeans() e rowMeans() fornecem as médias das colunas e das linhas de uma matriz, respectivamente.\n\nA\n\n     [,1] [,2] [,3]\n[1,]    4   -3    7\n[2,]   10    1    1\n[3,]   -5    2    3\n\n\n\ncolMeans(A)\n\n[1] 3.000000 0.000000 3.666667\n\n\n\nrowMeans(B)\n\n[1] 1.333333 2.000000 3.333333\n\n\n\n4.2.3.4 3.2.3.4 Multiplicação por Escalar (k * A)\nA multiplicação por um escalar \\(k\\) envolve a multiplicação de todos os elementos da matriz A pelo valor de \\(k\\).\n\nk &lt;- 2\nA\n\n     [,1] [,2] [,3]\n[1,]    4   -3    7\n[2,]   10    1    1\n[3,]   -5    2    3\n\n\n\nmultiplicacao_escalar &lt;- k * A\nmultiplicacao_escalar\n\n     [,1] [,2] [,3]\n[1,]    8   -6   14\n[2,]   20    2    2\n[3,]  -10    4    6\n\n\n\n4.2.3.5 3.2.3.5 Produto Elemento a Elemento (A * B)\nO produto elemento a elemento envolve a multiplicação dos elementos correspondentes nas matrizes A e B. As dimensões das matrizes devem ser idênticas para que essa operação seja válida.\n\nA\n\n     [,1] [,2] [,3]\n[1,]    4   -3    7\n[2,]   10    1    1\n[3,]   -5    2    3\n\n\n\nB\n\n     [,1] [,2] [,3]\n[1,]    2   -1    3\n[2,]    1    4    1\n[3,]    5   -2    7\n\n\n\nproduto_elemento_a_elemento &lt;- A * B\nproduto_elemento_a_elemento\n\n     [,1] [,2] [,3]\n[1,]    8    3   21\n[2,]   10    4    1\n[3,]  -25   -4   21\n\n\n\n4.2.3.6 3.2.3.6 Produto Matricial (A %*% B)\nO produto matricial é uma operação fundamental na álgebra linear. É obtido multiplicando as linhas da matriz A pelas colunas da matriz B e somando os resultados. As dimensões das matrizes devem ser compatíveis para essa operação.\n\nproduto_matricial &lt;- A %*% B\nproduto_matricial\n\n     [,1] [,2] [,3]\n[1,]   40  -30   58\n[2,]   26   -8   38\n[3,]    7    7    8\n\n\n\n4.2.3.7 3.2.3.7 Transposta (t(A))\nA transposta de uma matriz A é obtida trocando suas linhas por colunas e vice-versa. Ela é denotada por \\(t(A)\\) e é usada em várias operações, como multiplicação matricial e decomposições.\n\nA\n\n     [,1] [,2] [,3]\n[1,]    4   -3    7\n[2,]   10    1    1\n[3,]   -5    2    3\n\n\n\ntransposta_A &lt;- t(A)\ntransposta_A\n\n     [,1] [,2] [,3]\n[1,]    4   10   -5\n[2,]   -3    1    2\n[3,]    7    1    3\n\n\n\n4.2.3.8 3.2.3.8 Determinante (det(A))\nO determinante de uma matriz A é um valor escalar, e é utilizado para resolver sistemas de equações lineares, calcular inversas de matrizes e determinar propriedades de transformações geométricas.\n\ndeterminante_A &lt;- det(A)\ndeterminante_A\n\n[1] 284\n\n\n\n4.2.3.9 3.2.3.9 Inversa (solve(A))\nA inversa de uma matriz A é uma matriz B tal que \\(A * B\\) é a matriz identidade. Nem todas as matrizes têm inversa, e a função solve() calcula a inversa da matriz, quando possível.\n\ninversa_A &lt;- solve(A)\ninversa_A\n\n             [,1]       [,2]        [,3]\n[1,]  0.003521127 0.08098592 -0.03521127\n[2,] -0.123239437 0.16549296  0.23239437\n[3,]  0.088028169 0.02464789  0.11971831\n\n\n\n4.2.3.10 3.2.3.10 Diagonal (diag(A))\nA função diag(A) retorna os elementos da diagonal principal da matriz A.\n\nA\n\n     [,1] [,2] [,3]\n[1,]    4   -3    7\n[2,]   10    1    1\n[3,]   -5    2    3\n\n\n\ndiagonal_A &lt;- diag(A)\ndiagonal_A\n\n[1] 4 1 3\n\n\n\n4.2.3.10.1 3.2.3.11 Autovalores e Autovetores (eigen(A))\nOs autovalores e autovetores de uma matriz A são fundamentais em álgebra linear e em várias aplicações. A função eigen() retorna uma lista contendo os autovalores e autovetores de A.\n\nautovalores_autovetores_A &lt;- eigen(A)\nautovalores_autovetores_A\n\neigen() decomposition\n$values\n[1] 1.851362+7.91586i 1.851362-7.91586i 4.297276+0.00000i\n\n$vectors\n                      [,1]                  [,2]         [,3]\n[1,] -0.0984470-0.5752367i -0.0984470+0.5752367i 0.2529012+0i\n[2,] -0.7184472+0.0000000i -0.7184472+0.0000000i 0.8853306+0i\n[3,]  0.3728112+0.0652405i  0.3728112-0.0652405i 0.3901676+0i\n\n\n\n4.2.3.11 3.2.3.12 Produto Matricial Transposto (crossprod(A, B)) e Produto Matricial de A e B Transposto (tcrossprod(A, B))\nEssas funções realizam o produto matricial de A e B, considerando suas transpostas.\nO produto cruzado é também conhecido como “produto matricial interno” e é utilizado para diversos ajustes de modelos, análise multivariada, etc. Dada uma matriz A e uma matriz B, o produto interno entre elas é denotado como \\(A^T * B\\), e é calculado pela função crossprod(A, B).\n\nproduto_transposto &lt;- crossprod(A, B)\nproduto_transposto\n\n     [,1] [,2] [,3]\n[1,]   -7   46  -13\n[2,]    5    3    6\n[3,]   30   -9   43\n\n\nO produto matricial externo também é conhecido como “produto matricial externo transposto” e é utilizada na mesmas ocasiões do primeiro. Dada uma matriz A e uma matriz B, o produto externo transposto entre elas é denotado como \\(A * B^T\\), e é calculado pela função tcrossprod(A, B).\n\nproduto_transposto_t &lt;- tcrossprod(A, B)\nproduto_transposto_t\n\n     [,1] [,2] [,3]\n[1,]   32   -1   75\n[2,]   22   15   55\n[3,]   -3    6   -8\n\n\n\n4.2.3.12 3.2.3.13 Nomes de Linhas e Colunas (rownames(A), colnames(A))\nAs funções rownames() e colnames() permitem atribuir nomes às linhas e colunas de uma matriz, facilitando a identificação de elementos em análises e visualizações.\n\nrownames(A) &lt;- c(\"Linha1\", \"Linha2\", \"Linha3\")\ncolnames(A) &lt;- c(\"Coluna1\", \"Coluna2\", \"Coluna3\")\n\n\n4.2.3.13 3.2.3.14 Matrizes Triangulares no R: Funções upper.tri() e lower.tri()\n\nMatrizes triangulares desempenham são úteis quando o objetivo é economizar espaço de armazenamento e realizar cálculos mais eficientes. No R, as funções upper.tri() e lower.tri() são usadas para identificar os elementos acima e abaixo da diagonal principal de uma matriz, respectivamente.\n\n4.2.3.13.1 3.2.3.14.1 Identificando Elementos Acima da Diagonal Principal (upper.tri())\nA função upper.tri() retorna uma matriz de elementos lógicos que indica quais elementos de uma matriz estão acima da diagonal principal. Os elementos TRUE indicam que o elemento correspondente está acima da diagonal, enquanto os elementos FALSE indicam que o elemento está na diagonal ou abaixo dela.\n\nA &lt;- matrix(1:9, nrow = 3)\nupper_elements &lt;- upper.tri(A)\nupper_elements\n\n      [,1]  [,2]  [,3]\n[1,] FALSE  TRUE  TRUE\n[2,] FALSE FALSE  TRUE\n[3,] FALSE FALSE FALSE\n\n\n\nA[upper.tri(A)]\n\n[1] 4 7 8\n\n\n\n4.2.3.13.2 3.2.3.14.2 Identificando Elementos Abaixo da Diagonal Principal (lower.tri())\nDa mesma forma, a função lower.tri() retorna uma matriz de elementos lógicos que indica quais elementos estão abaixo da diagonal principal.\n\nlower_elements &lt;- lower.tri(A, diag = T)\nlower_elements\n\n     [,1]  [,2]  [,3]\n[1,] TRUE FALSE FALSE\n[2,] TRUE  TRUE FALSE\n[3,] TRUE  TRUE  TRUE\n\n\n\nA[lower.tri(A)]\n\n[1] 2 3 6"
  },
  {
    "objectID": "03_objetcs.html#arrays",
    "href": "03_objetcs.html#arrays",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.3 3.3 Arrays",
    "text": "4.3 3.3 Arrays\nArrays são estruturas multidimensionais úteis para armazenar e manipular dados em várias dimensões, são usados em diversas áreas, como processamento de imagens, simulações numéricas, análise de dados multidimensionais e modelagem estatística. Eles são essenciais para lidar com dados que possuem mais de duas dimensões, onde as matrizes não são suficientes para representar a complexidade dos dados. Eles podem ser criados usando a função array(), onde você especifica os elementos do array e suas dimensões.\n\n4.3.1 3.3.1 Criando Arrays\nPodemos criar um array usando a função array() da seguinte maneira:\n\n# Criando um array 2x3x4\narr &lt;- array(1:24, dim = c(2, 3, 4))\narr\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]   13   15   17\n[2,]   14   16   18\n\n, , 4\n\n     [,1] [,2] [,3]\n[1,]   19   21   23\n[2,]   20   22   24\n\n\n\n4.3.2 3.3.2 Acessando Elementos\nOs elementos de um array são acessados usando índices que indicam a posição em cada dimensão. Por exemplo, para acessar o elemento na segunda linha, terceira coluna e quarta “profundidade” de um array arr, devemos fazer:\n\nelemento &lt;- arr[2, 3, 4]\nelemento\n\n[1] 24\n\n\nPara acessarmos todos os elementos da primeira camada podemos fazer o seguinte:\n\narr[, , 1]\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n4.3.3 3.3.3 Operações com Arrays\nAssim como com vetores e matrizes, você pode realizar várias operações com arrays:\n\nSoma e Subtração: Arrays podem ser somados e subtraídos elemento a elemento, desde que tenham as mesmas dimensões.\nMultiplicação por Escalar: Você pode multiplicar um array por um escalar, o que multiplicará cada elemento do array pelo escalar.\nProduto Elemento a Elemento: Dois arrays com as mesmas dimensões podem ser multiplicados elemento a elemento.\nOperações Estatísticas: Funções como sum(), mean(), max(), min() podem ser aplicadas aos elementos do array, opcionalmente especificando a dimensão ao longo da qual a operação deve ser realizada.\n\n\n# Criando dois arrays\narr1 &lt;- array(1:12, dim = c(3, 2, 2))\narr2 &lt;- array(13:24, dim = c(3, 2, 2))\n\n# Soma de arrays\nsoma &lt;- arr1 + arr2\n\n# Produto element-wise\nproduto &lt;- arr1 * arr2\n\n# Média ao longo da terceira dimensão\nmedia &lt;- mean(arr1, dim = 3)"
  },
  {
    "objectID": "03_objetcs.html#listas",
    "href": "03_objetcs.html#listas",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.4 3.4 Listas",
    "text": "4.4 3.4 Listas\nEm programação, muitas vezes nos deparamos com a necessidade de armazenar diferentes tipos de dados em uma única estrutura. As listas em R são uma solução flexível para essa situação. Ao contrário de vetores e matrizes , onde os elementos devem ser do mesmo tipo, as listas permitem que você combine elementos de tipos diferentes em uma única estrutura. Essa versatilidade torna as listas uma escolha valiosa para armazenar dados complexos e heterogêneos.\n\n4.4.1 3.4.1 Criando Listas\nA criação de uma lista em R é simples e flexível. Você pode usar a função list() para criar uma lista vazia e, em seguida, atribuir elementos a ela.\n\n# Criando uma lista com diferentes tipos de elementos\nminha_lista &lt;- list(\n  nome = \"Alice\",\n  idade = 15,\n  notas = c(90, 85, 95),\n  ativo = TRUE, \n  País = \"das Maravilhas\", \n  amigos = \"Cheshire\", \n  frase = \"How do I know I'm mad?\"\n)\nminha_lista\n\n$nome\n[1] \"Alice\"\n\n$idade\n[1] 15\n\n$notas\n[1] 90 85 95\n\n$ativo\n[1] TRUE\n\n$País\n[1] \"das Maravilhas\"\n\n$amigos\n[1] \"Cheshire\"\n\n$frase\n[1] \"How do I know I'm mad?\"\n\n\n\n4.4.2 3.4.2 Acessando Elementos da Lista\nVocê pode acessar os elementos de uma lista usando o operador de índice [[]] ou o operador $ (quando estamos em uma lista nomeada). O operador [[]] é usado quando você deseja acessar um elemento específico pelo seu nome.\n\n# Acessando elementos da lista\nnome &lt;- minha_lista$nome\nnome\n\n[1] \"Alice\"\n\n\n\nidade &lt;- minha_lista[[\"idade\"]]\nidade\n\n[1] 15\n\n\n\nnotas &lt;- minha_lista$notas\nnotas\n\n[1] 90 85 95\n\n\n\n4.4.3 3.4.3 Manipulando Listas\nAs listas oferecem muitas possibilidades de manipulação. Você pode adicionar, remover e modificar elementos, bem como alterar seus nomes.\n\n# Adicionando um novo elemento à lista\nminha_lista$cidade &lt;- \"São Paulo\"\nminha_lista$cidade\n\n[1] \"São Paulo\"\n\n\n\n# Modificando um elemento existente\nminha_lista$idade &lt;- 31\nminha_lista\n\n$nome\n[1] \"Alice\"\n\n$idade\n[1] 31\n\n$notas\n[1] 90 85 95\n\n$ativo\n[1] TRUE\n\n$País\n[1] \"das Maravilhas\"\n\n$amigos\n[1] \"Cheshire\"\n\n$frase\n[1] \"How do I know I'm mad?\"\n\n$cidade\n[1] \"São Paulo\"\n\n\n\n# Removendo um elemento da lista\nminha_lista$notas &lt;- NULL\nminha_lista\n\n$nome\n[1] \"Alice\"\n\n$idade\n[1] 31\n\n$ativo\n[1] TRUE\n\n$País\n[1] \"das Maravilhas\"\n\n$amigos\n[1] \"Cheshire\"\n\n$frase\n[1] \"How do I know I'm mad?\"\n\n$cidade\n[1] \"São Paulo\"\n\n\n\n4.4.4 3.4.4 Aninhamento de Listas\nUma característica poderosa das listas é a capacidade de aninhar outras listas dentro delas. Isso permite que você crie estruturas de dados hierárquicas e organizadas.\n\n# Aninhando listas\nendereco &lt;- list(\n  rua = \"Rua Principal\",\n  numero = 123,\n  cidade = \"São Paulo\"\n)\n\nminha_lista$endereco &lt;- endereco\nminha_lista\n\n$nome\n[1] \"Alice\"\n\n$idade\n[1] 31\n\n$ativo\n[1] TRUE\n\n$País\n[1] \"das Maravilhas\"\n\n$amigos\n[1] \"Cheshire\"\n\n$frase\n[1] \"How do I know I'm mad?\"\n\n$cidade\n[1] \"São Paulo\"\n\n$endereco\n$endereco$rua\n[1] \"Rua Principal\"\n\n$endereco$numero\n[1] 123\n\n$endereco$cidade\n[1] \"São Paulo\""
  },
  {
    "objectID": "03_objetcs.html#data-frames-em-r",
    "href": "03_objetcs.html#data-frames-em-r",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.5 3.5 Data Frames em R",
    "text": "4.5 3.5 Data Frames em R\nData Frames são estruturas de dados bidimensionais em R, semelhantes a tabelas, que podem armazenar diferentes tipos de dados em suas colunas. Eles são amplamente utilizados para análise e manipulação de dados.\n\n4.5.1 3.5.1 Criação de Data Frames\nPara criar um Data Frame em R, podemos utilizar a função data.frame(). Cada argumento da função representa uma coluna do Data Frame.\n\n# Exemplo de criação de Data Frame\nmeu_data_frame &lt;- data.frame(\n  nome = c(\"Alice\", \"Bob\", \"Carol\", \"Ana\", \"João\", \"Carlos\", \"Patrícia\", \"Leonardo\"),\n  idade = c(25, 30, 28, 20, 27, 50, 60, 45),\n  salario = c(5000, 6000, 5500, 8000, 2000, 3500, 10000, 3800 ), \n  meio_de_transporte = c('onibus', 'bicicleta', 'onibus', 'carro', 'carro', 'onibus', 'onibus', 'bicicleta')\n)\n\n## Nomes de colunas do nosso data.frame não possuem espaço, podem ser separadas por \".\" ou \"_\".\n\n\n4.5.2 3.5.2 Adcionando variáveis (colunas)\nPara adcionar novas colunas em um data.frame podemos simplesmente atribuir seus valores através do seguinte código:\n\nmeu_data_frame$genero &lt;- c(\"F\", \"M\", \"F\", \"F\", \"M\", \"M\", \"F\", \"M\")\n\n\n4.5.3 3.5.3 Acessando Colunas\nVocê pode acessar as colunas de um data.frame usando o operador $ ou colchetes [].\n\n# Acessar coluna usando o operador $\nmeu_data_frame$nome\n\n[1] \"Alice\"    \"Bob\"      \"Carol\"    \"Ana\"      \"João\"     \"Carlos\"   \"Patrícia\"\n[8] \"Leonardo\"\n\n\n\n# Acessar coluna usando colchetes []\nmeu_data_frame[, \"idade\"]\n\n[1] 25 30 28 20 27 50 60 45\n\n\n\n4.5.4 3.5.4 Subconjuntos de Data Frames\nPara criar subconjuntos de Data Frames, você pode usar a função subset() ou colchetes [] com condições lógicas.\n\nsubconjunto_df &lt;- meu_data_frame[meu_data_frame$idade &gt; 28, ]  # Seleciona pessoas com idade maior que 28\nsubconjunto_df\n\n      nome idade salario meio_de_transporte genero\n2      Bob    30    6000          bicicleta      M\n6   Carlos    50    3500             onibus      M\n7 Patrícia    60   10000             onibus      F\n8 Leonardo    45    3800          bicicleta      M\n\n\n\n# Usando a função subset()\nsubconjunto_df &lt;- subset(meu_data_frame, idade &gt; 28)\nsubconjunto_df\n\n      nome idade salario meio_de_transporte genero\n2      Bob    30    6000          bicicleta      M\n6   Carlos    50    3500             onibus      M\n7 Patrícia    60   10000             onibus      F\n8 Leonardo    45    3800          bicicleta      M\n\n\n\nsubconjunto_combinado &lt;- meu_data_frame[meu_data_frame$idade &gt; 25 & meu_data_frame$idade &lt; 30, ]\nsubconjunto_combinado\n\n   nome idade salario meio_de_transporte genero\n3 Carol    28    5500             onibus      F\n5  João    27    2000              carro      M\n\n\nPodemos acessar a classe individualmente de uma coluna do nosso data.frame utilizando class().\n\nclass(meu_data_frame$nome)\n\n[1] \"character\"\n\n\n\nclass(meu_data_frame$idade)\n\n[1] \"numeric\"\n\n\nPodemos acessar a estrutura dos nossos dados utilizando a função str().\n\nstr(meu_data_frame)\n\n'data.frame':   8 obs. of  5 variables:\n $ nome              : chr  \"Alice\" \"Bob\" \"Carol\" \"Ana\" ...\n $ idade             : num  25 30 28 20 27 50 60 45\n $ salario           : num  5000 6000 5500 8000 2000 3500 10000 3800\n $ meio_de_transporte: chr  \"onibus\" \"bicicleta\" \"onibus\" \"carro\" ...\n $ genero            : chr  \"F\" \"M\" \"F\" \"F\" ...\n\n\nAs dimensões de um data.frame podem ser dadas por dim().\n\ndim(meu_data_frame)\n\n[1] 8 5\n\n\nPara sabermos o número de observações em um data.frame podemos utilizar a função nrow().\n\nnrow(meu_data_frame)\n\n[1] 8\n\n\nPara obtermos o número de colunas em um data.frame podemos utilizar a função ncol().\n\nncol(meu_data_frame)\n\n[1] 5\n\n\n\n4.5.5 3.5.5 Função summary()\n\nA função summary() é usada para obter um resumo estatístico das variáveis em um Data Frame. Ela fornece estatísticas como média, mediana, mínimo, máximo e quartis para cada coluna numérica.\n\nsummary(meu_data_frame)\n\n     nome               idade          salario      meio_de_transporte\n Length:8           Min.   :20.00   Min.   : 2000   Length:8          \n Class :character   1st Qu.:26.50   1st Qu.: 3725   Class :character  \n Mode  :character   Median :29.00   Median : 5250   Mode  :character  \n                    Mean   :35.62   Mean   : 5475                     \n                    3rd Qu.:46.25   3rd Qu.: 6500                     \n                    Max.   :60.00   Max.   :10000                     \n    genero         \n Length:8          \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n4.5.6 3.5.6 Função by()\n\nA função by() é usada para aplicar uma função a subconjuntos de um Data Frame, com base em uma ou mais variáveis. Ela é útil para realizar operações em grupos de dados.\n\n# Exemplo de uso da função by()\nresultado &lt;- by(meu_data_frame$salario, meu_data_frame$idade, mean)\nresultado\n\nmeu_data_frame$idade: 20\n[1] 8000\n------------------------------------------------------------ \nmeu_data_frame$idade: 25\n[1] 5000\n------------------------------------------------------------ \nmeu_data_frame$idade: 27\n[1] 2000\n------------------------------------------------------------ \nmeu_data_frame$idade: 28\n[1] 5500\n------------------------------------------------------------ \nmeu_data_frame$idade: 30\n[1] 6000\n------------------------------------------------------------ \nmeu_data_frame$idade: 45\n[1] 3800\n------------------------------------------------------------ \nmeu_data_frame$idade: 50\n[1] 3500\n------------------------------------------------------------ \nmeu_data_frame$idade: 60\n[1] 10000\n\n\n\nresultado &lt;- by(meu_data_frame$salario, meu_data_frame$genero, median)\nresultado\n\nmeu_data_frame$genero: F\n[1] 6750\n------------------------------------------------------------ \nmeu_data_frame$genero: M\n[1] 3650\n\n\n\n4.5.7 3.5.7 Funções para Explorar Data Frames\n\n\n**head()**: Mostra as primeiras linhas do Data Frame.\n\n**tail()**: Mostra as últimas linhas do Data Frame.\n\n**summary()**: Fornece um resumo estatístico das colunas numéricas.\n\n**str()**: Mostra a estrutura do Data Frame, incluindo tipos de dados.\n\n4.5.8 3.5.8 Manipulação de Data Frames\n\nAdição de colunas: meu_data_frame$nova_coluna &lt;- valores\n\nRemoção de colunas: meu_data_frame$coluna_a_ser_removida &lt;- NULL\n\nFiltragem de linhas: subconjunto &lt;- meu_data_frame[meu_data_frame$idade &gt; 25, ]\n\nOrdenação: ordenado &lt;- meu_data_frame[order(meu_data_frame$idade), ]"
  },
  {
    "objectID": "03_objetcs.html#fatores",
    "href": "03_objetcs.html#fatores",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.6 3.6 Fatores",
    "text": "4.6 3.6 Fatores\nFatores são uma estrutura de dados especial em R usada para representar variáveis categóricas, ou seja, variáveis que assumem um conjunto limitado e definido de valores. Os fatores são especialmente úteis para armazenar informações categóricas de maneira eficiente e para realizar análises estatísticas em dados categóricos.\n\n4.6.1 3.6.1 Criação de Fatores\nVocê pode criar um fator em R usando a função factor(). É necessário fornecer um vetor de valores categóricos e, opcionalmente, os níveis que esses valores podem assumir.\n\n# Exemplo de criação de fator\ngenero &lt;- factor(c(\"Masculino\", \"Feminino\", \"Masculino\", \"Feminino\"))\n\n\n4.6.2 3.6.2 Transformação em fatores\nMuitas vezes podemos estar interessados em transformar uma variável em um fator, para isso, utilizamos a função as.factor.\n\nmeu_data_frame$genero\n\n[1] \"F\" \"M\" \"F\" \"F\" \"M\" \"M\" \"F\" \"M\"\n\n\n\nmeu_data_frame$genero = as.factor(meu_data_frame$genero)\n\nmeu_data_frame$genero\n\n[1] F M F F M M F M\nLevels: F M\n\n\n\n4.6.3 3.6.3 Níveis de Fatores\nOs níveis de um fator são os valores únicos que a variável categórica pode assumir. Se você não fornecer os níveis explicitamente, o R inferirá os níveis a partir dos valores presentes. Além disso, os níveis serão ordenados em ordem alfanumérica, caso omitidos. É importante passarmos os níveis (levels) quando lidamos com variáveis ordinais.\n\n# Definindo fator com níveis específicos\ncores &lt;- factor(c(\"Vermelho\", \"Verde\", \"Azul\"), levels = c(\"Vermelho\", \"Verde\", \"Azul\", \"Amarelo\"))\ncores\n\n[1] Vermelho Verde    Azul    \nLevels: Vermelho Verde Azul Amarelo\n\n\n\n4.6.4 3.6.4 Acessando Níveis e Valores de Fatores\nVocê pode acessar os níveis de um fator usando a função levels() e os valores do fator como um vetor usando o fator diretamente. Para sabermos a quantidade de níveis de um fator podemos utilizar a função nlevels()\n\n# Acessar níveis de um fator\nniveis_cores &lt;- levels(cores)\nniveis_cores\n\n[1] \"Vermelho\" \"Verde\"    \"Azul\"     \"Amarelo\" \n\n\n\n# Acessar o número de níveis de um fator\nn_niveis_cores &lt;- nlevels(cores)\nn_niveis_cores\n\n[1] 4\n\n\n\n# Acessar valores do fator\nvalores_cores &lt;- cores\nvalores_cores\n\n[1] Vermelho Verde    Azul    \nLevels: Vermelho Verde Azul Amarelo"
  },
  {
    "objectID": "03_objetcs.html#tabelas-de-dupla-entrada",
    "href": "03_objetcs.html#tabelas-de-dupla-entrada",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.7 3.7 Tabelas de Dupla Entrada",
    "text": "4.7 3.7 Tabelas de Dupla Entrada\nTabelas de dupla entrada, também conhecidas como tabelas de contingência, util para analisar a relação entre duas variáveis categóricas. Elas mostram a frequência ou contagem de ocorrências conjuntas dessas variáveis e são frequentemente usadas para entender associações e padrões nos dados.\n\n4.7.1 3.7.1 Criando Tabelas de Dupla Entrada\nPara criar uma tabela de dupla entrada em R, você pode usar a função table().\n\n# Exemplo de criação de tabela de dupla entrada\nsexo &lt;- c(\"Masculino\", \"Feminino\", \"Masculino\", \"Masculino\", \"Feminino\")\ncidade &lt;- c(\"A\", \"B\", \"A\", \"B\", \"A\")\ntabela_contingencia &lt;- table(sexo, cidade)\ntabela_contingencia\n\n           cidade\nsexo        A B\n  Feminino  1 1\n  Masculino 2 1\n\n\n\ntabela_contingencia2 &lt;- table(meu_data_frame$meio_de_transporte, meu_data_frame$genero)\ntabela_contingencia2\n\n           \n            F M\n  bicicleta 0 2\n  carro     1 1\n  onibus    3 1\n\n\n\nVisualizando Tabelas de Dupla Entrada:\n\nVocê pode visualizar a tabela de dupla entrada diretamente ou usar a função ftable() para obter uma exibição mais formatada.\n\n# Visualizar tabela de dupla entrada\nprint(tabela_contingencia)\n\n           cidade\nsexo        A B\n  Feminino  1 1\n  Masculino 2 1\n\n\n\n# Exibição formatada da tabela\ntabela_formatada &lt;- ftable(tabela_contingencia)\nprint(tabela_formatada)\n\n          cidade A B\nsexo                \nFeminino         1 1\nMasculino        2 1\n\n\n\n4.7.2 3.7.2 Analisando Tabelas de Dupla Entrada\nVocê pode usar várias funções para analisar e obter informações úteis a partir de tabelas de dupla entrada.\n\n\nMarginais: Obtém as marginais (somas das linhas e colunas) da tabela.\n\n\nmarginais_linhas &lt;- margin.table(tabela_contingencia, 1)  # Somas das linhas\nmarginais_colunas &lt;- margin.table(tabela_contingencia, 2)  # Somas das colunas\n\n\n\nTeste Qui-Quadrado: chisq.test() realiza o teste qui-quadrado para avaliar a independência das variáveis.\n\n\nqui_quadrado &lt;- chisq.test(tabela_contingencia)\n\nWarning in chisq.test(tabela_contingencia): Aproximação do qui-quadrado pode\nestar incorreta\n\n\nWarning in chisq.test(tabela_contingencia): Chi-squared approximation may be incorrect\n\nprint(qui_quadrado)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  tabela_contingencia\nX-squared = 0, df = 1, p-value = 1\n\n\n\n\nProporções Relativas: prop.table() calcula proporções relativas dentro das categorias.\n\n\nproporcoes_relativas_linha &lt;- prop.table(tabela_contingencia, margin = 1)  # Proporções por linha\nproporcoes_relativas_linha\n\n           cidade\nsexo                A         B\n  Feminino  0.5000000 0.5000000\n  Masculino 0.6666667 0.3333333\n\n\n\nproporcoes_relativas_coluna &lt;- prop.table(tabela_contingencia, margin = 2)  # Proporções por linha\nproporcoes_relativas_coluna\n\n           cidade\nsexo                A         B\n  Feminino  0.3333333 0.5000000\n  Masculino 0.6666667 0.5000000\n\n\n\n4.7.3 3.7.3 Lendo dados disponíveis no R\nPara vermos os banco de dados disponíveis no R podemos utilizar a função data(), e para ler um deles basta chamar seu nome como argumento da função, por exemplo: data(USArrests)."
  },
  {
    "objectID": "03_objetcs.html#exercício",
    "href": "03_objetcs.html#exercício",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.8 3.8 Exercício",
    "text": "4.8 3.8 Exercício\nPara os dados de USArrests faça o que se pede.\n\nImprima na tela as 9 primeiras observações.\nImprima as últimas 3 observações.\nQuantas observações temos?\nQuantas variáveis temos?\nApresente o sumário dos dados.\nApresente a estrutura dos dados.\nIndique os estados cujo número de Murder está entre 10 e 15.\nQual a média de Assault para os estados cuja variável Rape está no IQR (\\(Q3 - Q1\\))?"
  },
  {
    "objectID": "03_objetcs.html#estruturas-alternativas-ao-data-frame",
    "href": "03_objetcs.html#estruturas-alternativas-ao-data-frame",
    "title": "\n4  Objetos em R\n",
    "section": "\n4.9 3.9 Estruturas alternativas ao Data Frame",
    "text": "4.9 3.9 Estruturas alternativas ao Data Frame\nEmbora data.frames sejam estruturas muito poderosas para análise de dados, outras estruturas são mais modernas e permitem maior performance para análise de dados em termos de velocidade de processamento e até mesmo na facilidade da sintaxe. Duas alternativas são: data.table e tibble. Veremos as duas em detalhes a seguir.\n\n4.9.1 3.9.1 data.table: Manipulação Eficiente de Grandes Conjuntos de Dados\nO pacote data.table é uma biblioteca poderosa no R, projetada especificamente para manipulação eficiente de grandes conjuntos de dados. Ele oferece um conjunto de recursos que melhoram consideravelmente o desempenho e a flexibilidade das operações em relação às estruturas de dados convencionais.\n\n4.9.1.1 3.9.1.1 Principais Características do data.table\n\n\nSintaxe Otimizada: Uma das características principais do “data.table” é sua sintaxe otimizada. A operação básica do “data.table” usa a notação [i, j, by], onde i filtra linhas, j seleciona colunas e by agrupa resultados. Isso permite que você realize várias operações complexas em uma única linha de código.\nEficiência em Memória: O “data.table” realiza muitas operações diretamente na memória, evitando a cópia excessiva de dados, minimizando o consumo de memória e melhorando o desempenho.\nChaves e Indexação: As chaves são um conceito fundamental no “data.table”. Elas permitem que você especifique quais colunas serão usadas para ordenar e indexar o conjunto de dados. Isso acelera significativamente operações de junção e seleção.\nCompatibilidade com Sintaxe de Base R: Embora tenha sua própria sintaxe otimizada, o “data.table” também é compatível com a sintaxe de base R, o que facilita a transição para os usuários familiarizados com o R padrão.\n\n4.9.1.2 3.9.1.2 Criando e Manipulando Data.Tables\nPara criar um “data.table”, você pode usar a função data.table(). Vamos explorar exemplos mais detalhados.\n\nlibrary(data.table)\n\n# Criar um data.table\nmeu_data_table &lt;- data.table(\n  nome = c(\"Alice\", \"Bob\", \"Carol\", \"Ana\", \"João\", \"Carlos\", \"Patrícia\", \"Leonardo\"),\n  idade = c(25, 30, 28, 20, 27, 50, 60, 45),\n  salario = c(5000, 6000, 5500, 8000, 2000, 3500, 10000, 3800 ), \n  meio_de_transporte = c('onibus', 'bicicleta', 'onibus', 'carro', 'carro', 'onibus', 'onibus', 'bicicleta'))\nmeu_data_table\n\n       nome idade salario meio_de_transporte\n1:    Alice    25    5000             onibus\n2:      Bob    30    6000          bicicleta\n3:    Carol    28    5500             onibus\n4:      Ana    20    8000              carro\n5:     João    27    2000              carro\n6:   Carlos    50    3500             onibus\n7: Patrícia    60   10000             onibus\n8: Leonardo    45    3800          bicicleta\n\n\n\nclass(meu_data_table)\n\n[1] \"data.table\" \"data.frame\"\n\n\nPara importarmos um data.table podemos utilizar a função fread(), epara salvarmos, podemos utilizar a função fwrite().\n\n4.9.1.3 3.9.1.3 Sintaxe e Operações\nA sintaxe básica do “data.table” envolve o uso das notações [i, j, by].\n\n# Selecionar colunas e filtrar linhas\nresultado &lt;- meu_data_table[idade &gt; 25, .(nome, salario)]\nresultado\n\n       nome salario\n1:      Bob    6000\n2:    Carol    5500\n3:     João    2000\n4:   Carlos    3500\n5: Patrícia   10000\n6: Leonardo    3800\n\n\n\n# Agregar dados \nagregado &lt;- meu_data_table[, .(media_salario = mean(salario)),]\nagregado\n\n   media_salario\n1:          5475\n\n\n\n# Agregar dados por idade\nagregado_idade &lt;- meu_data_table[, .(media_salario = mean(salario)), by = idade]\nagregado_idade\n\n   idade media_salario\n1:    25          5000\n2:    30          6000\n3:    28          5500\n4:    20          8000\n5:    27          2000\n6:    50          3500\n7:    60         10000\n8:    45          3800\n\n\n\n# Agregar dados por meio_de_transporte\nagregado_mt &lt;- meu_data_table[, .(media_salario = mean(salario)), by = meio_de_transporte]\nagregado_mt\n\n   meio_de_transporte media_salario\n1:             onibus          6000\n2:          bicicleta          4900\n3:              carro          5000\n\n\n\n4.9.2 3.9.2 Tibble: Uma Abordagem Moderna para Manipulação de Dados\nNo ambiente estatístico e analítico do R, a manipulação e análise de dados são atividades cruciais. O pacote “tibble” oferece uma abordagem moderna e conveniente para trabalhar com conjuntos de dados, aprimorando muitos dos aspectos do tradicional “data.frame”. O tibble faz parte do tidyverse, e foi projetado para atender às necessidades de análise de dados eficiente, mantendo a coerência dos tipos de dados e melhorando a experiência geral do usuário.\n\n4.9.2.1 3.9.2.1 Principais Características do Tibble\n\n\nSintaxe Intuitiva para Criação: A criação de um “tibble” é similar ao data.frame e data.table, oferecendo uma sintaxe intuitiva e direta. Você pode criar um “tibble” usando a função tibble() e atribuir colunas com nomes claros. Em Tibble você pode utilizar espaços para nomear variáveis.\n\n\nrequire(tibble)\n\nCarregando pacotes exigidos: tibble\n\n\n\nrequire(magrittr)\n\nCarregando pacotes exigidos: magrittr\n\n\n\nrequire(dplyr)\n\nCarregando pacotes exigidos: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:data.table':\n\n    between, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nmeu_tibble &lt;- tibble(\n  nome = c(\"Alice\", \"Bob\", \"Carol\", \"Ana\", \"João\", \"Carlos\", \"Patrícia\", \"Leonardo\"),\n  idade = c(25, 30, 28, 20, 27, 50, 60, 45),\n  salario = c(5000, 6000, 5500, 8000, 2000, 3500, 10000, 3800 ), \n  meio_de_transporte = c('onibus', 'bicicleta', 'onibus', 'carro', 'carro', 'onibus', 'onibus', 'bicicleta'))\nmeu_tibble\n\n# A tibble: 8 × 4\n  nome     idade salario meio_de_transporte\n  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;             \n1 Alice       25    5000 onibus            \n2 Bob         30    6000 bicicleta         \n3 Carol       28    5500 onibus            \n4 Ana         20    8000 carro             \n5 João        27    2000 carro             \n6 Carlos      50    3500 onibus            \n7 Patrícia    60   10000 onibus            \n8 Leonardo    45    3800 bicicleta         \n\n\n\nglimpse(meu_tibble)\n\nRows: 8\nColumns: 4\n$ nome               &lt;chr&gt; \"Alice\", \"Bob\", \"Carol\", \"Ana\", \"João\", \"Carlos\", \"…\n$ idade              &lt;dbl&gt; 25, 30, 28, 20, 27, 50, 60, 45\n$ salario            &lt;dbl&gt; 5000, 6000, 5500, 8000, 2000, 3500, 10000, 3800\n$ meio_de_transporte &lt;chr&gt; \"onibus\", \"bicicleta\", \"onibus\", \"carro\", \"carro\", …\n\n\n\n\nManipulação de Colunas: A adição, renomeação e remoção de colunas são tarefas simples com o “tibble”. Você pode usar o operador $ para acessar as colunas e o operador %&gt;% para encadear operações.\n\n\nmeu_tibble$nova_coluna &lt;- c(1, 2, 3, 4, 5, 6, 7, 8)\nmeu_tibble\n\n# A tibble: 8 × 5\n  nome     idade salario meio_de_transporte nova_coluna\n  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;\n1 Alice       25    5000 onibus                       1\n2 Bob         30    6000 bicicleta                    2\n3 Carol       28    5500 onibus                       3\n4 Ana         20    8000 carro                        4\n5 João        27    2000 carro                        5\n6 Carlos      50    3500 onibus                       6\n7 Patrícia    60   10000 onibus                       7\n8 Leonardo    45    3800 bicicleta                    8\n\n\n\nmeu_tibble &lt;- mutate(meu_tibble, `minha coluna` = 1:8)\n\nmeu_tibble &lt;-  rename(meu_tibble, idade_anos = idade)\nmeu_tibble\n\n# A tibble: 8 × 6\n  nome     idade_anos salario meio_de_transporte nova_coluna `minha coluna`\n  &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;          &lt;int&gt;\n1 Alice            25    5000 onibus                       1              1\n2 Bob              30    6000 bicicleta                    2              2\n3 Carol            28    5500 onibus                       3              3\n4 Ana              20    8000 carro                        4              4\n5 João             27    2000 carro                        5              5\n6 Carlos           50    3500 onibus                       6              6\n7 Patrícia         60   10000 onibus                       7              7\n8 Leonardo         45    3800 bicicleta                    8              8\n\n\n\nmeu_tibble_sem_salario &lt;- select(meu_tibble, -salario)\nmeu_tibble_sem_salario\n\n# A tibble: 8 × 5\n  nome     idade_anos meio_de_transporte nova_coluna `minha coluna`\n  &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;          &lt;int&gt;\n1 Alice            25 onibus                       1              1\n2 Bob              30 bicicleta                    2              2\n3 Carol            28 onibus                       3              3\n4 Ana              20 carro                        4              4\n5 João             27 carro                        5              5\n6 Carlos           50 onibus                       6              6\n7 Patrícia         60 onibus                       7              7\n8 Leonardo         45 bicicleta                    8              8\n\n\n\n4.9.2.2 3.9.2.2 Operações e Uso do Tibble\nO “tibble” se integra perfeitamente com as operações do tidyverse, tornando a manipulação de dados mais eficaz e legível. Podemos usar operações como filtragem, ordenação e agregação de forma simples e concisa.\n\n# Filtrar e ordenar\nresultado &lt;- filter(meu_tibble, idade_anos &gt; 25) \narrange(resultado, desc(salario))\n\n# A tibble: 6 × 6\n  nome     idade_anos salario meio_de_transporte nova_coluna `minha coluna`\n  &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;          &lt;int&gt;\n1 Patrícia         60   10000 onibus                       7              7\n2 Bob              30    6000 bicicleta                    2              2\n3 Carol            28    5500 onibus                       3              3\n4 Leonardo         45    3800 bicicleta                    8              8\n5 Carlos           50    3500 onibus                       6              6\n6 João             27    2000 carro                        5              5\n\n\n\n# Agregar por idade e calcular média de salários\nagregado_por_idade &lt;-  group_by(meu_tibble, idade_anos) \n\nsummarize(agregado_por_idade, media_salario = mean(salario))\n\n# A tibble: 8 × 2\n  idade_anos media_salario\n       &lt;dbl&gt;         &lt;dbl&gt;\n1         20          8000\n2         25          5000\n3         27          2000\n4         28          5500\n5         30          6000\n6         45          3800\n7         50          3500\n8         60         10000"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "",
    "text": "1 Informações Úteis"
  },
  {
    "objectID": "index.html#horário-e-local",
    "href": "index.html#horário-e-local",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.1 Horário e Local",
    "text": "1.1 Horário e Local\n\nSegundas-feiras das 20h45 às 22h30\nQuintas-feiras das 19h00 às 20h30\n\nSala: DINF - Laboratórios 1/2"
  },
  {
    "objectID": "index.html#conteúdo-programático",
    "href": "index.html#conteúdo-programático",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.2 Conteúdo Programático",
    "text": "1.2 Conteúdo Programático"
  },
  {
    "objectID": "index.html#capítulo-1---documentação-organização-de-códigos-e-sistemas-de-versionamento",
    "href": "index.html#capítulo-1---documentação-organização-de-códigos-e-sistemas-de-versionamento",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.3 Capítulo 1 - Documentação, Organização de códigos e Sistemas de versionamento",
    "text": "1.3 Capítulo 1 - Documentação, Organização de códigos e Sistemas de versionamento\n\nUso do Markdown para criar documentação clara e formatada.\nElaboração de arquivos README para guiar os usuários sobre a utilização do código.\nIntrodução ao GitHub para versionamento de projetos."
  },
  {
    "objectID": "index.html#capítulo-2--conceitos-básicos-do-ambiente-r-e-importação-e-exportação-de-dados-e-objetos",
    "href": "index.html#capítulo-2--conceitos-básicos-do-ambiente-r-e-importação-e-exportação-de-dados-e-objetos",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.4 Capítulo 2- Conceitos Básicos do Ambiente R e Importação e Exportação de Dados e Objetos",
    "text": "1.4 Capítulo 2- Conceitos Básicos do Ambiente R e Importação e Exportação de Dados e Objetos\n\nConceitos Básicos de R\n\nApresentação do ambiente de programação R.\nExploração do CRAN e repositórios de pacotes.\nInstalação e configuração do R e de softwares relacionados.\nUtilização de mecanismos de ajuda e documentação oficial.\nManipulação de expressões e diferenciação de letras maiúsculas e minúsculas.\nCompreensão de palavras reservadas e execução, recuperação e correção de comandos.\nUso de operadores aritméticos e relacionais.\nOrdens de execução e comandos de atribuição.\nFamiliarização com funções básicas do R.\n\nImportação e Exportação de Dados e Objetos\n\nInformações sobre diretórios e arquivos em R.\nFunções para importação e exportação de dados e objetos.\nExploração de conjuntos de dados integrados e edição dos mesmos."
  },
  {
    "objectID": "index.html#capítulo-3---objetos-em-r",
    "href": "index.html#capítulo-3---objetos-em-r",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.5 Capítulo 3 - Objetos em R",
    "text": "1.5 Capítulo 3 - Objetos em R\n\nVetores\n\nCriação de vetores e manipulação de suas propriedades.\nRealização de operações aritméticas vetoriais.\nAplicação da regra da reciclagem para operações entre vetores de tamanhos diferentes.\nExploração de vetores lógicos e tratamento de informações faltantes.\nTrabalho com vetores de caracteres e índices.\nUso de vetores mistos.\n\nMatrizes e Arrays\n\nCriação e manipulação de matrizes em R.\nUtilização de funções para operações com matrizes.\nRealização de operações matriciais, como multiplicação e transposição.\nResolução de equações lineares com matrizes.\nDecomposição espectral, em valores singulares e QR de matrizes.\nCriação e operações com arrays.\n\nListas e Data Frames\n\nCriação, alimentação e modificação de listas.\nConcatenação e aninhamento de listas.\nIntrodução à criação de Data Frames.\nUtilização de funções para manipulação de Data Frames."
  },
  {
    "objectID": "index.html#capítulo-4---transformação-de-dados",
    "href": "index.html#capítulo-4---transformação-de-dados",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.6 Capítulo 4 - Transformação de dados",
    "text": "1.6 Capítulo 4 - Transformação de dados\n\nOperadores lógicos\nCriação de variáveis\nTipos de join\nSeleção de colunas\nFiltro de observações\nOrdenação de observações\nTipos de formato de dados\n\nFormatos Wide e Long e conversão de formatos\n\nSumarização de dados"
  },
  {
    "objectID": "index.html#capítulo-5--funções-e-expressões",
    "href": "index.html#capítulo-5--funções-e-expressões",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.7 Capítulo 5- Funções e Expressões",
    "text": "1.7 Capítulo 5- Funções e Expressões\n\nCriação e definição de funções em R.\nDefinição de operadores binários personalizados.\nUso de argumentos e atribuição de padrões em funções.\nTrabalho com funções aninhadas e recursivas."
  },
  {
    "objectID": "index.html#capítulo-6---loopings-e-execução-condicional",
    "href": "index.html#capítulo-6---loopings-e-execução-condicional",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.8 Capítulo 6 - Loopings e Execução Condicional",
    "text": "1.8 Capítulo 6 - Loopings e Execução Condicional\n\nUtilização de expressões agrupadas.\nDeclarações de controle em R.\nImplementação de estruturas condicionais e laços de repetição.\nExploração de loopings implícitos."
  },
  {
    "objectID": "index.html#capítulo-7---procedimentos-gráficos",
    "href": "index.html#capítulo-7---procedimentos-gráficos",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.9 Capítulo 7 - Procedimentos Gráficos",
    "text": "1.9 Capítulo 7 - Procedimentos Gráficos\n\nCriação e personalização de gráficos em R.\nUtilização de argumentos e parâmetros gráficos.\nApresentação de dados univariados e multivariados através de gráficos.\nInteração com interfaces gráficas e configurações gráficas temporárias e permanentes.\nExploração de elementos gráficos, eixos, escalas e margens.\nTrabalho em ambiente com vários gráficos e criação de gráficos dinâmicos.\nExportação de gráficos em diversos formatos."
  },
  {
    "objectID": "index.html#capítulo-8---comunicação",
    "href": "index.html#capítulo-8---comunicação",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.10 Capítulo 8 - Comunicação",
    "text": "1.10 Capítulo 8 - Comunicação\n\nIntrodução aos relatórios dinâmicos com R Markdown e Quarto.\nIntrodução à apresentações de slides utilizando Quato e RevealJS.\nVisão geral de aplicações web com R Shiny."
  },
  {
    "objectID": "index.html#procedimentos-avaliativos",
    "href": "index.html#procedimentos-avaliativos",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.11 Procedimentos Avaliativos",
    "text": "1.11 Procedimentos Avaliativos\n\n1.11.1 Prova 01\n\nData: 21/09, Quinta-feira, às 19:00.\nData: 28/09, Quinta-feira, às 19:00.\nConteúdo: Capítulos 1 a 4.\nSegunda chamada deverá ser solicitada através do email dest@ufpr.br até o dia 05/10/2023 munido de comprovação, de acordo com o Artigo 106, Seção V da Resolução 37/97.\n\n\n\n1.11.2 Prova 02\n\nData: 16/11, Quinta-feira, às 19:00.\nConteúdo: Capítulos 5 a 8.\nSegunda chamada deverá ser solicitada através do email dest@ufpr.br até o dia 23/11/2023 munido de comprovação, de acordo com o Artigo 106, Seção V da Resolução 37/97."
  },
  {
    "objectID": "index.html#capítulo-9---trabalho-final",
    "href": "index.html#capítulo-9---trabalho-final",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.12 Capítulo 9 - Trabalho Final",
    "text": "1.12 Capítulo 9 - Trabalho Final\n\nData: 19/11, Domingo até 23:59.\nO trabalho será realizado de forma individual, sobre um tópico a ser sorteado após a realização da primeira prova.\nO trabalho deverá ser entregue através de um link para repositório no GitHub, deverá incluir um README e um relatório dinâmico com as análises.\n\n\n1.12.1 Prova Final\n\nData: 07/12, Quinta-feira, no período 19:00 - 20:30.\nConteúdo: Capítulos 1 a 8.\nSegunda chamada deverá ser solicitada através do email dest@ufpr.br até o dia 13/12/2023 munido de comprovação, de acordo com o Artigo 106, Seção V da Resolução 37/97."
  },
  {
    "objectID": "index.html#bibliografia-básica",
    "href": "index.html#bibliografia-básica",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.13 Bibliografia Básica",
    "text": "1.13 Bibliografia Básica\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. R for data science. ” O’Reilly Media, Inc.”, 2023 Versão Online\nWickham, Hadley. Advanced r. CRC press, 2019. Versão Online\nDavies, T. M. The book of R: A first course in programming and statistics. No Starch Press, 2016."
  },
  {
    "objectID": "index.html#cheat-sheets",
    "href": "index.html#cheat-sheets",
    "title": "CE302 - Elementos de Programação para Estatística",
    "section": "1.14 Cheat-Sheets",
    "text": "1.14 Cheat-Sheets\n\nMarkdown\nGit / GitHub\nGit & RStudio"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#pipes",
    "href": "04_transfomacao-de-dados.html#pipes",
    "title": "4  4 Transformação de dados",
    "section": "4.1 4.1 Pipes",
    "text": "4.1 4.1 Pipes\n\nUma maneira de fazermos os códigos em R mais legíveis é através da utilização dos operadores pipe. Os pipes fazem com a sequência das análises se torne mais aparente, o que torna o código muito menos complexo e mais fácil de ser alterado.\nTomemos como exemplo a seguinte análise: Seja x um vetor com 9 elementos, queremos obter um vetor ordenado do cosseno desses valores. Para fazer isso em R podemos aninhar diversas funções.\n\n\n[1] -4 -3 -2 -1  0  1  2  3  4\n\n\n\n\n[1]  1.0000000  0.5403023  0.5403023 -0.4161468 -0.4161468 -0.6536436 -0.6536436\n[8] -0.9899925 -0.9899925\n\n\nO que torna o código pouco legível e difícil de ser interpretado.\nPodemos identar o código para faciliar a leitura:\n\n\n[1]  1.0000000  0.5403023  0.5403023 -0.4161468 -0.4161468 -0.6536436 -0.6536436\n[8] -0.9899925 -0.9899925\n\n\nContudo, ainda assim, o código não é de fácil compreensão, principalmente porque devemos ler o código de dentro para fora. Os pipes surgem como uma alternativa para solucionar esse problema, tornando os códigos mais legíveis e debugáveis. Os pipes, representados pelo operador %&gt;%, são uma característica poderosa e conveniente introduzida pelo pacote magrittr e amplamente adotada em R para simplificar a manipulação de dados. Os pipes permitem encadear sequências de operações em uma maneira legível e intuitiva, tornando o código mais conciso e fácil de entender.\nFuncionamento dos Pipes: O operador %&gt;% permite que você passe o resultado de uma expressão como o primeiro argumento de outra expressão. Isso é particularmente útil ao realizar uma série de transformações em um objeto sem a necessidade de criar variáveis intermediárias. O mesmo código que vimos anteriormente, com a utilização de pipe ficaria:\n\n\nCarregando pacotes exigidos: magrittr\n\n\n\n\n[1]  1.0000000  0.5403023  0.5403023 -0.4161468 -0.4161468 -0.6536436 -0.6536436\n[8] -0.9899925 -0.9899925\n\n\n\n4.1.1 4.1.1 Uso do pipe\n\nx %&gt;% f é equivalente à f(x)\nx %&gt;% f(y) é equivalente à f(x, y)\nx %&gt;% f %&gt;% g %&gt;% h é equivalente à h(g(f(x)))\n\nO %&gt;% significa que o elemento à esquerda sera avaliado pela função à direita.\nPodemos também utilizar o . como espaço reservado para o elemento à esquerda, isto é:\n\nx %&gt;% f(y, .) é equivalente à f(y, x)\nx %&gt;% f(., y) é equivalente à f(x, y)\nx %&gt;% f(y, z = .) é equivalente à f(y, z = x).\n\n\n4.1.1.1 4.1.1.1 Exemplos\nNote que não conseguimos utilizar o %&gt;% com operadores aritiméticos. Portanto, uma alternativa é utiliarmos as funções add(), subtract(), multiply_by(), raise_to_power(), divide_by() etc. Para a lista completa de funções, utilize ?add.\n\n\n [1]  2.197622  3.849113 12.793542  5.352542  5.646439 13.575325  7.304581\n [8] -1.325306  1.565736  2.771690\n\n\nOutra opção é utilizarmos os a operação entre aspas.\n\n\n [1]  2.197622  3.849113 12.793542  5.352542  5.646439 13.575325  7.304581\n [8] -1.325306  1.565736  2.771690\n\n\n\n\n\n4.1.2 4.1.2 Benefícios dos Pipes\n\nLegibilidade: Os pipes permitem ler o código da esquerda para a direita, refletindo a sequência de operações realizadas.\nRedução de Variáveis Intermediárias: Com pipes, não precisamos criar variáveis intermediárias para armazenar resultados parciais.\nEncadeamento Simples: O encadeamento de operações se torna mais intuitivo e fácil de seguir o código e procedimentos.\nDepuração: Ao usar pipes, podemos isolar cada etapa para depuração, facilitando a identificação de erros.\n\n\n\n4.1.3 4.1.3 Pipe de atribuição\nMuitas vezes queremos realizar opereções e atribuir os resultados ao mesmo data.frame de entrada, por exemplo, podemos querer criar uma nova variável em meu_data_frame, porem, não temos interesse em duplicar o banco de dados. Podemos fazer uma atribuição explicita ou implicita. Para a explicita, simplismente atribuímos utilizando = ou &lt;-, como vimos até agora durante o curso. Porém, podemos fazer uma atribuição implicita utilizando o operador %&lt;&gt;%.\n\n\nCarregando pacotes exigidos: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\n\nRows: 8\nColumns: 5\n$ nome               &lt;chr&gt; \"Alice\", \"Bob\", \"Carol\", \"Ana\", \"João\", \"Carlos\", \"…\n$ idade              &lt;dbl&gt; 25, 30, 28, 20, 27, 50, 60, 45\n$ salario            &lt;dbl&gt; 5000, 6000, 5500, 8000, 2000, 3500, 10000, 3800\n$ meio_de_transporte &lt;chr&gt; \"onibus\", \"bicicleta\", \"onibus\", \"carro\", \"carro\", …\n$ idade_25           &lt;lgl&gt; FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE\n\n\n\n\nRows: 8\nColumns: 6\n$ nome               &lt;chr&gt; \"Alice\", \"Bob\", \"Carol\", \"Ana\", \"João\", \"Carlos\", \"…\n$ idade              &lt;dbl&gt; 25, 30, 28, 20, 27, 50, 60, 45\n$ salario            &lt;dbl&gt; 5000, 6000, 5500, 8000, 2000, 3500, 10000, 3800\n$ meio_de_transporte &lt;chr&gt; \"onibus\", \"bicicleta\", \"onibus\", \"carro\", \"carro\", …\n$ idade_25           &lt;lgl&gt; FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE\n$ idade_50           &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FAL…"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#manipulação-de-dados",
    "href": "04_transfomacao-de-dados.html#manipulação-de-dados",
    "title": "4  4 Transformação de dados",
    "section": "4.2 4.2 Manipulação de Dados",
    "text": "4.2 4.2 Manipulação de Dados\n\n\nCarregando pacotes exigidos: data.table\n\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\n\n\nCarregando pacotes exigidos: tidyr\n\n\n\nAttaching package: 'tidyr'\n\n\nThe following object is masked from 'package:magrittr':\n\n    extract\n\n\n\n\nRows: 864,561\nColumns: 24\n$ data                           &lt;chr&gt; \"01/01/2010\", \"01/01/2010\", \"01/01/2010…\n$ horario                        &lt;chr&gt; \"04:21:00\", \"02:13:00\", \"03:35:00\", \"07…\n$ n_da_ocorrencia                &lt;chr&gt; \"18\", \"20\", \"000024/2010\", \"000038/2010…\n$ tipo_de_ocorrencia             &lt;chr&gt; \"sem vítima\", \"sem vítima\", \"sem vítima…\n$ km                             &lt;chr&gt; \"167\", \"269,5\", \"77\", \"52\", \"33\", \"24\",…\n$ trecho                         &lt;chr&gt; \"BR-393/RJ\", \"BR-116/PR\", \"BR-290/RS\", …\n$ sentido                        &lt;chr&gt; \"Norte\", \"Sul\", \"Norte\", \"Norte\", \"Nort…\n$ lugar_acidente                 &lt;chr&gt; \"Rodovia do Aço\", \"Autopista Regis Bitt…\n$ tipo_de_acidente               &lt;chr&gt; \"Derrapagem\", \"Colisão Traseira\", \"COLI…\n$ automovel                      &lt;int&gt; 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, NA, 1, 1,…\n$ bicicleta                      &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ caminhao                       &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ moto                           &lt;int&gt; NA, NA, 0, 1, 1, 0, NA, NA, NA, NA, 1, …\n$ onibus                         &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ outros                         &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ tracao_animal                  &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ transporte_de_cargas_especiais &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ trator_maquinas                &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ utilitarios                    &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ ilesos                         &lt;int&gt; 1, 3, 2, 1, 1, 1, 3, 4, 4, 1, 0, 1, 1, …\n$ levemente_feridos              &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, 5, NA, 2, NA…\n$ moderadamente_feridos          &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, …\n$ gravemente_feridos             &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, …\n$ mortos                         &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, …\n\n\n\n4.2.1 4.2.1 Seleção de Variáveis\nNo tidyverse, a função select() do pacote dplyr é amplamente utilizada para selecionar as colunas relevantes de um conjunto de dados. Além de selecionar colunas pelo nome, a função select() oferece diversas opções avançadas para facilitar a seleção e manipulação de colunas. Vamos explorar algumas dessas opções:\n\n4.2.1.1 4.2.1.1 Seleção por Nome de Coluna\nA forma mais simples de usar o select() é especificar os nomes das colunas que você deseja manter no resultado, por exemplo, podemos estar interessados em selecionarmos a data e o tipo_de_acidente.\n\n\n         data tipo_de_acidente\n1: 01/01/2010       Derrapagem\n2: 01/01/2010 Colisão Traseira\n3: 01/01/2010  COLISÃO LATERAL\n4: 01/01/2010    QUEDA DE MOTO\n5: 01/01/2010    QUEDA DE MOTO\n6: 01/01/2010   SAÍDA DE PISTA\n\n\n\nSeleção por Nome de Coluna que inicie com alguma palavra - starts_with(): Essa função permite selecionar colunas cujos nomes começam com um determinado padrão de caracteres. No nosso banco de dados, podemos estar interessados em selecionar todas as variáveis que iniciem com “tipo”.\n\n\n\n   tipo_de_ocorrencia tipo_de_acidente\n1:         sem vítima       Derrapagem\n2:         sem vítima Colisão Traseira\n3:         sem vítima  COLISÃO LATERAL\n4:         sem vítima    QUEDA DE MOTO\n5:         sem vítima    QUEDA DE MOTO\n6:         sem vítima   SAÍDA DE PISTA\n\n\n\nSeleção por Nome de Coluna que termine com alguma palavra - ends_with(): Essa função permite selecionar colunas cujos nomes terminam com um determinado padrão de caracteres. No nosso banco de dados, podemos estar interessados em selecionar todas as variáveis que terminem com “feridos”.\n\n\n\n   levemente_feridos moderadamente_feridos gravemente_feridos\n1:                 0                     0                  0\n2:                NA                    NA                 NA\n3:                 0                     0                  0\n4:                 0                     0                  0\n5:                 0                     0                  0\n6:                 0                     0                  0\n\n\n\nSeleção por Nome de Coluna que contenha alguma palavra - contains(): Essa função permite selecionar colunas cujos nomes contenham um determinado padrão de caracteres. No nosso banco de dados, podemos estar interessados em selecionar todas as variáveis que contenham “mente”.\n\n\n\n   levemente_feridos moderadamente_feridos gravemente_feridos\n1:                 0                     0                  0\n2:                NA                    NA                 NA\n3:                 0                     0                  0\n4:                 0                     0                  0\n5:                 0                     0                  0\n6:                 0                     0                  0\n\n\n\n\n4.2.1.2 4.2.1.2 Seleção de variáveis por Tipos específicos de dados\nMuitas vezes, estamos interessados em selecionar apenas variáveis de um tipo, para tratarmos os dados da maneira mais adequada.\n\nSelecionar apenas variáveis numéricas: is.numeric()\n\n\n\nRows: 864,561\nColumns: 15\n$ automovel                      &lt;int&gt; 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, NA, 1, 1,…\n$ bicicleta                      &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ caminhao                       &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ moto                           &lt;int&gt; NA, NA, 0, 1, 1, 0, NA, NA, NA, NA, 1, …\n$ onibus                         &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ outros                         &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ tracao_animal                  &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ transporte_de_cargas_especiais &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ trator_maquinas                &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ utilitarios                    &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA,…\n$ ilesos                         &lt;int&gt; 1, 3, 2, 1, 1, 1, 3, 4, 4, 1, 0, 1, 1, …\n$ levemente_feridos              &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, 5, NA, 2, NA…\n$ moderadamente_feridos          &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, …\n$ gravemente_feridos             &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, …\n$ mortos                         &lt;int&gt; 0, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, …\n\n\n\nSelecionar apenas variáveis characters: is.character()\n\n\n\nRows: 864,561\nColumns: 9\n$ data               &lt;chr&gt; \"01/01/2010\", \"01/01/2010\", \"01/01/2010\", \"01/01/20…\n$ horario            &lt;chr&gt; \"04:21:00\", \"02:13:00\", \"03:35:00\", \"07:31:00\", \"04…\n$ n_da_ocorrencia    &lt;chr&gt; \"18\", \"20\", \"000024/2010\", \"000038/2010\", \"000027/2…\n$ tipo_de_ocorrencia &lt;chr&gt; \"sem vítima\", \"sem vítima\", \"sem vítima\", \"sem víti…\n$ km                 &lt;chr&gt; \"167\", \"269,5\", \"77\", \"52\", \"33\", \"24\", \"52\", \"40\",…\n$ trecho             &lt;chr&gt; \"BR-393/RJ\", \"BR-116/PR\", \"BR-290/RS\", \"BR-116/RS\",…\n$ sentido            &lt;chr&gt; \"Norte\", \"Sul\", \"Norte\", \"Norte\", \"Norte\", \"Sul\", \"…\n$ lugar_acidente     &lt;chr&gt; \"Rodovia do Aço\", \"Autopista Regis Bittencourt\", \"C…\n$ tipo_de_acidente   &lt;chr&gt; \"Derrapagem\", \"Colisão Traseira\", \"COLISÃO LATERAL\"…\n\n\n\nSelecionar apenas variáveis lógicas: is.logical()\n\n\n\nRows: 0\nColumns: 0\n\n\n\n\n4.2.1.3 4.2.1.3 Seleção por critérios\n\nall_of(), any_of(): Permitem usar variáveis definidas externamente como argumentos da função. Note que quando utilizamos all_of() todas as variáveis devem existir, já any_of() permite que nem todas as variáveis existam no banco de dados.\n\n\n\nRows: 864,561\nColumns: 3\n$ automovel &lt;int&gt; 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, NA, 1, 1, 2, 2, 1, 1, NA, 1, 2…\n$ bicicleta &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, N…\n$ onibus    &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, N…\n\n\n\n\nRows: 864,561\nColumns: 3\n$ automovel &lt;int&gt; 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, NA, 1, 1, 2, 2, 1, 1, NA, 1, 2…\n$ bicicleta &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, N…\n$ onibus    &lt;int&gt; NA, NA, 0, 0, 0, 0, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, N…\n\n\n\n\n\n4.2.2 4.2.2 Seleção de Observações\nNo pacote dplyr do tidyverse, a função filter() é amplamente utilizada para filtrar linhas de um conjunto de dados com base em condições específicas. Ela oferece diversas opções para criar filtros complexos que atendam às suas necessidades de análise. Vamos explorar diferentes tipos de filtros e como utilizá-los de maneira eficaz.\n\n4.2.2.1 4.2.2.1 Filtros Simples\nFiltros simples envolvem comparações entre valores de uma coluna e um valor constante. Alguns operadores de comparação comuns incluem:\n\n==: Igual a\n!=: Diferente de\n&lt;: Menor que\n&gt;: Maior que\n&lt;=: Menor ou igual a\n&gt;=: Maior ou igual a\n\nPodemos estar interessados em filtrar as observações com pelo menos três carros envolvidos no acidente:\n\n\n             data  horario n_da_ocorrencia         tipo_de_ocorrencia      km\n    1: 01/01/2010 13:14:00             150                 sem vítima     560\n    2: 01/01/2011 23:21:00             542                 sem vítima   137,5\n    3: 01/01/2011 12:21:00             212                 sem vítima    68,8\n    4: 01/01/2011 13:55:00             135                 sem vítima     269\n    5: 01/01/2011 14:57:00             309                 sem vítima     193\n   ---                                                                       \n34384: 31/12/2021 07:00:03             115                 Sem vítima 626,434\n34385: 31/12/2021 21:43:00             388                 Sem vítima 131,806\n34386: 31/12/2021 17:36:28             247                 Sem vítima 269,670\n34387: 31/12/2022 19:53:19             571 ac02 - Acidente com Vítima 445,000\n34388: 31/12/2022 10:18:00             206        Acidente com vítima      44\n          trecho     sentido              lugar_acidente\n    1: BR-116/PR         Sul Autopista Regis Bittencourt\n    2: BR-101/SC       Norte       Autopista Litoral Sul\n    3: BR-116/SP   Pista Sul                   Novadutra\n    4: BR-116/PR       Norte Autopista Regis Bittencourt\n    5: BR-101/SC       Norte       Autopista Litoral Sul\n   ---                                                  \n34384: BR-376/SC Decrescente       Autopista Litoral Sul\n34385: BR-101/SC Decrescente       Autopista Litoral Sul\n34386: BR-116/SP   Crescente Autopista Regis Bittencourt\n34387: BR-262/MG       Oeste                    Concebra\n34388: BR-101/SP Pista Norte                       RIOSP\n                    tipo_de_acidente automovel bicicleta caminhao moto onibus\n    1:              Colisão Traseira         3        NA       NA   NA     NA\n    2:              Colisão Traseira         3        NA       NA   NA     NA\n    3: Choque em barreira New Jersey         3         0        0    0      0\n    4:                 Engavetamento         4        NA       NA   NA     NA\n    5:              Colisão Traseira         3        NA       NA   NA     NA\n   ---                                                                       \n34384:                 Engavetamento         3         0        0    0      0\n34385:                 Engavetamento         3         0        0    0      0\n34386:                 Engavetamento         3         0        0    0      0\n34387:               Colisão Lateral         3         0        0    0      0\n34388:                 Engavetamento         3         0        0    0      0\n       outros tracao_animal transporte_de_cargas_especiais trator_maquinas\n    1:     NA            NA                             NA              NA\n    2:     NA            NA                             NA              NA\n    3:      0             0                             NA               0\n    4:     NA            NA                             NA              NA\n    5:     NA            NA                             NA              NA\n   ---                                                                    \n34384:      0             0                              0               0\n34385:      0             0                              0               0\n34386:      0             0                              0               0\n34387:      0             0                              0               0\n34388:      0             0                             NA               0\n       utilitarios ilesos levemente_feridos moderadamente_feridos\n    1:          NA     14                NA                    NA\n    2:          NA      3                NA                    NA\n    3:           0     11                 0                     0\n    4:          NA      7                NA                    NA\n    5:          NA      3                NA                    NA\n   ---                                                           \n34384:           0      3                 0                     0\n34385:           0      3                 0                     0\n34386:           1      4                 0                     0\n34387:           0      2                 0                     0\n34388:           0     10                 1                     0\n       gravemente_feridos mortos\n    1:                 NA     NA\n    2:                 NA     NA\n    3:                  0      0\n    4:                 NA     NA\n    5:                 NA     NA\n   ---                          \n34384:                  0      0\n34385:                  0      0\n34386:                  0      0\n34387:                  0      0\n34388:                  0      0\n\n\n\n\n4.2.2.2 4.2.2.2 Filtros Combinados\nVocê pode combinar filtros usando os operadores lógicos & (AND) e | (OR) para criar condições mais complexas.\nPodemos estar interessados em filtrar as observações com pelo menos três carros e dois caminhões envolvidos no acidente:\n\n\n           data  horario n_da_ocorrencia tipo_de_ocorrencia                 km\n  1: 01/02/2018 07:45:00             119         sem vítima             41,941\n  2: 01/03/2012 09:04:00             163         com vítima 111,19999694824219\n  3: 01/03/2019 00:07:00               2         sem vítima              667,5\n  4: 01/04/2011 08:32:00             223         sem vítima              222,7\n  5: 01/06/2014 16:47:00             238         com vítima            676,662\n ---                                                                          \n173: 29/11/2017 16:38:00             592         com vítima  96,30000305175781\n174: 30/10/2012 13:15:00             437         com vítima              133,2\n175: 31/03/2013 19:30:00             468         com vítima              540,5\n176: 31/03/2014 15:56:00             228         sem vítima                656\n177: 31/10/2011 06:28:00             121         com vítima                208\n        trecho     sentido        lugar_acidente tipo_de_acidente automovel\n  1: BR-101/SC       Norte Autopista Litoral Sul    Engavetamento         3\n  2: BR-116/PR         Sul Autopista Litoral Sul Colisão Traseira         3\n  3: BR-376/PR         Sul Autopista Litoral Sul    Engavetamento         8\n  4: BR-116/RJ Pista Norte             Novadutra    Engavetamento         3\n  5: BR-376/PR         Sul Autopista Litoral Sul    Engavetamento         4\n ---                                                                       \n173: BR-116/SP Pista Norte             Novadutra    Engavetamento         7\n174: BR-116/SP Pista Norte             Novadutra    Engavetamento         3\n175: BR-381/MG       Norte Autopista Fernão Dias    Engavetamento         5\n176: BR-376/PR       Norte Autopista Litoral Sul    Engavetamento         3\n177: BR-116/RJ Pista Norte             Novadutra    Engavetamento         3\n     bicicleta caminhao moto onibus outros tracao_animal\n  1:        NA        3   NA     NA     NA            NA\n  2:        NA        3    1     NA     NA            NA\n  3:        NA        4   NA     NA     NA            NA\n  4:         0        3    0      0      0             0\n  5:        NA        4   NA     NA     NA            NA\n ---                                                    \n173:        NA        3   NA     NA     NA            NA\n174:         0        3    0      0      0             0\n175:        NA        3   NA     NA     NA            NA\n176:        NA        4   NA     NA     NA            NA\n177:         0        3    0      0      1             0\n     transporte_de_cargas_especiais trator_maquinas utilitarios ilesos\n  1:                             NA              NA           1      7\n  2:                             NA              NA          NA      6\n  3:                             NA              NA          NA     29\n  4:                             NA               0           0      8\n  5:                             NA              NA          NA      3\n ---                                                                  \n173:                             NA              NA          NA     19\n174:                             NA               0           0      8\n175:                             NA              NA          NA      7\n176:                             NA              NA           2      9\n177:                             NA               0           0      6\n     levemente_feridos moderadamente_feridos gravemente_feridos mortos\n  1:                NA                    NA                 NA     NA\n  2:                 1                    NA                 NA     NA\n  3:                NA                    NA                 NA     NA\n  4:                 0                     0                  0      0\n  5:                NA                     2                  3      5\n ---                                                                  \n173:                 1                    NA                 NA     NA\n174:                 1                     0                  0      0\n175:                 1                    NA                 NA     NA\n176:                NA                    NA                 NA     NA\n177:                 1                     0                  0      0\n\n\nPodemos omitir o operador lógico &, então a função ficaria:\n\n\n           data  horario n_da_ocorrencia tipo_de_ocorrencia                 km\n  1: 01/02/2018 07:45:00             119         sem vítima             41,941\n  2: 01/03/2012 09:04:00             163         com vítima 111,19999694824219\n  3: 01/03/2019 00:07:00               2         sem vítima              667,5\n  4: 01/04/2011 08:32:00             223         sem vítima              222,7\n  5: 01/06/2014 16:47:00             238         com vítima            676,662\n ---                                                                          \n173: 29/11/2017 16:38:00             592         com vítima  96,30000305175781\n174: 30/10/2012 13:15:00             437         com vítima              133,2\n175: 31/03/2013 19:30:00             468         com vítima              540,5\n176: 31/03/2014 15:56:00             228         sem vítima                656\n177: 31/10/2011 06:28:00             121         com vítima                208\n        trecho     sentido        lugar_acidente tipo_de_acidente automovel\n  1: BR-101/SC       Norte Autopista Litoral Sul    Engavetamento         3\n  2: BR-116/PR         Sul Autopista Litoral Sul Colisão Traseira         3\n  3: BR-376/PR         Sul Autopista Litoral Sul    Engavetamento         8\n  4: BR-116/RJ Pista Norte             Novadutra    Engavetamento         3\n  5: BR-376/PR         Sul Autopista Litoral Sul    Engavetamento         4\n ---                                                                       \n173: BR-116/SP Pista Norte             Novadutra    Engavetamento         7\n174: BR-116/SP Pista Norte             Novadutra    Engavetamento         3\n175: BR-381/MG       Norte Autopista Fernão Dias    Engavetamento         5\n176: BR-376/PR       Norte Autopista Litoral Sul    Engavetamento         3\n177: BR-116/RJ Pista Norte             Novadutra    Engavetamento         3\n     bicicleta caminhao moto onibus outros tracao_animal\n  1:        NA        3   NA     NA     NA            NA\n  2:        NA        3    1     NA     NA            NA\n  3:        NA        4   NA     NA     NA            NA\n  4:         0        3    0      0      0             0\n  5:        NA        4   NA     NA     NA            NA\n ---                                                    \n173:        NA        3   NA     NA     NA            NA\n174:         0        3    0      0      0             0\n175:        NA        3   NA     NA     NA            NA\n176:        NA        4   NA     NA     NA            NA\n177:         0        3    0      0      1             0\n     transporte_de_cargas_especiais trator_maquinas utilitarios ilesos\n  1:                             NA              NA           1      7\n  2:                             NA              NA          NA      6\n  3:                             NA              NA          NA     29\n  4:                             NA               0           0      8\n  5:                             NA              NA          NA      3\n ---                                                                  \n173:                             NA              NA          NA     19\n174:                             NA               0           0      8\n175:                             NA              NA          NA      7\n176:                             NA              NA           2      9\n177:                             NA               0           0      6\n     levemente_feridos moderadamente_feridos gravemente_feridos mortos\n  1:                NA                    NA                 NA     NA\n  2:                 1                    NA                 NA     NA\n  3:                NA                    NA                 NA     NA\n  4:                 0                     0                  0      0\n  5:                NA                     2                  3      5\n ---                                                                  \n173:                 1                    NA                 NA     NA\n174:                 1                     0                  0      0\n175:                 1                    NA                 NA     NA\n176:                NA                    NA                 NA     NA\n177:                 1                     0                  0      0\n\n\nPodemos estar interessados em filtrar as observações com pelo menos três carros OU dois caminhões envolvidos no acidente:\n\n\n             data  horario n_da_ocorrencia         tipo_de_ocorrencia      km\n    1: 01/01/2010 13:14:00             150                 sem vítima     560\n    2: 01/01/2011 23:21:00             542                 sem vítima   137,5\n    3: 01/01/2011 12:21:00             212                 sem vítima    68,8\n    4: 01/01/2011 13:55:00             135                 sem vítima     269\n    5: 01/01/2011 14:57:00             309                 sem vítima     193\n   ---                                                                       \n39204: 31/12/2021 21:43:00             388                 Sem vítima 131,806\n39205: 31/12/2021 17:36:28             247                 Sem vítima 269,670\n39206: 31/12/2022 19:53:19             571 ac02 - Acidente com Vítima 445,000\n39207: 31/12/2022 16:29:00             343                 Sem vítima 643,000\n39208: 31/12/2022 10:18:00             206        Acidente com vítima      44\n          trecho     sentido              lugar_acidente\n    1: BR-116/PR         Sul Autopista Regis Bittencourt\n    2: BR-101/SC       Norte       Autopista Litoral Sul\n    3: BR-116/SP   Pista Sul                   Novadutra\n    4: BR-116/PR       Norte Autopista Regis Bittencourt\n    5: BR-101/SC       Norte       Autopista Litoral Sul\n   ---                                                  \n39204: BR-101/SC Decrescente       Autopista Litoral Sul\n39205: BR-116/SP   Crescente Autopista Regis Bittencourt\n39206: BR-262/MG       Oeste                    Concebra\n39207: BR-116/BA Decrescente                   Via Bahia\n39208: BR-101/SP Pista Norte                       RIOSP\n                       tipo_de_acidente automovel bicicleta caminhao moto\n    1:                 Colisão Traseira         3        NA       NA   NA\n    2:                 Colisão Traseira         3        NA       NA   NA\n    3:    Choque em barreira New Jersey         3         0        0    0\n    4:                    Engavetamento         4        NA       NA   NA\n    5:                 Colisão Traseira         3        NA       NA   NA\n   ---                                                                   \n39204:                    Engavetamento         3         0        0    0\n39205:                    Engavetamento         3         0        0    0\n39206:                  Colisão Lateral         3         0        0    0\n39207: Colisão lateral no mesmo sentido         0         0        3    0\n39208:                    Engavetamento         3         0        0    0\n       onibus outros tracao_animal transporte_de_cargas_especiais\n    1:     NA     NA            NA                             NA\n    2:     NA     NA            NA                             NA\n    3:      0      0             0                             NA\n    4:     NA     NA            NA                             NA\n    5:     NA     NA            NA                             NA\n   ---                                                           \n39204:      0      0             0                              0\n39205:      0      0             0                              0\n39206:      0      0             0                              0\n39207:      0      0             0                              0\n39208:      0      0             0                             NA\n       trator_maquinas utilitarios ilesos levemente_feridos\n    1:              NA          NA     14                NA\n    2:              NA          NA      3                NA\n    3:               0           0     11                 0\n    4:              NA          NA      7                NA\n    5:              NA          NA      3                NA\n   ---                                                     \n39204:               0           0      3                 0\n39205:               0           1      4                 0\n39206:               0           0      2                 0\n39207:               0           0      0                 0\n39208:               0           0     10                 1\n       moderadamente_feridos gravemente_feridos mortos\n    1:                    NA                 NA     NA\n    2:                    NA                 NA     NA\n    3:                     0                  0      0\n    4:                    NA                 NA     NA\n    5:                    NA                 NA     NA\n   ---                                                \n39204:                     0                  0      0\n39205:                     0                  0      0\n39206:                     0                  0      0\n39207:                     0                  0      0\n39208:                     0                  0      0\n\n\n\n\n4.2.2.3 4.2.2.3 Filtrando valores dentro de um intervalo\nPara filtramos valores dentro de um intervalo definido podemos utilizar as funções between() e %in%.\nA função between() é útil para filtrar valores dentro de um intervalo numérico.\nPodemos estar interessados em filtrar as observações com valores entre 4 e 8 motos envolvidas no acidente:\n\n\n          data  horario n_da_ocorrencia                    tipo_de_ocorrencia\n 1: 02/02/2012 09:07:00              35                            sem vítima\n 2: 02/08/2022 14:34:00             333          Acidente com Danos Materiais\n 3: 04/02/2021 06:24:00             111                  Acidente sem Vítimas\n 4: 05/08/2021 07:12:00             118                  Acidente com Vítimas\n 5: 07/08/2021 04:53:00              35                  Acidente com Vítimas\n 6: 09/07/2021 06:08:00              70                  Acidente com Vítimas\n 7: 11/04/2019 23:50:00             526                            com vítima\n 8: 11/07/2017 16:31:00             307                            com vítima\n 9: 13/11/2016 17:15:00             146                            sem vítima\n10: 14/01/2021 06:55:00             143                  Acidente com Vítimas\n11: 16/11/2010 21:22:00             404                            com vítima\n12: 17/03/2016 06:52:00              64                   Acidente com vítima\n13: 18/03/2016 17:02:00             259                   Acidente sem Vítima\n14: 18/07/2021 09:06:00              88                  Acidente sem Vítimas\n15: 19/03/2016 05:23:00              70 Acidente sem Vítima - TRECHO CONTORNO\n16: 19/10/2020 18:40:00             240                        Acidente Fatal\n17: 20/03/2016 18:20:00             249                   Acidente com vítima\n18: 20/03/2021 22:17:00             245                  Acidente com Vítimas\n19: 20/03/2021 13:57:00             140                        Acidente Fatal\n20: 20/05/2016 07:50:00             110                            com vítima\n21: 20/10/2021 06:30:00             114                  Acidente com Vítimas\n22: 21/03/2016 08:54:00             103                   Acidente com vítima\n23: 22/01/2023 19:40:00            3192      AC01 - Acidente com VITIMA FATAL\n24: 22/03/2016 23:01:00             347                   Acidente sem Vítima\n25: 22/11/2015 10:04:00              61                            com vítima\n26: 23/01/2023 14:50:00              69                            Com vítima\n27: 25/03/2013 07:31:00             158                            com vítima\n28: 25/09/2021 06:50:00              66                  Acidente com Vítimas\n29: 26/08/2011 22:27:00             817                            com vítima\n30: 27/10/2021 12:33:00             208                  Acidente com Vítimas\n31: 28/03/2020 12:30:00             249                            com vítima\n32: 29/03/2021 23:48:00             289                  Acidente com Vítimas\n          data  horario n_da_ocorrencia                    tipo_de_ocorrencia\n                  km    trecho     sentido              lugar_acidente\n 1:             59,7 BR-153/SP       Norte             Transbrasiliana\n 2:          506,000 BR-153/GO         Sul                    Concebra\n 3:            510,3 BR-040/MG         Sul                      VIA040\n 4:            96,99 BR-040/GO         Sul                      VIA040\n 5:           552,15 BR-040/MG         Sul                      VIA040\n 6:            514,4 BR-040/MG         Sul                      VIA040\n 7:          212,269 BR-101/SC         Sul       Autopista Litoral Sul\n 8:            269,5 BR-116/PR         Sul Autopista Regis Bittencourt\n 9:              0,2 BR-050/MG       Norte                      ECO050\n10:           542,25 BR-040/MG         Sul                      VIA040\n11: 90,0999984741211 BR-381/SP       Norte       Autopista Fernão Dias\n12:              401 BR-101/ES         Sul                      ECO101\n13:              205 BR-101/ES       Norte                      ECO101\n14:              4,1 BR-040/GO       Norte                      VIA040\n15:              285 BR-101/ES         Sul                      ECO101\n16:           610,55 BR-040/MG         Sul                      VIA040\n17:              139 BR-101/ES         Sul                      ECO101\n18:             23,1 BR-040/GO       Norte                      VIA040\n19:             34,6 BR-040/MG         Sul                      VIA040\n20:          207,488 BR-101/SC       Norte       Autopista Litoral Sul\n21:            517,5 BR-040/MG         Sul                      VIA040\n22:              363 BR-101/ES         Sul                      ECO101\n23:              822 BR-040/MG          JF                      Concer\n24:               10 BR-101/ES       Norte                      ECO101\n25:            277,7 BR-101/RJ         Sul        Autopista Fluminense\n26:           80,200 BR-392/RS   Crescente                      Ecosul\n27:            180,2 BR-116/RJ Pista Norte                   Novadutra\n28:              5,5 BR-040/DF       Norte                      VIA040\n29:            153,4 BR-116/SP Pista Norte                   Novadutra\n30:           531,12 BR-040/MG         Sul                      VIA040\n31:           24,926 BR-101/SC         Sul       Autopista Litoral Sul\n32:              8,9 BR-040/MG         Sul                      VIA040\n                  km    trecho     sentido              lugar_acidente\n                              tipo_de_acidente automovel bicicleta caminhao\n 1: Choque contra objeto na faixa de rolamento        NA        NA        1\n 2:                           Colisão Traseira         0         0        0\n 3:                              Engavetamento         0         0        0\n 4:                           Colisão traseira         0         0        0\n 5:                           Colisão traseira         0         0        0\n 6:                              Engavetamento         4         0        0\n 7:                              Engavetamento         1        NA       NA\n 8:                        Colisão Transversal         1         0        0\n 9:     Choque - Veiculo parado no acostamento         1        NA       NA\n10:                           Colisão traseira         0         0        0\n11:                         Outros - Sequência        NA        NA       NA\n12:                            Colisão Lateral         1        NA        0\n13:                           Colisão Traseira         2        NA        0\n14:                            Colisão lateral         0         0        0\n15:                             Saída de Pista         2        NA        0\n16:                        Colisão transversal         0         0        1\n17:                           Colisão Traseira         1        NA        0\n18:                              Engavetamento         1         0        0\n19:                            Colisão frontal         0         0        1\n20:                              Engavetamento        NA        NA       NA\n21:                            Colisão lateral         2         0        0\n22:                            Colisão Lateral         0        NA        1\n23:                     Atropelamento - Animal        NA        NA       NA\n24:                          Veículo em Chamas         0        NA        0\n25:                              Engavetamento         1        NA       NA\n26:                             Saída de pista         0         0        0\n27:                  Abalroamento longitudinal         1         0        0\n28:                         Tombamento de Moto         0         0        0\n29:                              Queda de moto         0         0        0\n30:                            Colisão lateral         0         0        0\n31:                              Engavetamento         1        NA       NA\n32:                           Colisão traseira         2         0        0\n                              tipo_de_acidente automovel bicicleta caminhao\n    moto onibus outros tracao_animal transporte_de_cargas_especiais\n 1:    4     NA     NA            NA                             NA\n 2:    4      0      0             0                              0\n 3:    5      0      1             0                              0\n 4:    4      0      0             0                              0\n 5:    4      0      1             0                              0\n 6:    4      0      0             0                              0\n 7:    4     NA     NA            NA                             NA\n 8:    4      0      0             0                              0\n 9:    4     NA     NA            NA                             NA\n10:    4      0      0             0                              0\n11:    4     NA     NA            NA                             NA\n12:    5      0      0             0                             NA\n13:    4      0      0             0                             NA\n14:    5      0      0             0                              0\n15:    4      0      0             0                             NA\n16:    6      0      0             0                              0\n17:    4      0      0             0                             NA\n18:    4      0      0             0                              0\n19:    4      2      0             0                              0\n20:    4     NA      1            NA                             NA\n21:    4      0      0             0                              0\n22:    4      0      0             0                             NA\n23:    4     NA     NA            NA                             NA\n24:    4      0      0             0                             NA\n25:    5     NA     NA            NA                             NA\n26:    5      0      0             0                              0\n27:    4      0      0             0                             NA\n28:    4      0      1             0                              0\n29:    4      0      0             0                             NA\n30:    4      0      0             0                              0\n31:    4     NA     NA            NA                             NA\n32:    4      0      0             0                              0\n    moto onibus outros tracao_animal transporte_de_cargas_especiais\n    trator_maquinas utilitarios ilesos levemente_feridos moderadamente_feridos\n 1:              NA          NA      5                NA                    NA\n 2:               0           0      4                 0                     0\n 3:               0           0      3                 0                     0\n 4:               0           0      1                 0                     1\n 5:               0           0      0                 0                     0\n 6:               0           0      0                 1                     0\n 7:              NA          NA      1                 2                    NA\n 8:               0           0      1                 4                     0\n 9:              NA          NA      6                NA                    NA\n10:               0           0      2                 1                     0\n11:              NA          NA      4                 1                    NA\n12:              NA          NA      2                 0                     0\n13:              NA          NA      5                 0                     0\n14:               0           0      2                 0                     0\n15:              NA          NA      4                 0                     0\n16:               0           0      1                 0                     0\n17:              NA          NA      2                 2                     0\n18:               0           0      2                 0                     0\n19:               0           0      1                 0                     0\n20:              NA          NA      3                 2                    NA\n21:               0           0      0                 1                     0\n22:              NA          NA      2                 1                     0\n23:              NA          NA      1                 2                    NA\n24:              NA          NA      1                 0                     0\n25:              NA          NA      4                 1                     2\n26:               0           0      3                 1                     0\n27:               0           0      2                 4                     0\n28:               0           0      3                 0                     1\n29:               0           0      2                 2                     0\n30:               0           0      0                 1                     0\n31:              NA          NA      3                 2                    NA\n32:               0           0      1                 1                     0\n    trator_maquinas utilitarios ilesos levemente_feridos moderadamente_feridos\n    gravemente_feridos mortos\n 1:                 NA     NA\n 2:                  0      0\n 3:                  0      0\n 4:                  0      0\n 5:                  0      0\n 6:                  0      0\n 7:                  1      1\n 8:                  0      0\n 9:                 NA     NA\n10:                  0      0\n11:                 NA     NA\n12:                  1      0\n13:                  0      0\n14:                  0      0\n15:                  0      0\n16:                  0      1\n17:                  0      0\n18:                  0      0\n19:                  0      1\n20:                 NA     NA\n21:                  0      0\n22:                  0      0\n23:                  1      1\n24:                  0      0\n25:                 NA     NA\n26:                  1      0\n27:                  0      0\n28:                  0      0\n29:                  0      0\n30:                  0      0\n31:                 NA     NA\n32:                  0      0\n    gravemente_feridos mortos\n\n\nA função %in% é usada para filtrar valores que correspondem a um conjunto de valores.\nPodemos estar interessados em filtrar as observações com ocorrência em alguma das seguintes operadoras: “Autopista Regis Bittencourt”, “Autopista Litoral Sul”, “Via Sul”.\n\n\n              data  horario n_da_ocorrencia tipo_de_ocorrencia      km\n     1: 01/01/2010 02:13:00              20         sem vítima   269,5\n     2: 01/01/2010 11:20:00             125         sem vítima      52\n     3: 01/01/2010 18:07:00             214         sem vítima      40\n     4: 01/01/2010 15:52:00             354         sem vítima     132\n     5: 01/01/2010 16:30:00             377         com vítima      35\n    ---                                                               \n203032: 31/12/2022 20:44:02             343         Com vítima 105,500\n203033: 31/12/2022 22:20:07             372         Sem vítima 158,100\n203034: 31/12/2022 22:16:59             369         Com vítima 131,163\n203035: 31/12/2022 23:23:36             386         Sem vítima 146,425\n203036: 31/12/2022 12:12:09             188         Com vítima 223,520\n           trecho     sentido              lugar_acidente tipo_de_acidente\n     1: BR-116/PR         Sul Autopista Regis Bittencourt Colisão Traseira\n     2: BR-116/PR       Norte Autopista Regis Bittencourt   Saida de Pista\n     3: BR-116/PR         Sul Autopista Regis Bittencourt   Saida de Pista\n     4: BR-101/SC         Sul       Autopista Litoral Sul   Saida de Pista\n     5: BR-101/SC         Sul       Autopista Litoral Sul    Queda de Moto\n    ---                                                                   \n203032: BR-116/SC   Crescente       Autopista Litoral Sul Colisão traseira\n203033: BR-101/SC   Crescente       Autopista Litoral Sul Colisão traseira\n203034: BR-101/SC   Crescente       Autopista Litoral Sul    Queda de moto\n203035: BR-101/SC   Crescente       Autopista Litoral Sul           Choque\n203036: BR-101/SC Decrescente       Autopista Litoral Sul    Queda de moto\n        automovel bicicleta caminhao moto onibus outros tracao_animal\n     1:         2        NA       NA   NA     NA     NA            NA\n     2:         1        NA       NA   NA     NA     NA            NA\n     3:         1        NA       NA   NA     NA     NA            NA\n     4:         1        NA       NA   NA     NA     NA            NA\n     5:        NA        NA       NA    1     NA     NA            NA\n    ---                                                              \n203032:         1         0        0    1      0      0             0\n203033:         2         0        0    0      0      0             0\n203034:         0         0        0    1      0      0             0\n203035:         1         0        0    0      0      0             0\n203036:         0         0        0    1      0      0             0\n        transporte_de_cargas_especiais trator_maquinas utilitarios ilesos\n     1:                             NA              NA          NA      3\n     2:                             NA              NA          NA      3\n     3:                             NA              NA          NA      4\n     4:                             NA              NA          NA      1\n     5:                             NA              NA          NA      0\n    ---                                                                  \n203032:                              0               0           0      1\n203033:                              0               0           0      2\n203034:                              0               0           0      0\n203035:                              0               0           0      0\n203036:                              0               0           0      0\n        levemente_feridos moderadamente_feridos gravemente_feridos mortos\n     1:                NA                    NA                 NA     NA\n     2:                NA                    NA                 NA     NA\n     3:                NA                    NA                 NA     NA\n     4:                NA                    NA                 NA     NA\n     5:                 2                    NA                 NA     NA\n    ---                                                                  \n203032:                 1                     0                  0      0\n203033:                 0                     0                  0      0\n203034:                 1                     0                  0      0\n203035:                 0                     0                  0      0\n203036:                 2                     0                  0      0\n\n\nPodemos estar interessados nas autopistas que não são operadas pelas mesmas operadoras. Para isso precisamos definir um operador de not in.\n\n\n              data  horario n_da_ocorrencia           tipo_de_ocorrencia\n     1: 01/01/2010 04:21:00              18                   sem vítima\n     2: 01/01/2010 03:35:00     000024/2010                   sem vítima\n     3: 01/01/2010 07:31:00     000038/2010                   sem vítima\n     4: 01/01/2010 04:57:00     000027/2010                   sem vítima\n     5: 01/01/2010 08:02:00     000042/2010                   sem vítima\n    ---                                                                 \n661521: 31/12/2022 02:10:00              17 Acidente com Danos Materiais\n661522: 31/12/2022 00:08:00               4 Acidente com Danos Materiais\n661523: 31/12/2022 03:28:00              21                   Com vítima\n661524: 31/12/2022 05:05:55              14                   Sem vítima\n661525: 31/12/2022 13:49:33             339 Acidente com Danos Materiais\n             km    trecho     sentido         lugar_acidente tipo_de_acidente\n     1:     167 BR-393/RJ       Norte         Rodovia do Aço       Derrapagem\n     2:      77 BR-290/RS       Norte                Concepa  COLISÃO LATERAL\n     3:      52 BR-116/RS       Norte                Concepa    QUEDA DE MOTO\n     4:      33 BR-290/RS       Norte                Concepa    QUEDA DE MOTO\n     5:      24 BR-290/RS         Sul                Concepa   SAÍDA DE PISTA\n    ---                                                                      \n661521: 636,000 BR-262/MG       Leste               Concebra   Saida de Pista\n661522: 865,000 BR-262/MG       Oeste               Concebra   Saida de Pista\n661523: 180,000  BR-50/MG Decrescente                 ECO050      Capotamento\n661524: 115,100 BR-116/PR Decrescente Autopista Planalto Sul Colisão traseira\n661525: 379,000 BR-262/MG       Leste               Concebra   Saida de Pista\n        automovel bicicleta caminhao moto onibus outros tracao_animal\n     1:         1        NA       NA   NA     NA     NA            NA\n     2:         2         0        0    0      0      0             0\n     3:         0         0        0    1      0      0             0\n     4:         0         0        0    1      0      0             0\n     5:         1         0        0    0      0      0             0\n    ---                                                              \n661521:         1         0        0    0      0      0             0\n661522:         1         0        0    0      0      0             0\n661523:         1         0        0    0      0      0             0\n661524:         2         0        0    0      0      0             0\n661525:         0         0        1    0      0      0             0\n        transporte_de_cargas_especiais trator_maquinas utilitarios ilesos\n     1:                             NA              NA          NA      1\n     2:                              0               0           0      2\n     3:                              0               0           0      1\n     4:                              0               0           0      1\n     5:                              0               0           0      1\n    ---                                                                  \n661521:                              0               0           0      3\n661522:                              0               0           0      1\n661523:                              0               0           0      3\n661524:                              0               0           0      2\n661525:                              0               0           0      1\n        levemente_feridos moderadamente_feridos gravemente_feridos mortos\n     1:                 0                     0                  0      0\n     2:                 0                     0                  0      0\n     3:                 0                     0                  0      0\n     4:                 0                     0                  0      0\n     5:                 0                     0                  0      0\n    ---                                                                  \n661521:                 0                     0                  0      0\n661522:                 0                     0                  0      0\n661523:                 1                     0                  0      0\n661524:                 0                     0                  0      0\n661525:                 0                     0                  0      0\n\n\nAlternativamente,\n\n\n              data  horario n_da_ocorrencia           tipo_de_ocorrencia\n     1: 01/01/2010 04:21:00              18                   sem vítima\n     2: 01/01/2010 03:35:00     000024/2010                   sem vítima\n     3: 01/01/2010 07:31:00     000038/2010                   sem vítima\n     4: 01/01/2010 04:57:00     000027/2010                   sem vítima\n     5: 01/01/2010 08:02:00     000042/2010                   sem vítima\n    ---                                                                 \n661521: 31/12/2022 02:10:00              17 Acidente com Danos Materiais\n661522: 31/12/2022 00:08:00               4 Acidente com Danos Materiais\n661523: 31/12/2022 03:28:00              21                   Com vítima\n661524: 31/12/2022 05:05:55              14                   Sem vítima\n661525: 31/12/2022 13:49:33             339 Acidente com Danos Materiais\n             km    trecho     sentido         lugar_acidente tipo_de_acidente\n     1:     167 BR-393/RJ       Norte         Rodovia do Aço       Derrapagem\n     2:      77 BR-290/RS       Norte                Concepa  COLISÃO LATERAL\n     3:      52 BR-116/RS       Norte                Concepa    QUEDA DE MOTO\n     4:      33 BR-290/RS       Norte                Concepa    QUEDA DE MOTO\n     5:      24 BR-290/RS         Sul                Concepa   SAÍDA DE PISTA\n    ---                                                                      \n661521: 636,000 BR-262/MG       Leste               Concebra   Saida de Pista\n661522: 865,000 BR-262/MG       Oeste               Concebra   Saida de Pista\n661523: 180,000  BR-50/MG Decrescente                 ECO050      Capotamento\n661524: 115,100 BR-116/PR Decrescente Autopista Planalto Sul Colisão traseira\n661525: 379,000 BR-262/MG       Leste               Concebra   Saida de Pista\n        automovel bicicleta caminhao moto onibus outros tracao_animal\n     1:         1        NA       NA   NA     NA     NA            NA\n     2:         2         0        0    0      0      0             0\n     3:         0         0        0    1      0      0             0\n     4:         0         0        0    1      0      0             0\n     5:         1         0        0    0      0      0             0\n    ---                                                              \n661521:         1         0        0    0      0      0             0\n661522:         1         0        0    0      0      0             0\n661523:         1         0        0    0      0      0             0\n661524:         2         0        0    0      0      0             0\n661525:         0         0        1    0      0      0             0\n        transporte_de_cargas_especiais trator_maquinas utilitarios ilesos\n     1:                             NA              NA          NA      1\n     2:                              0               0           0      2\n     3:                              0               0           0      1\n     4:                              0               0           0      1\n     5:                              0               0           0      1\n    ---                                                                  \n661521:                              0               0           0      3\n661522:                              0               0           0      1\n661523:                              0               0           0      3\n661524:                              0               0           0      2\n661525:                              0               0           0      1\n        levemente_feridos moderadamente_feridos gravemente_feridos mortos\n     1:                 0                     0                  0      0\n     2:                 0                     0                  0      0\n     3:                 0                     0                  0      0\n     4:                 0                     0                  0      0\n     5:                 0                     0                  0      0\n    ---                                                                  \n661521:                 0                     0                  0      0\n661522:                 0                     0                  0      0\n661523:                 1                     0                  0      0\n661524:                 0                     0                  0      0\n661525:                 0                     0                  0      0\n\n\nOutras vezes, podemos utilizar o operador %like% que busca padrões. Por exemplo, podemos estar interessados em buscar todos acidentes que ocorreram com vítimas, e no campo tipo_de_ocorrencia podemos simplesmente buscar por:\n\n\n              data  horario n_da_ocorrencia               tipo_de_ocorrencia\n     1: 01/01/2010 15:53:00              48                       com vítima\n     2: 01/01/2010 16:30:00             377                       com vítima\n     3: 01/01/2010 01:06:00               2                       com vítima\n     4: 01/01/2010 11:25:00             102                       com vítima\n     5: 01/01/2010 12:41:00             142                       com vítima\n    ---                                                                     \n219209: 31/12/2022 10:28:00             211              Acidente com vítima\n219210: 31/12/2022 07:53:44              26 ac03 - Acidente com vítima ilesa\n219211: 31/12/2022 10:18:00             206              Acidente com vítima\n219212: 31/12/2022 01:53:24              10 ac03 - Acidente com vítima ilesa\n219213: 31/12/2022 07:53:44              26 ac03 - Acidente com vítima ilesa\n             km    trecho     sentido              lugar_acidente\n     1:   119,5 BR-116/PR         Sul      Autopista Planalto Sul\n     2:      35 BR-101/SC         Sul       Autopista Litoral Sul\n     3:     114 BR-040/RJ         Sul                      Concer\n     4:      64 BR-381/SP         Sul       Autopista Fernão Dias\n     5:     273 BR-116/PR       Norte Autopista Regis Bittencourt\n    ---                                                          \n219209:     144 BR-116/SP   Pista Sul                       RIOSP\n219210: 118,572 BR-116/RJ         Sul                 Ecoriominas\n219211:      44 BR-101/SP Pista Norte                       RIOSP\n219212:    39,9 BR-116/RJ         Sul                 Ecoriominas\n219213: 118,572 BR-116/RJ         Sul                 Ecoriominas\n            tipo_de_acidente automovel bicicleta caminhao moto onibus outros\n     1:  Colisão Transversal         2        NA       NA   NA     NA     NA\n     2:        Queda de Moto        NA        NA       NA    1     NA     NA\n     3: Choque - Objeto Fixo         1        NA       NA   NA     NA     NA\n     4:          Capotamento         1        NA       NA   NA     NA     NA\n     5:      Colisão Lateral        NA        NA       NA    1      1     NA\n    ---                                                                     \n219209:        Queda de moto         0         0        0    1      0      0\n219210:       Saida de Pista         1        NA       NA   NA     NA     NA\n219211:        Engavetamento         3         0        0    0      0      0\n219212:          Capotamento         1        NA       NA   NA     NA     NA\n219213:       Saida de Pista         1        NA       NA   NA     NA     NA\n        tracao_animal transporte_de_cargas_especiais trator_maquinas\n     1:            NA                             NA              NA\n     2:            NA                             NA              NA\n     3:            NA                             NA              NA\n     4:            NA                             NA              NA\n     5:            NA                             NA              NA\n    ---                                                             \n219209:             0                             NA               0\n219210:            NA                             NA              NA\n219211:             0                             NA               0\n219212:            NA                             NA              NA\n219213:            NA                             NA              NA\n        utilitarios ilesos levemente_feridos moderadamente_feridos\n     1:          NA      4                 5                    NA\n     2:          NA      0                 2                    NA\n     3:          NA      0                 2                    NA\n     4:          NA      0                 1                    NA\n     5:          NA      2                NA                     1\n    ---                                                           \n219209:           0      0                 1                     0\n219210:          NA      1                NA                    NA\n219211:           0     10                 1                     0\n219212:          NA      1                NA                    NA\n219213:          NA      1                NA                    NA\n        gravemente_feridos mortos\n     1:                 NA     NA\n     2:                 NA     NA\n     3:                 NA     NA\n     4:                 NA     NA\n     5:                 NA     NA\n    ---                          \n219209:                  0      0\n219210:                 NA     NA\n219211:                  0      0\n219212:                 NA     NA\n219213:                 NA     NA\n\n\nAlgumas vezes temos apenas vários padrões de texto que gostaríamos de buscar. Para isso, a função grepl() permite filtrar com base em padrões de texto.\n\n\n            data  horario n_da_ocorrencia               tipo_de_ocorrencia\n   1: 01/01/2021 04:46:54              23 ac03 - Acidente com vítima ilesa\n   2: 01/01/2021 14:00:09              83 ac03 - Acidente com vítima ilesa\n   3: 01/01/2023 12:34:00              58 ac03 - Acidente com vítima ilesa\n   4: 01/01/2023 16:39:20              90 ac03 - Acidente com vítima ilesa\n   5: 01/01/2023 17:19:19              95 ac03 - Acidente com vítima ilesa\n  ---                                                                     \n2001: 31/12/2022 01:53:24              10 ac03 - Acidente com vítima ilesa\n2002: 31/12/2022 04:50:18              17 ac03 - Acidente com vítima ilesa\n2003: 31/12/2022 07:53:44              26 ac03 - Acidente com vítima ilesa\n2004: 31/12/2022 01:53:24              10 ac03 - Acidente com vítima ilesa\n2005: 31/12/2022 07:53:44              26 ac03 - Acidente com vítima ilesa\n           km    trecho sentido lugar_acidente                 tipo_de_acidente\n   1:   163,2 BR-050/GO   Norte         ECO050          Atropelamento de Animal\n   2:    37,8 BR-050/MG     Sul         ECO050        Choque - Defensa metálica\n   3:  17,781 BR-116/RJ     Sul    Ecoriominas                  Choque - Arvore\n   4:      42 BR-116/RJ     Sul    Ecoriominas Colisão lateral no mesmo sentido\n   5:     109 BR-116/RJ   Norte    Ecoriominas Colisão lateral no mesmo sentido\n  ---                                                                          \n2001:    39,9 BR-116/RJ     Sul    Ecoriominas                      Capotamento\n2002:    54,3 BR-493/RJ   Norte    Ecoriominas                   Choque - Poste\n2003: 118,572 BR-116/RJ     Sul    Ecoriominas                   Saida de Pista\n2004:    39,9 BR-116/RJ     Sul    Ecoriominas                      Capotamento\n2005: 118,572 BR-116/RJ     Sul    Ecoriominas                   Saida de Pista\n      automovel bicicleta caminhao moto onibus outros tracao_animal\n   1:         1        NA       NA   NA     NA     NA            NA\n   2:         1        NA       NA   NA     NA     NA            NA\n   3:        NA        NA        1   NA     NA     NA            NA\n   4:         2        NA       NA   NA     NA     NA            NA\n   5:         1        NA       NA   NA     NA      1            NA\n  ---                                                              \n2001:         1        NA       NA   NA     NA     NA            NA\n2002:        NA        NA        1   NA     NA     NA            NA\n2003:         1        NA       NA   NA     NA     NA            NA\n2004:         1        NA       NA   NA     NA     NA            NA\n2005:         1        NA       NA   NA     NA     NA            NA\n      transporte_de_cargas_especiais trator_maquinas utilitarios ilesos\n   1:                             NA              NA          NA      1\n   2:                             NA              NA          NA      2\n   3:                             NA              NA          NA      1\n   4:                             NA              NA          NA      4\n   5:                             NA              NA          NA      2\n  ---                                                                  \n2001:                             NA              NA          NA      1\n2002:                             NA              NA          NA      1\n2003:                             NA              NA          NA      1\n2004:                             NA              NA          NA      1\n2005:                             NA              NA          NA      1\n      levemente_feridos moderadamente_feridos gravemente_feridos mortos\n   1:                NA                    NA                 NA     NA\n   2:                NA                    NA                 NA     NA\n   3:                NA                    NA                 NA     NA\n   4:                NA                    NA                 NA     NA\n   5:                NA                    NA                 NA     NA\n  ---                                                                  \n2001:                NA                    NA                 NA     NA\n2002:                NA                    NA                 NA     NA\n2003:                NA                    NA                 NA     NA\n2004:                NA                    NA                 NA     NA\n2005:                NA                    NA                 NA     NA\n\n\n\n\n\n4.2.3 4.2.3 Resumo de informações\nNo tidyverse, as funções summarise() e group_by() são amplamente utilizadas para resumir informações e realizar cálculos agregados em conjuntos de dados. Elas desempenham um papel crucial na análise exploratória e na obtenção de insights significativos a partir dos dados. Vamos explorar como essas funções funcionam e como usá-las para resumir informações de maneira eficaz.\n\n4.2.3.1 4.2.3.1 Função summarise()\nA função summarise() é utilizada para calcular estatísticas resumidas para uma coluna ou um conjunto de colunas. Ela permite calcular médias, somas, desvios padrão, mínimos, máximos e outras estatísticas relevantes.\nEstamos interessados em uma tabela descritiva para a variável levemente_feridos.\n\n\n       n f_r f_per     media Q1 Q2 Q3      var       sd min max\n1 864561   1   100 0.6814294  0  0  1 1.009796 1.004886   0  51\n\n\n\n\n4.2.3.2 4.2.3.2 Agrupamento de dados\nA função group_by() é usada para agrupar o conjunto de dados por uma ou mais colunas. Isso cria um contexto em que a função summarise() pode calcular estatísticas específicas para cada grupo.\nEstamos interessados em uma tabela descritiva para a variável levemente_feridos por tipo_de_ocorrencia.\n\n\n       n f_r f_per     media Q1 Q2 Q3      var       sd min max\n1 864561   1   100 0.6814294  0  0  1 1.009796 1.004886   0  51"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#exercício",
    "href": "04_transfomacao-de-dados.html#exercício",
    "title": "4  4 Transformação de dados",
    "section": "4.3 4.3 Exercício",
    "text": "4.3 4.3 Exercício\n\nUtilizando o banco de dados starwars faça o que se pede:\n\n\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\nQual é o número total de espécies únicas presentes? Qual a frequência de indivíduos por espécie?\n\n\n\n[1] 38\n\n\n# A tibble: 38 × 2\n   species   frequency\n   &lt;chr&gt;         &lt;int&gt;\n 1 Aleena            1\n 2 Besalisk          1\n 3 Cerean            1\n 4 Chagrian          1\n 5 Clawdite          1\n 6 Droid             6\n 7 Dug               1\n 8 Ewok              1\n 9 Geonosian         1\n10 Gungan            3\n# ℹ 28 more rows\n\n\n\nCalcule a altura média de personagens masculinos e femininos.\n\n\n\n# A tibble: 2 × 2\n  gender    altura_media\n  &lt;chr&gt;            &lt;dbl&gt;\n1 feminine          166.\n2 masculine         181.\n\n\n\nQual é a média de idade dos personagens de cada espécie para personagens masculinos?\n\n\n\n# A tibble: 33 × 2\n   species   media_idade\n   &lt;chr&gt;           &lt;dbl&gt;\n 1 Aleena          NaN  \n 2 Besalisk        NaN  \n 3 Cerean           92  \n 4 Chagrian        NaN  \n 5 Droid            53.3\n 6 Dug             NaN  \n 7 Ewok              8  \n 8 Geonosian       NaN  \n 9 Gungan           52  \n10 Human            55.2\n# ℹ 23 more rows\n\n\n\nPara cada espécie presente na base de dados, identifique o personagem mais velho e sua idade correspondente.\n\n\n\n# A tibble: 16 × 3\n   species        personagem            idade\n   &lt;chr&gt;          &lt;chr&gt;                 &lt;dbl&gt;\n 1 Cerean         Ki-Adi-Mundi             92\n 2 Droid          C-3PO                   112\n 3 Ewok           Wicket Systri Warrick     8\n 4 Gungan         Jar Jar Binks            52\n 5 Human          Dooku                   102\n 6 Hutt           Jabba Desilijic Tiure   600\n 7 Kel Dor        Plo Koon                 22\n 8 Mirialan       Luminara Unduli          58\n 9 Mon Calamari   Ackbar                   41\n10 Rodian         Greedo                   44\n11 Trandoshan     Bossk                    53\n12 Twi'lek        Ayla Secura              48\n13 Wookiee        Chewbacca               200\n14 Yoda's species Yoda                    896\n15 Zabrak         Darth Maul               54\n16 &lt;NA&gt;           Quarsh Panaka            62"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#manipulação-de-data-no-r",
    "href": "04_transfomacao-de-dados.html#manipulação-de-data-no-r",
    "title": "4  4 Transformação de dados",
    "section": "4.4 4.4 Manipulação de Data no R",
    "text": "4.4 4.4 Manipulação de Data no R\nA transformação de strings em datas e a manipulação de datas são tarefas comuns em análise de dados. No R, existem várias funções e pacotes disponíveis para facilitar essas operações. Vamos explorar como realizar essas tarefas usando as funcionalidades básicas do R.\n\n4.4.1 4.4.1 Transformando Strings em Datas\nPara transformar strings em datas, podemos utilizar a função as.Date(). Por exemplo:\n\n\n[1] \"2023-08-21\"\n\n\nTambém podemos especificar o formato da string de data usando o argumento format. Por exemplo:\n\n\n[1] \"2023-08-21\"\n\n\n\n\n4.4.2 4.4.2 Manipulação de Datas\nApós transformar strings em datas, podemos realizar várias operações de manipulação de datas. Algumas das operações mais comuns incluem:\n\nAdição e subtração de dias, semanas, meses ou anos:\n\n\nComparação de datas:\n\n\n\n[1] TRUE\n\n\n\nFormatação de datas para strings:\n\n\nExtração de componentes de data (ano, mês, dia):\n\n\nCálculo de diferenças entre datas:\n\n\n\n4.4.3 4.4.3 Lubridate: Facilitando a Manipulação de Datas no R\nLidar com datas no R pode ser uma tarefa desafiadora, especialmente quando se precisa realizar operações complexas ou extrair informações específicas das datas. O pacote lubridate foi desenvolvido para simplificar a manipulação de datas, tornando as tarefas relacionadas a datas mais fáceis e intuitivas. Vamos explorar algumas das principais funcionalidades do lubridate em mais detalhes, com exemplos práticos:\n\n4.4.3.1 4.4.3.1 Instalação e Carregamento do Lubridate\nAntes de usar o lubridate, é necessário instalá-lo e carregá-lo no R. Para isso, utilize o comando install.packages(\"lubridate\") para a instalação e library(lubridate) para o carregamento do pacote. Essas etapas devem ser executadas apenas uma vez.\n\n\n4.4.3.2 4.4.3.2 Criando Datas\nO lubridate torna a criação de datas simples e flexível. Podemos criar datas usando diferentes funções, dependendo do formato dos seus dados. Além da já mencionada ymd() para datas no formato “ano-mês-dia,” também podemos utilizar:\n\nmdy() para datas no formato “mês-dia-ano.”\ndmy() para datas no formato “dia-mês-ano.”\n\nEssas funções ajudam a evitar confusões em relação ao formato das datas, tornando o processo de entrada de dados mais seguro. Veja um exemplo:\n\n\nCarregando pacotes exigidos: lubridate\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:data.table':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\n\n\n[1] \"2023-08-21\"\n\n\n\n\n[1] \"2023-08-21\"\n\n\n\n\n[1] \"2023-08-21\"\n\n\n\n\n4.4.3.3 4.4.3.3 Operações com Datas\nOperações com datas, como adição e subtração de dias, semanas, meses ou anos, são realizadas de forma mais clara e intuitiva no lubridate. O pacote fornece funções específicas para isso, como days(), weeks(), months(), e years(). Isso permite que executemos operações como:\n\n\n[1] \"2023-08-28\"\n\n\n\n\n[1] \"2023-06-21\"\n\n\nEssa sintaxe simplificada torna as operações com datas mais legíveis e menos propensas a erros.\n\n\n4.4.3.4 4.4.3.4 Extraindo Informações de Datas\nO lubridate permite extrair facilmente informações de datas. Com funções como year(), month(), e day(), você pode obter o ano, mês ou dia de uma data específica. Além disso, é possível extrair informações mais detalhadas, como hora, minuto, e segundo, caso necessário. Isso é particularmente útil ao lidar com séries temporais ou análises de eventos temporais específicos. Veja exemplos:\n\n\n[1] 2023\n\n\n\n\n[1] 8\n\n\n\n\n[1] 21\n\n\n\n\n[1] 15\n\n\n\n\n[1] 30\n\n\n\n\n[1] 45\n\n\n\n\n4.4.3.5 4.4.3.5 Funções de Resumo de Datas\nO lubridate oferece funções que auxiliam na análise e resumo de datas. Podemos calcular a diferença entre duas datas com facilidade, obtendo o resultado em dias, semanas, meses ou anos. Isso é útil em cenários em que é preciso medir a duração entre eventos ou calcular intervalos de tempo:\n\n\n[1] -6\n\n\n\n\n[1] -3628800\n\n\n\n\n4.4.3.6 4.4.3.6 Lidar com Fusos Horários\nPara situações que envolvem fusos horários, o lubridate facilita a manipulação, permitindo a converção de datas entre fusos e calcule diferenças de tempo em fusos diferentes. Isso é especialmente valioso em análises que abrangem regiões geográficas distintas ou quando é necessário considerar fusos horários em análises de eventos globais.\n\nConverter uma Data para um Fuso Horário Específico: Imagine que temos uma data em um fuso horário específico e desejamos convertê-la para outro fuso horário. O lubridate facilita essa tarefa usando a função with_tz(). Veja um exemplo:\n\n\n\n[1] \"2023-08-21 12:00:00 EDT\"\n\n\n\n\n[1] \"2023-08-21 17:00:00 BST\"\n\n\nNeste exemplo, convertemos uma data de Nova Iorque para Londres.\n\nCalcular a Diferença de Tempo entre Datas em Fusos Horários Diferentes:\n\nCalcular a diferença de tempo entre duas datas em fusos horários diferentes pode ser útil para determinar a sincronização de eventos em locais geograficamente distintos. O lubridate permite isso com facilidade:\n\n\n[1] 0\n\n\n\nTrabalhar com Fusos Horários em Data Frames: Em muitos casos, você pode ter um conjunto de dados com datas em diferentes fusos horários. O lubridate permite a manipulação desses dados em um Data Frame de forma eficiente. Suponha que temos um Data Frame chamado dados com datas em diferentes fusos horários:\n\n\n\n      nome                data            data_utc\n1 Evento 1 2023-08-21 12:00:00 2023-08-21 16:00:00\n2 Evento 2 2023-08-21 12:00:00 2023-08-21 16:00:00\n\n\nNeste exemplo, convertemos todas as datas no Data Frame para o fuso horário UTC, criando uma nova coluna chamada data_utc.\nLidar com fusos horários em análises de dados é fundamental para garantir que as informações temporais sejam precisas e consistentes, especialmente em cenários globais ou quando eventos ocorrem em locais diferentes ao redor do mundo. O pacote lubridate no R simplifica significativamente essa tarefa, tornando a manipulação de datas com fusos horários uma tarefa mais clara e eficiente."
  },
  {
    "objectID": "04_transfomacao-de-dados.html#exercícios",
    "href": "04_transfomacao-de-dados.html#exercícios",
    "title": "4  4 Transformação de dados",
    "section": "4.5 4.5 Exercícios",
    "text": "4.5 4.5 Exercícios\n\nUtilizando o banco de dados car_crash:\n\n\n\n         data  horario n_da_ocorrencia tipo_de_ocorrencia    km    trecho\n1: 01/01/2010 04:21:00              18         sem vítima   167 BR-393/RJ\n2: 01/01/2010 02:13:00              20         sem vítima 269,5 BR-116/PR\n3: 01/01/2010 03:35:00     000024/2010         sem vítima    77 BR-290/RS\n4: 01/01/2010 07:31:00     000038/2010         sem vítima    52 BR-116/RS\n5: 01/01/2010 04:57:00     000027/2010         sem vítima    33 BR-290/RS\n6: 01/01/2010 08:02:00     000042/2010         sem vítima    24 BR-290/RS\n   sentido              lugar_acidente tipo_de_acidente automovel bicicleta\n1:   Norte              Rodovia do Aço       Derrapagem         1        NA\n2:     Sul Autopista Regis Bittencourt Colisão Traseira         2        NA\n3:   Norte                     Concepa  COLISÃO LATERAL         2         0\n4:   Norte                     Concepa    QUEDA DE MOTO         0         0\n5:   Norte                     Concepa    QUEDA DE MOTO         0         0\n6:     Sul                     Concepa   SAÍDA DE PISTA         1         0\n   caminhao moto onibus outros tracao_animal transporte_de_cargas_especiais\n1:       NA   NA     NA     NA            NA                             NA\n2:       NA   NA     NA     NA            NA                             NA\n3:        0    0      0      0             0                              0\n4:        0    1      0      0             0                              0\n5:        0    1      0      0             0                              0\n6:        0    0      0      0             0                              0\n   trator_maquinas utilitarios ilesos levemente_feridos moderadamente_feridos\n1:              NA          NA      1                 0                     0\n2:              NA          NA      3                NA                    NA\n3:               0           0      2                 0                     0\n4:               0           0      1                 0                     0\n5:               0           0      1                 0                     0\n6:               0           0      1                 0                     0\n   gravemente_feridos mortos\n1:                  0      0\n2:                 NA     NA\n3:                  0      0\n4:                  0      0\n5:                  0      0\n6:                  0      0\n\n\n\nformate a coluna data em uma data (dd-mm-yyyy)\n\n\n\n            data data_formatada\n   1: 01/01/2010     2010-01-01\n   2: 01/01/2011     2011-01-01\n   3: 01/01/2012     2012-01-01\n   4: 01/01/2013     2013-01-01\n   5: 01/01/2014     2014-01-01\n  ---                          \n4947: 31/12/2018     2018-12-31\n4948: 31/12/2019     2019-12-31\n4949: 31/12/2020     2020-12-31\n4950: 31/12/2021     2021-12-31\n4951: 31/12/2022     2022-12-31\n\n\n\nformate a coluna horario para o horário do acidente (hh:mm:ss)\n\n\n\n        horario horario_acidente\n    1: 04:21:00         04:21:00\n    2: 02:13:00         02:13:00\n    3: 03:35:00         03:35:00\n    4: 07:31:00         07:31:00\n    5: 04:57:00         04:57:00\n   ---                          \n44265: 23:23:36         23:23:36\n44266: 21:41:52         21:41:52\n44267: 19:26:09         19:26:09\n44268: 05:05:55         05:05:55\n44269: 12:12:09         12:12:09\n\n\n\nQual o mês com maior quantidade de acidentes?\n\n\n\n# A tibble: 12 × 2\n     mes     n\n   &lt;dbl&gt; &lt;int&gt;\n 1    12 85308\n 2     1 82507\n 3    10 74716\n 4     6 72276\n 5    11 71677\n 6     3 70696\n 7     2 68783\n 8     5 68626\n 9     9 68586\n10     7 68392\n11     8 66596\n12     4 66398\n\n\n\nQual ano ocorreram mais acidentes?\n\n\n\n# A tibble: 14 × 2\n     ano     n\n   &lt;dbl&gt; &lt;int&gt;\n 1  2015 74458\n 2  2017 70107\n 3  2016 70104\n 4  2014 67816\n 5  2019 64853\n 6  2018 63970\n 7  2020 62632\n 8  2021 62498\n 9  2012 61090\n10  2013 60953\n11  2011 60455\n12  2022 56838\n13  2010 54837\n14  2023 33950\n\n\n\nQual horário acontecem menos acidentes?\n\n\n\n# A tibble: 1,440 × 2\n   hora      n\n   &lt;chr&gt; &lt;int&gt;\n 1 02:39   219\n 2 01:56   220\n 3 02:58   221\n 4 03:04   221\n 5 02:37   222\n 6 02:43   227\n 7 02:01   229\n 8 02:32   229\n 9 03:21   229\n10 03:13   230\n# ℹ 1,430 more rows\n\n\n\nQual a média, desvio padrão, mediana, Q1 e Q3 para a quantidade de indivíduos classificados como levemente feridos por mês/ano?\n\n\n\n# A tibble: 163 × 9\n   `mes/ano`     n media    Q1 mediana    Q3   min   max    sd\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1 2010/01    1880 0.809     0       1     1     0    41 1.42 \n 2 2010/02    1676 0.816     0       1     1     0    30 1.29 \n 3 2010/03    1844 0.741     0       1     1     0    26 1.12 \n 4 2010/04    1842 0.840     0       1     1     0     7 1.00 \n 5 2010/05    2044 0.776     0       1     1     0    19 1.04 \n 6 2010/06    1777 0.757     0       1     1     0    12 0.992\n 7 2010/07    1929 0.802     0       1     1     0    21 1.25 \n 8 2010/08    1776 0.819     0       1     1     0    51 1.52 \n 9 2010/09    2119 0.748     0       1     1     0     9 0.977\n10 2010/10    2030 0.807     0       1     1     0    39 1.29 \n# ℹ 153 more rows\n\n\n\nQuantos acidentes com vítimas fatais aconteceram, por mês/ano, em mediana entre as 6:00am e 11:59am.\n\n\n\n# A tibble: 159 × 2\n   `mes/ano`     n\n   &lt;chr&gt;     &lt;int&gt;\n 1 2010/01     308\n 2 2010/02     325\n 3 2010/03     333\n 4 2010/04     380\n 5 2010/05     443\n 6 2010/06     381\n 7 2010/07     406\n 8 2010/08     348\n 9 2010/09     426\n10 2010/10     417\n# ℹ 149 more rows"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#junção-de-dados",
    "href": "04_transfomacao-de-dados.html#junção-de-dados",
    "title": "4  4 Transformação de dados",
    "section": "4.6 4.6 Junção de dados",
    "text": "4.6 4.6 Junção de dados\nÉ raro que uma análise de dados envolva apenas uma única fonte de dados. Normalmente, você possui vários data.frames e precisa uni-los para realizar as análises que lhe interessam.\n\n4.6.1 4.6.1 Dados\nPara a aula de hoje, utilizaremos o pacote nycflights13, o qual contém dados relacionados a voos na cidade de Nova York.\n\n\n4.6.2 4.6.2 Chaves Primárias e Chaves Estrangeiras\nPara compreender os principais tipos de junções de banco de dados, é fundamental entender como duas tabelas podem ser conectadas por meio de um par de chaves, dentro de cada tabela. Vamos estudar brevemente sobre os dois tipos principais de chaves, para isso, vamos utilizar os conjuntos de dados do pacote nycflights13. Esse pacote apresenta cinco tabelas com informações distintas acerca de vôos em New York.\n\n4.6.2.1 4.6.2.1 Chaves primárias e estrangeiras\nToda junção envolve um par de chaves: uma chave primária e uma chave estrangeira. Uma chave primária é uma variável ou conjunto de variáveis que identifica cada observação de forma única. Quando mais de uma variável é necessária, a chave é chamada de chave composta. Por exemplo, no nycfights13:\n\nA tabela airlines registra dois dados sobre cada companhia aérea: seu código de operadora e seu nome completo. Você pode identificar uma companhia aérea pelo seu código de operadora de duas letras, tornando o código de operadora (carrier) a chave primária (primary key).\n\n\n\nCarregando pacotes exigidos: nycflights13\n\n\n\n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\n\nA tabela airports, por sua vez, registra dados sobre cada aeroporto. Podemos identificar cada aeroporto pelo seu código de aeroporto de três letras, tornando o código FAA a chave primária.\n\n\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\n\nA tabela planes registra dados sobre cada aeronave. Podemos identificar uma aeronave pelo seu número de cauda (tailnum), tornando o número de cauda a chave primária.\n\n\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\n\n\nA tabela weather registra dados sobre o clima nos aeroportos de origem. Você pode identificar cada observação pela combinação de localização e horário, tornando a origem (origin) e o horário (time_hour) a chave primária composta.\n\n\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nUma chave estrangeira é uma variável (ou conjunto de variáveis) que corresponde a uma chave primária em outra tabela. Por exemplo:\n\nflights$tailnum é uma chave estrangeira que corresponde à chave primária planes$tailnum.\nflights$carrier é uma chave estrangeira que corresponde à chave primária airlines$carrier.\n\nPodemos ver como cada banco de dados está relacionado com os demais na Figura abaixo. \n\nA Tabela “flights” está vinculada à tabela “planes” por meio de uma variável única, “tailnum”.\nA Tabela “flights” está vinculada à tabela “airlines” por meio de uma variável única, “carrier”.\nA Tabela “flights” está vinculada à tabela “airports” de duas maneiras: por meio das variáveis “origin” e “dest”.\nA Tabela “flights” está vinculada à tabela “weather” por meio das variáveis “origin” (localização), “year”, “month”, “day” e “hour”.\n\nNote que as chaves primárias e estrangeiras têm quase sempre os mesmos nomes, o que, como veremos em breve, tornará sua vida de junção muito mais fácil. Também vale a pena observar a relação oposta: quase todos os nomes de variáveis usados em várias tabelas têm o mesmo significado em cada lugar. Há apenas uma exceção: o ano (year) significa o ano de partida nos voos (flights) e o ano de fabricação nas aeronaves (planes).\n\n\n4.6.2.2 4.6.2.2 Verificação de Chaves Primárias\nAgora que identificamos as chaves primárias em cada tabela, é uma boa prática verificar se elas realmente identificam de forma única cada observação. Uma maneira de fazer isso é contar as chaves primárias e procurar entradas em que n() seja maior que um.\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt;\n\n\n\n\n# A tibble: 0 × 3\n# ℹ 3 variables: time_hour &lt;dttm&gt;, origin &lt;chr&gt;, n &lt;int&gt;\n\n\nAlém de termos chave primária única, é importante que não haja valores faltantes, se um valor estiver ausente, ele não poderá identificar uma observação.\n\n\n# A tibble: 0 × 9\n# ℹ 9 variables: tailnum &lt;chr&gt;, year &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;,\n#   model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\n# A tibble: 0 × 15\n# ℹ 15 variables: origin &lt;chr&gt;, year &lt;int&gt;, month &lt;int&gt;, day &lt;int&gt;, hour &lt;int&gt;,\n#   temp &lt;dbl&gt;, dewp &lt;dbl&gt;, humid &lt;dbl&gt;, wind_dir &lt;dbl&gt;, wind_speed &lt;dbl&gt;,\n#   wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;, visib &lt;dbl&gt;,\n#   time_hour &lt;dttm&gt;\n\n\n\n\n\n4.6.3 4.6.3 Combinando dados\nBom, agora que compreendemos a importância de chaves vamos agora introdur dois tipos importantes de junções:\n\nJunções mutacionais, que adicionam novas variáveis a um conjunto de dados a partir de observações correspondentes em outro banco de dados. São elas:\n\ninner_join;\nfull_join;\nleft_join;\nright_join.\n\nJunções de filtragem, que filtram observações de um quadro de dados com base em se elas correspondem ou não a uma observação em outro banco de dados.\n\nsemi_join();\nanti_join().\n\n\n\n\n4.6.4 4.6.4 Junções Mutacionais\nUma junção mutacional (mutating join) permite combinar variáveis de dois conjuntos de dados: primeiro, ele corresponde às observações através de suas chaves e, em seguida, copia as variáveis de um conjunto de dados para o outro. Assim como a função mutate(), as funções de join adicionam variáveis à direita, portanto, se o seu conjunto de dados tiver muitas variáveis, as novas variáveis não serão imediatamente visíveis. Para facilitar a compreensão dos exemplos a seguir, criaremos um conjunto de dados mais suscinto com apenas seis variáveis, e apenas com vôos com distância superior à 1000km:\n\n\n# A tibble: 51,695 × 6\n    year time_hour           origin dest  tailnum carrier\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013 2013-01-01 06:00:00 JFK    LAX   N29129  UA     \n 2  2013 2013-01-01 06:00:00 EWR    SFO   N53441  UA     \n 3  2013 2013-01-01 06:00:00 EWR    LAS   N76515  UA     \n 4  2013 2013-01-01 06:00:00 JFK    SFO   N532UA  UA     \n 5  2013 2013-01-01 06:00:00 EWR    PHX   N807AW  US     \n 6  2013 2013-01-01 06:00:00 JFK    PHX   N535UW  US     \n 7  2013 2013-01-01 06:00:00 EWR    LAX   N33289  UA     \n 8  2013 2013-01-01 06:00:00 EWR    SNA   N38727  UA     \n 9  2013 2013-01-01 06:00:00 JFK    LAS   N558JB  B6     \n10  2013 2013-01-01 07:00:00 JFK    SFO   N705TW  DL     \n# ℹ 51,685 more rows\n\n\n\n4.6.4.1 4.6.4.1 Left Join\nO left join retorna todas as linhas do primeiro conjunto de dados (tabela à esquerda) e as linhas correspondentes do segundo conjunto de dados (tabela à direita), se houver correspondência. Se não houver correspondência na tabela à direita, os valores serão preenchidos com NA (valores ausentes).\n Suponha que gostariamos de adicionar o nome completo da companhia aerea no nosso banco de dados. Para isso, precisamos combinar as informações de flights2 com airlines.\n\n\nJoining with `by = join_by(carrier)`\n\n\nNote que, por definição, a função buscou a chave primária como carrier. Nesse caso, como temos apenas uma chave, é viável fazermos isso. Contudo, é uma boa prática definirmos qual a chave que gostaríamos de combinar os bancos de dados.\n\n\n# A tibble: 51,695 × 7\n    year time_hour           origin dest  tailnum carrier name                 \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                \n 1  2013 2013-01-01 06:00:00 JFK    LAX   N29129  UA      United Air Lines Inc.\n 2  2013 2013-01-01 06:00:00 EWR    SFO   N53441  UA      United Air Lines Inc.\n 3  2013 2013-01-01 06:00:00 EWR    LAS   N76515  UA      United Air Lines Inc.\n 4  2013 2013-01-01 06:00:00 JFK    SFO   N532UA  UA      United Air Lines Inc.\n 5  2013 2013-01-01 06:00:00 EWR    PHX   N807AW  US      US Airways Inc.      \n 6  2013 2013-01-01 06:00:00 JFK    PHX   N535UW  US      US Airways Inc.      \n 7  2013 2013-01-01 06:00:00 EWR    LAX   N33289  UA      United Air Lines Inc.\n 8  2013 2013-01-01 06:00:00 EWR    SNA   N38727  UA      United Air Lines Inc.\n 9  2013 2013-01-01 06:00:00 JFK    LAS   N558JB  B6      JetBlue Airways      \n10  2013 2013-01-01 07:00:00 JFK    SFO   N705TW  DL      Delta Air Lines Inc. \n# ℹ 51,685 more rows\n\n\n\n\n4.6.4.2 4.6.4.2 Right Join\nO right_join retorna apenas as linhas do primeiro conjunto de dados (tabela à esquerda) se houver correspondência com o segundo conjunto de dados (tabela à direita). Se não houver correspondência na tabela à esquerda, os valores serão preenchidos com NA (valores ausentes).\n\n\n\nDescrição da Imagem\n\n\nSuponha que, temos interesse em buscar informações acerca dos dos vôos realizados pelos aviões em flights2. Para isso, basta unirmos as tabelas planes com flights2.\n\n\n# A tibble: 50,720 × 14\n   year.x time_hour           origin dest  tailnum carrier year.y type          \n    &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;         \n 1   2013 2013-01-01 06:00:00 JFK    LAX   N29129  UA        1998 Fixed wing mu…\n 2   2013 2013-01-01 06:00:00 EWR    SFO   N53441  UA          NA Fixed wing mu…\n 3   2013 2013-01-01 06:00:00 EWR    LAS   N76515  UA        2008 Fixed wing mu…\n 4   2013 2013-01-01 06:00:00 EWR    PHX   N807AW  US        1999 Fixed wing mu…\n 5   2013 2013-01-01 06:00:00 JFK    PHX   N535UW  US        2009 Fixed wing mu…\n 6   2013 2013-01-01 06:00:00 EWR    LAX   N33289  UA        2004 Fixed wing mu…\n 7   2013 2013-01-01 06:00:00 EWR    SNA   N38727  UA        1999 Fixed wing mu…\n 8   2013 2013-01-01 06:00:00 JFK    LAS   N558JB  B6        2003 Fixed wing mu…\n 9   2013 2013-01-01 07:00:00 JFK    SFO   N705TW  DL        1997 Fixed wing mu…\n10   2013 2013-01-01 07:00:00 JFK    LAX   N627VA  VX        2006 Fixed wing mu…\n# ℹ 50,710 more rows\n# ℹ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\n4.6.4.3 4.6.4.3 Inner Join\nO inner join retorna apenas as linhas que têm correspondências em ambos os conjuntos de dados. Ou seja, ele preserva apenas as observações com chaves correspondentes em ambas as tabelas.\n\n\n\nDescrição da Imagem\n\n\nSuponha que, temos interesse em buscar informações acerca dos aeroportos de origem realizados pelos aviões em flights2. Porém, apenas temos interesse em informações que aparecem em ambos bancos. Para isso, basta unirmos as tabelas flights2 com airports.\n\n\n# A tibble: 51,695 × 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1  2013 2013-01-01 06:00:00 JFK    LAX   N29129  UA      John F Ke…  40.6 -73.8\n 2  2013 2013-01-01 06:00:00 EWR    SFO   N53441  UA      Newark Li…  40.7 -74.2\n 3  2013 2013-01-01 06:00:00 EWR    LAS   N76515  UA      Newark Li…  40.7 -74.2\n 4  2013 2013-01-01 06:00:00 JFK    SFO   N532UA  UA      John F Ke…  40.6 -73.8\n 5  2013 2013-01-01 06:00:00 EWR    PHX   N807AW  US      Newark Li…  40.7 -74.2\n 6  2013 2013-01-01 06:00:00 JFK    PHX   N535UW  US      John F Ke…  40.6 -73.8\n 7  2013 2013-01-01 06:00:00 EWR    LAX   N33289  UA      Newark Li…  40.7 -74.2\n 8  2013 2013-01-01 06:00:00 EWR    SNA   N38727  UA      Newark Li…  40.7 -74.2\n 9  2013 2013-01-01 06:00:00 JFK    LAS   N558JB  B6      John F Ke…  40.6 -73.8\n10  2013 2013-01-01 07:00:00 JFK    SFO   N705TW  DL      John F Ke…  40.6 -73.8\n# ℹ 51,685 more rows\n# ℹ 4 more variables: alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\n4.6.4.4 4.6.4.4 Full Join\nO full_join retorna todas as linhas de ambos os conjuntos de dados (tabelas à esquerda e à direita). Ele preenche com NA aqueles valores que não têm correspondência em uma das tabelas.\n\n\n\nDescrição da Imagem\n\n\nSuponha que, temos interesse em buscar informações acerca dos aeroportos de destino realizados pelos aviões em flights2. Porém, apenas temos interesse em todas informações que aparecem em ambos bancos. Para isso, basta unirmos as tabelas flights2 com airports.\n\n\n# A tibble: 53,137 × 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1  2013 2013-01-01 06:00:00 JFK    LAX   N29129  UA      Los Angel…  33.9 -118.\n 2  2013 2013-01-01 06:00:00 EWR    SFO   N53441  UA      San Franc…  37.6 -122.\n 3  2013 2013-01-01 06:00:00 EWR    LAS   N76515  UA      Mc Carran…  36.1 -115.\n 4  2013 2013-01-01 06:00:00 JFK    SFO   N532UA  UA      San Franc…  37.6 -122.\n 5  2013 2013-01-01 06:00:00 EWR    PHX   N807AW  US      Phoenix S…  33.4 -112.\n 6  2013 2013-01-01 06:00:00 JFK    PHX   N535UW  US      Phoenix S…  33.4 -112.\n 7  2013 2013-01-01 06:00:00 EWR    LAX   N33289  UA      Los Angel…  33.9 -118.\n 8  2013 2013-01-01 06:00:00 EWR    SNA   N38727  UA      John Wayn…  33.7 -118.\n 9  2013 2013-01-01 06:00:00 JFK    LAS   N558JB  B6      Mc Carran…  36.1 -115.\n10  2013 2013-01-01 07:00:00 JFK    SFO   N705TW  DL      San Franc…  37.6 -122.\n# ℹ 53,127 more rows\n# ℹ 4 more variables: alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\n\n4.6.5 4.6.5 Junções de Filtragem\nComo o próprio nome sugere, a ação principal de uma junção de filtragem é filtrar as linhas. Existem dois tipos: semi-junções e anti-junções. Semi-junções mantêm todas as linhas em x que têm uma correspondência em y. Por exemplo, poderíamos usar uma semi-junção para filtrar o conjunto de dados de aeroportos (airports) para mostrar apenas os aeroportos de origem:\n\n\n# A tibble: 2 × 8\n  faa   name                  lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n\n\nAnti-junções são o oposto: elas retornam todas as linhas em x que não têm correspondência em y. São úteis para encontrar valores ausentes que são implícitos nos dados. Valores implicitamente ausentes não aparecem como NAs, mas sim existem apenas como uma ausência. Por exemplo, podemos encontrar linhas ausentes em aeroportos procurando voos que não tenham um aeroporto de destino correspondente:\n\n\n# A tibble: 4 × 1\n  dest \n  &lt;chr&gt;\n1 BQN  \n2 SJU  \n3 STT  \n4 PSE"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#exercícios-1",
    "href": "04_transfomacao-de-dados.html#exercícios-1",
    "title": "4  4 Transformação de dados",
    "section": "4.7 4.7 Exercícios",
    "text": "4.7 4.7 Exercícios\n\nPara vôos com atraso superior a 24 horas em flights, verifique as condições climáticas em weather. Há algum padrão? Quais os meses do ano em que você encontra os maiores atrasos?\n\n\n\nWarning in left_join(., weather, by = c(\"year\", \"month\", \"day\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n# A tibble: 6 × 2\n  month total_atrasos\n  &lt;int&gt;         &lt;int&gt;\n1     7        684804\n2    12        676632\n3     6        642168\n4     4        605641\n5     8        538609\n6     3        506040\n\n\n\nEncontre os 20 destinos mais comuns e identifique seu aeroporto. Qual a temperatura média (mensal) em Celcius desses lugares? E a precipitação média, em cm?\n\n\n\nJoining with `by = join_by(origin, time_hour)`\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 20 × 4\n# Groups:   dest [20]\n   dest  name                               media_temp media_precip\n   &lt;chr&gt; &lt;chr&gt;                                   &lt;dbl&gt;        &lt;dbl&gt;\n 1 ABQ   Albuquerque International Sunport        16.0      0.0136 \n 2 ACK   Nantucket Mem                            23.5      0.0116 \n 3 ALB   Albany Intl                              10.1      0.00629\n 4 ANC   Ted Stevens Anchorage Intl               28.7      0      \n 5 ATL   Hartsfield Jackson Atlanta Intl          14.0      0.0123 \n 6 AUS   Austin Bergstrom Intl                    13.9      0.0138 \n 7 AVL   Asheville Regional Airport               18.9      0.0154 \n 8 BDL   Bradley Intl                             12.8      0.0125 \n 9 BGR   Bangor Intl                              16.4      0.00563\n10 BHM   Birmingham Intl                          15.3      0.0208 \n11 BNA   Nashville Intl                           14.8      0.0119 \n12 BOS   General Edward Lawrence Logan Intl       14.0      0.0124 \n13 BTV   Burlington Intl                          14.0      0.0123 \n14 BUF   Buffalo Niagara Intl                     13.2      0.00970\n15 BUR   Bob Hope                                 13.4      0.00688\n16 BWI   Baltimore Washington Intl                11.2      0.00990\n17 BZN   Gallatin Field                           14.3      0      \n18 CAE   Columbia Metropolitan                    13.8      0.0100 \n19 CAK   Akron Canton Regional Airport            15.2      0.0132 \n20 CHO   Charlottesville-Albemarle                11.2      0.00684\n\n\n\nInclua uma coluna com a cia aérea na tabela planes. Quantas companhias áreas voaram cada avião naquele ano?\n\n\n\n`summarise()` has grouped output by 'tailnum', 'carrier'. You can override\nusing the `.groups` argument.\n\n\n[1] 336776\n\n\n[1] 336776\n\n\n# A tibble: 3,339 × 12\n   tailnum  year type      manufacturer model engines seats speed engine carrier\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  \n 1 N10156   2004 Fixed wi… EMBRAER      EMB-…       2    55    NA Turbo… EV     \n 2 N102UW   1998 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n 3 N103US   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n 4 N104UW   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n 5 N10575   2002 Fixed wi… EMBRAER      EMB-…       2    55    NA Turbo… EV     \n 6 N105UW   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n 7 N107US   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n 8 N108UW   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n 9 N109UW   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n10 N110UW   1999 Fixed wi… AIRBUS INDU… A320…       2   182    NA Turbo… US     \n# ℹ 3,329 more rows\n# ℹ 2 more variables: name &lt;chr&gt;, total_voos &lt;int&gt;\n\n\nInclua a latitude e longitude de cada origem destino na tabela flights.\n\n\n# A tibble: 336,776 × 6\n   origin dest  origin_lat origin_lon dest_lat dest_lon\n   &lt;chr&gt;  &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 EWR    IAH         40.7      -74.2     30.0    -95.3\n 2 LGA    IAH         40.8      -73.9     30.0    -95.3\n 3 JFK    MIA         40.6      -73.8     25.8    -80.3\n 4 JFK    BQN         40.6      -73.8     NA       NA  \n 5 LGA    ATL         40.8      -73.9     33.6    -84.4\n 6 EWR    ORD         40.7      -74.2     42.0    -87.9\n 7 EWR    FLL         40.7      -74.2     26.1    -80.2\n 8 LGA    IAD         40.8      -73.9     38.9    -77.5\n 9 JFK    MCO         40.6      -73.8     28.4    -81.3\n10 LGA    ORD         40.8      -73.9     42.0    -87.9\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "04_transfomacao-de-dados.html#organização-de-dados",
    "href": "04_transfomacao-de-dados.html#organização-de-dados",
    "title": "4  4 Transformação de dados",
    "section": "4.8 4.8 Organização de dados",
    "text": "4.8 4.8 Organização de dados\nCompreender a organização de dados é fundamental para análises estatísticas eficazes. Quando trabalhamos com dados em R, é importante seguir as regras que tornam um conjunto de dados tidy (organizado), o que facilita o processamento e a interpretação dos dados. Existem três regras inter-relacionadas que tornam um conjunto de dados tidy:\n\nCada variável é uma coluna; cada coluna é uma variável: Isso significa que cada característica ou medida que você está analisando deve ser representada por uma coluna separada no conjunto de dados.\n\n\nPor exemplo, se você estiver trabalhando com dados de pacientes, as variáveis como idade, gênero, altura e peso devem ser colunas separadas.\n\n\nCada observação é uma linha; cada linha é uma observação: Cada linha do conjunto de dados deve representar uma única observação, caso ou instância. Isso garante que os dados estejam organizados de maneira que seja fácil identificar e comparar diferentes casos.\n\n\nPor exemplo, cada linha pode representar um paciente individual em um conjunto de dados médicos.\n\n\nCada valor é uma célula; cada célula é um único valor: Cada célula no conjunto de dados deve conter um único valor. Isso significa que não deve haver combinações de valores em uma única célula. Cada célula deve conter uma informação única e específica relacionada à variável e à observação correspondente.\n\nAo seguir essas três regras, você cria um conjunto de dados tidy que é fácil de manipular, visualizar e analisar. Essa organização facilita a utilização de funções como pivot_longer e pivot_wider para remodelar os dados quando necessário a fim de adaptá-los às necessidades de sua análise estatística em R\n\n\n\nDescrição da Imagem\n\n\n\n4.8.1 4.8.1 Pivotagem\nPivotar, como o próprio nome sugere, é um processo de transformação de um conjunto de dados, no qual as colunas e linhas são reorganizadas de tal forma que os valores que originalmente estavam dispostos em linhas agora são apresentados como colunas, e vice-versa. Esse procedimento é fundamental para preparar e organizar dados para análises estatísticas e visualizações mais eficazes.\n\n4.8.1.1 4.8.1.1 Formato Wide (Largo) e Formato Long (Longo)\nEm ciência de dados, é comum falarmos em dois formatos principais: o formato wide (largo) e o formato long (longo). Essas representações são especialmente úteis para diferentes tipos de análises e visualizações.\n\nFormato Wide (Largo): Nesse formato, os dados são organizados de forma que cada variável é representada por uma coluna separada e cada observação (ou instância) ocupa uma única linha. Isso significa que as informações são distribuídas em várias colunas, tornando-o mais adequado para conjuntos de dados com poucas variáveis, onde as informações são bem condensadas.\n\n\n\n\nDescrição da Imagem\n\n\n\nFormato Long (Longo): Já no formato long (ou longo), os dados são organizados de maneira que as variáveis estão empilhadas em uma única coluna, enquanto uma coluna adicional é usada para indicar o nome da variável. Cada observação é representada por uma linha separada. Esse formato é ideal quando se trabalha com conjuntos de dados mais complexos, nos quais as informações estão espalhadas em várias categorias ou momentos de tempo, por exemplo.\n\n\n\n\nDescrição da Imagem\n\n\n\n\n\n4.8.2 4.8.2 Exercício\nCom os dois conjuntos de dados abaixo, defina qual a versão organizada dos dados.\n\nConjunto 1:\n\n\nWide:\n\n\n\n\nNome\nIdade\nPeso (kg)\nGênero\n\n\n\n\nAlice\n34\n52.16\nFeminino\n\n\nBob\n35\n72.57\nMasculino\n\n\nChristine\n38\n56.70\nFeminino\n\n\n\n\nLong:\n\n\n\n\nNome\nVariável\nValor\n\n\n\n\nAlice\nIdade\n34\n\n\nAlice\nPeso (kg)\n52.16\n\n\nAlice\nGênero\nFeminino\n\n\nBob\nIdade\n35\n\n\nBob\nPeso (kg)\n72.57\n\n\nBob\nGênero\nMasculino\n\n\nChristine\nIdade\n38\n\n\nChristine\nPeso (kg)\n56.70\n\n\nChristine\nGênero\nFeminino\n\n\n\n\nConjunto 2:\n\n\nWide:\n\n\n\n\n\n\n\n\n\n\n\nTamanho da Pedra\nTratamento A - Recuperados\nTratamento A - Falhas\nTratamento B - Recuperados\nTratamento B - Falhas\n\n\n\n\nPequeno\n81\n6\n234\n36\n\n\nGrande\n192\n71\n55\n25\n\n\n\n\nLong:\n\n\n\n\nTamanho da Pedra\nTratamento\nRecuperado\nFalha\n\n\n\n\nPequena\nA\n81\n6\n\n\nPequena\nB\n234\n36\n\n\nGrande\nA\n192\n71\n\n\nGrande\nB\n55\n25\n\n\n\n\n\n4.8.3 4.8.2 Pivotando dados em R\nPara aprendermos sobre os tipos de pivot em R, vamos utilizar o banco de dados table1. Esse banco de dados possui dados de casos reportados de Tuberculose e o tamanho da população em dois anos para três países. Esses dados são provenientes dos dados who.\n\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n4.8.3.1 4.8.2.1 pivot_wider\nA função pivot_wider é usada para transformar um conjunto de dados de um formato longo para um formato largo. Isso é útil quando temos informações em uma única coluna que desejamos espalhar em várias colunas.\n\nSintaxe:\n\npivot_wider(data, names_from, values_from) - data: O conjunto de dados que você deseja transformar. - names_from: A coluna que contém os nomes das variáveis que você deseja espalhar. - values_from: A coluna que contém os valores correspondentes a essas variáveis.\nExemplo: Transformando em dados de table1 em wide.\n\nSuponha que queremos o número de casos por ano.\n\n\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\n\n4.8.3.2 4.8.2.2 pivot_longer\nA função pivot_longer é utilizada para transformar um conjunto de dados de um formato largo (wide) para um formato longo (long). Isso é útil quando temos variáveis espalhadas em várias colunas e desejamos organizar esses dados em uma única coluna, tornando-os mais adequados para análises e visualizações. Geralmente, usamos pivot_longer quando temos variáveis empilhadas em diferentes colunas e queremos reunir essas informações em uma única coluna.\n\nSintaxe: pivot_longer(data, cols, names_to, values_to)\n\ndata: O conjunto de dados que você deseja transformar.\ncols: As colunas que você deseja empilhar no formato longo.\nnames_to: O nome da nova coluna que irá conter os nomes das variáveis empilhadas.\nvalues_to: O nome da nova coluna que irá conter os valores das variáveis empilhadas.\n\n\nExemplo: Transformando em dados de table1 em long.\n\nSuponha que queremos os casos e o tamanho da população como uma variável.\n\n\n\n# A tibble: 12 × 4\n   country      year variavel      tamanho\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n\n4.8.3.3 4.8.2.3 Separando observações\nA função separate() divide uma única coluna em várias colunas, dividindo-a sempre que um caractere separador aparece. Vamos considerar o exemplo da table3:\n\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\nNote que a coluna rate é na verdade uma coluna onde temos os casos e a população separadas por “/”. Podemos separar essa coluna em duas utilizando a função separate.\nCaso tenhamos interesse em uni-las novamente, podemos utilizar a função unite.\n\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\n\n\n4.8.4 4.8.3 Exemplo\nVamos utilizar os dados de notificações de casos provenientes do site do WHO.\nEste conjunto de dados exemplifica uma situação comum na vida real, onde os dados estão desorganizados e não estão em um formato adequado para análises. Ele apresenta colunas redundantes, códigos de variáveis incomuns e uma abundância de valores ausentes. Em suma, está em uma condição “bagunçada” e precisaremos de várias etapas para limpá-lo e organizá-lo de forma apropriada. Assim como o pacote dplyr, o tidyr foi projetado para que cada função tenha uma função específica e bem definida. Isso significa que, em cenários da vida real, você geralmente precisará encadear várias dessas funções em uma sequência lógica para obter os dados em um estado utilizável.\nO ponto de partida mais eficaz geralmente é reunir as colunas que não são consideradas variáveis. Vamos examinar o que temos:\n\nCountry (país), iso2 e iso3: Essas três colunas parecem redundantes e especificam o país de formas diferentes. Variável redundante.\nYear (ano): É claramente uma variável que representa o ano em que os dados foram registrados.\nOutras Colunas Não Identificadas: As colunas restantes, como “new_sp_m014”, “new_ep_m014” e “new_ep_f014”, não sabemos o que representam ainda. De acordo com a estrutura dos nomes das colunas, elas provavelmente contêm valores, não são variáveis.\n\nPortanto, nossa primeira tarefa é agrupar todas as colunas, desde “new_sp_m014” até “newrel_f65”, porque ainda não compreendemos completamente o que essas colunas representam. Chamaremos essa variável genérica de “chave”. Além disso, sabemos que as células dessas colunas representam a contagem de casos, então criaremos uma variável chamada “casos” para armazenar esses valores.\nÉ importante observar que há muitos valores ausentes nos dados atuais. Para facilitar a análise inicial, usaremos a função “values_drop_na” para nos concentrarmos apenas nos valores que estão presentes, deixando os valores ausentes de lado temporariamente.\nDessa forma, estaremos prontos para começar o processo de organização e limpeza desses dados desorganizados.\n\n\n# A tibble: 97,867 × 6\n   country     iso2  iso3   year chave        casos\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n 1 Afghanistan AF    AFG    1997 new_sp_m014      0\n 2 Afghanistan AF    AFG    1997 new_sp_m1524    10\n 3 Afghanistan AF    AFG    1997 new_sp_m2534     6\n 4 Afghanistan AF    AFG    1997 new_sp_m3544     3\n 5 Afghanistan AF    AFG    1997 new_sp_m4554     5\n 6 Afghanistan AF    AFG    1997 new_sp_m5564     2\n 7 Afghanistan AF    AFG    1997 new_sp_m65       0\n 8 Afghanistan AF    AFG    1997 new_sp_f014      5\n 9 Afghanistan AF    AFG    1997 new_sp_f1524    38\n10 Afghanistan AF    AFG    1997 new_sp_f2534    36\n# ℹ 97,857 more rows\n\n\nPara tentarmos entender a estrutura de chave, vamos contar ela.\n\n\n# A tibble: 56 × 2\n   chave            n\n   &lt;chr&gt;        &lt;int&gt;\n 1 new_ep_f014   1029\n 2 new_ep_f1524  1018\n 3 new_ep_f2534  1018\n 4 new_ep_f3544  1018\n 5 new_ep_f4554  1014\n 6 new_ep_f5564  1014\n 7 new_ep_f65    1011\n 8 new_ep_m014   1035\n 9 new_ep_m1524  1023\n10 new_ep_m2534  1017\n# ℹ 46 more rows\n\n\nSe olharmos o dicionário de variáveis, presente junto aos dados, estamos interessados nos casos, ou seja, nas variáveis descritas por new. Vamos então, filtrar nossos dados para manter apenas essas variáveis.\nAlém disso, o dicionário das variáveis nos informa o seguinte:\n\nAs três primeiras letras de cada coluna indicam se a coluna contém casos novos (new) ou antigos (old) de tuberculose.\nAs letras seguintes descrevem o tipo de tuberculose:\n\n“rel” indica casos de recaída.\n“ep” indica casos de tuberculose extrapulmonar.\n“sn” indica casos de tuberculose pulmonar que não puderam ser diagnosticados por esfregaço pulmonar (smear negative).\n“sp” indica casos de tuberculose pulmonar que puderam ser diagnosticados por esfregaço pulmonar (smear positive).\n\nA sexta letra indica o sexo dos pacientes com tuberculose, sendo “m” para masculino e “f” para feminino.\nOs números restantes representam os grupos etários. O conjunto de dados agrupa os casos em sete faixas etárias:\n\n“014” = 0 a 14 anos\n“1524” = 15 a 24 anos\n“2534” = 25 a 34 anos\n“3544” = 35 a 44 anos\n“4554” = 45 a 54 anos\n“5564” = 55 a 64 anos\n“65” = 65 anos ou mais\n\n\nPara tornar o formato dos nomes das colunas mais consistente, é necessário fazer um pequeno ajuste: infelizmente, os nomes estão ligeiramente inconsistentes, pois em vez de “new_rel”, temos “newrel”. Para isso, vamos utilizar a função str_replace(), a ideia básica é simples: substituir os caracteres “newrel” por “new_rel”. Isso tornará todos os nomes das variáveis consistentes.\n\n\n# A tibble: 97,867 × 6\n   country     iso2  iso3   year chave        casos\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n 1 Afghanistan AF    AFG    1997 new_sp_m014      0\n 2 Afghanistan AF    AFG    1997 new_sp_m1524    10\n 3 Afghanistan AF    AFG    1997 new_sp_m2534     6\n 4 Afghanistan AF    AFG    1997 new_sp_m3544     3\n 5 Afghanistan AF    AFG    1997 new_sp_m4554     5\n 6 Afghanistan AF    AFG    1997 new_sp_m5564     2\n 7 Afghanistan AF    AFG    1997 new_sp_m65       0\n 8 Afghanistan AF    AFG    1997 new_sp_f014      5\n 9 Afghanistan AF    AFG    1997 new_sp_f1524    38\n10 Afghanistan AF    AFG    1997 new_sp_f2534    36\n# ℹ 97,857 more rows\n\n\nPodemos separar os valores em cada código usando duas etapas da função separate(). A primeira etapa dividirá os códigos em cada sublinhado (underscore).\n\n\n# A tibble: 97,867 × 8\n   country     iso2  iso3   year new   type  sexage casos\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;int&gt;\n 1 Afghanistan AF    AFG    1997 new   sp    m014       0\n 2 Afghanistan AF    AFG    1997 new   sp    m1524     10\n 3 Afghanistan AF    AFG    1997 new   sp    m2534      6\n 4 Afghanistan AF    AFG    1997 new   sp    m3544      3\n 5 Afghanistan AF    AFG    1997 new   sp    m4554      5\n 6 Afghanistan AF    AFG    1997 new   sp    m5564      2\n 7 Afghanistan AF    AFG    1997 new   sp    m65        0\n 8 Afghanistan AF    AFG    1997 new   sp    f014       5\n 9 Afghanistan AF    AFG    1997 new   sp    f1524     38\n10 Afghanistan AF    AFG    1997 new   sp    f2534     36\n# ℹ 97,857 more rows\n\n\nNesse caso, podemos eliminar a nova coluna, já que ela é constante em todo o conjunto de dados. Além disso, como mencionado anteriormente, as colunas “iso2” e “iso3” são redundantes e podem ser removidas. A eliminação de colunas não essenciais ajuda a simplificar o conjunto de dados e a economizar espaço de armazenamento.\nAgora podemos separar o sexo e a idade.\n\n\n# A tibble: 97,867 × 6\n   country      year type  sexo  idade casos\n   &lt;chr&gt;       &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;\n 1 Afghanistan  1997 sp    m     014       0\n 2 Afghanistan  1997 sp    m     1524     10\n 3 Afghanistan  1997 sp    m     2534      6\n 4 Afghanistan  1997 sp    m     3544      3\n 5 Afghanistan  1997 sp    m     4554      5\n 6 Afghanistan  1997 sp    m     5564      2\n 7 Afghanistan  1997 sp    m     65        0\n 8 Afghanistan  1997 sp    f     014       5\n 9 Afghanistan  1997 sp    f     1524     38\n10 Afghanistan  1997 sp    f     2534     36\n# ℹ 97,857 more rows\n\n\n\n\n4.8.5 4.8.4 Exercícios\n\nUtilizando os dados de TB5, crie uma tabela em formato wide, com a quantidade de casos por país por ano. Cada ano deve ser chamado “Ano_.\n\n\n\n# A tibble: 11,338 × 46\n   country     type  sexo  idade Ano_1997 Ano_1998 Ano_1999 Ano_2000 Ano_2001\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n 1 Afghanistan sp    m     014          0       30        8       52      129\n 2 Afghanistan sp    m     1524        10      129       55      228      379\n 3 Afghanistan sp    m     2534         6      128       55      183      349\n 4 Afghanistan sp    m     3544         3       90       47      149      274\n 5 Afghanistan sp    m     4554         5       89       34      129      204\n 6 Afghanistan sp    m     5564         2       64       21       94      139\n 7 Afghanistan sp    m     65           0       41        8       80      103\n 8 Afghanistan sp    f     014          5       45       25       93      146\n 9 Afghanistan sp    f     1524        38      350      139      414      799\n10 Afghanistan sp    f     2534        36      419      160      565      888\n# ℹ 11,328 more rows\n# ℹ 37 more variables: Ano_2002 &lt;int&gt;, Ano_2003 &lt;int&gt;, Ano_2004 &lt;int&gt;,\n#   Ano_2005 &lt;int&gt;, Ano_2006 &lt;int&gt;, Ano_2007 &lt;int&gt;, Ano_2008 &lt;int&gt;,\n#   Ano_2009 &lt;int&gt;, Ano_2010 &lt;int&gt;, Ano_2011 &lt;int&gt;, Ano_2012 &lt;int&gt;,\n#   Ano_2013 &lt;int&gt;, Ano_2014 &lt;int&gt;, Ano_2015 &lt;int&gt;, Ano_2016 &lt;int&gt;,\n#   Ano_2017 &lt;int&gt;, Ano_2018 &lt;int&gt;, Ano_2019 &lt;int&gt;, Ano_2020 &lt;int&gt;,\n#   Ano_2021 &lt;int&gt;, Ano_1995 &lt;int&gt;, Ano_1996 &lt;int&gt;, Ano_1980 &lt;int&gt;, …\n\n\n\nUtilizando os dados de TB5, crie uma tabela em formato wide, com a quantidade de casos por país, ano, idade e sexo.\n\n\nDica: Utilize o argumento values_fn da função.\n\n\nVolte o banco criado em 1 e 2 para o formato long."
  },
  {
    "objectID": "04_transfomacao-de-dados.html#strings",
    "href": "04_transfomacao-de-dados.html#strings",
    "title": "4  4 Transformação de dados",
    "section": "4.9 4.9 Strings",
    "text": "4.9 4.9 Strings\nNo Capítulo 2 vimos como criar a fazer manipulações simples em strings. Agora vamos aprofundar nossos conhecimentos em manipulação de strings. Para trabalharmos com strings em R, podemos utilizar diversos pacotes, como o base, stringr e stringi . Nas aulas introdutórias focamos apenas nas funções do base, agora vamos focar nas funções do stringr. As funções do pacote stringr são, na sua maioria, wrappers das funções implementadas no stringi .\nStrings são objetos (ou variáveis) do tipo texto, e são delimitadas por aspas (duplas ou simples).\n\n\nCarregando pacotes exigidos: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats 1.0.0     ✔ readr   2.1.4\n✔ ggplot2 3.4.3     ✔ stringr 1.5.0\n✔ purrr   1.0.1     ✔ tibble  3.2.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ data.table::between() masks dplyr::between()\n✖ tidyr::extract()      masks magrittr::extract()\n✖ dplyr::filter()       masks stats::filter()\n✖ data.table::first()   masks dplyr::first()\n✖ lubridate::hour()     masks data.table::hour()\n✖ lubridate::isoweek()  masks data.table::isoweek()\n✖ dplyr::lag()          masks stats::lag()\n✖ data.table::last()    masks dplyr::last()\n✖ lubridate::mday()     masks data.table::mday()\n✖ lubridate::minute()   masks data.table::minute()\n✖ lubridate::month()    masks data.table::month()\n✖ lubridate::quarter()  masks data.table::quarter()\n✖ lubridate::second()   masks data.table::second()\n✖ purrr::set_names()    masks magrittr::set_names()\n✖ purrr::transpose()    masks data.table::transpose()\n✖ lubridate::wday()     masks data.table::wday()\n✖ lubridate::week()     masks data.table::week()\n✖ lubridate::yday()     masks data.table::yday()\n✖ lubridate::year()     masks data.table::year()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n[1] TRUE\n\n\nCaso eu tenha interesse em criar uma string que contenha aspas, podemos cria-la da seguinte maneira:\n\n\n[1] \"Ela disse: 'Eu adoro lasanha.'\"\n\n\n\n\n[1] │ Ela disse: 'Eu adoro lasanha.'\n\n\n\n\n[1] \"Ela disse: \\\"Eu adoro lasanha.\\\"\"\n\n\n\n\n[1] │ Ela disse: \"Eu adoro lasanha.\"\n\n\n\n\n[1] \"Ela disse: \\\"Eu adoro lasanha.\\\"\"\n\n\n\n\n[1] │ Ela disse: \"Eu adoro lasanha.\"\n\n\n\n\n[1] \"Ela disse: 'Eu adoro lasanha.'\"\n\n\n\n\n[1] │ Ela disse: 'Eu adoro lasanha.'\n\n\n\n4.9.1 4.9.1 Caracteres especiais\nQuando estamos trabalhando com textos, frequentemente temos caracteres especiais. Caracteres especiais são caracteres que não são alfanuméricos e muitas vezes têm funções específicas ou significados especiais em linguagens de programação e processamento de texto. Aqui estão alguns exemplos comuns de caracteres especiais:\n\nEspaço em Branco: O espaço em branco, muitas vezes representado como ” ” ou “” em linguagens de programação, é um caractere especial que denota um espaço vazio entre palavras ou caracteres em uma string.\n\nEm R, podemos usar espaços em branco em strings de texto da maneira usual. Por exemplo:\n\n\n\n\n[1] │ Isso é um exemplo de texto com espaços em branco.\n\n\n\nNova Linha (): O caractere “” é usado para representar uma quebra de linha em uma string. Quando incluído em uma string, ele faz com que o texto subsequente seja exibido em uma nova linha.\n\nPara criar uma nova linha em uma string, podemos usar “”. Isso é útil para criar múltiplas linhas de texto.\n\n\n\n\n[1] │ Primeira linha\n    │ Segunda linha\n    │ Terceira linha\n\n\n\nTabulação (: O caractere “ representa uma tabulação horizontal. É frequentemente usado para criar recuos ou alinhar o texto em colunas.\n\nPara adicionar tabulações em uma string, você pode usar “.\n\n\n\n\n[1] │ Primeira coluna{\\t}Segunda coluna{\\t}Terceira coluna\n\n\n\nCaracteres de Escape (): O caractere “” é usado como um caractere de escape em muitas linguagens de programação. Isso significa que ele “escapa” o significado especial de outros caracteres, permitindo que você os inclua em uma string. Por exemplo, “” é usado para representar uma única barra invertida em vez de um caractere de escape.\n\n\n\n[1] │ Isso é uma única barra invertida: \\\n\n\n\nCaracteres Unicode: Em linguagens de programação modernas, podemos usar caracteres Unicode em strings para representar uma ampla variedade de caracteres especiais de diferentes idiomas e símbolos.\n\nPodemos utilizar códigos Unicode para incluir caracteres especiais em uma string em R. Por exemplo, o símbolo do grau (°) pode ser representado pelo código Unicode “0B0”.\n\n\n\n\n[1] │ A temperatura é de 25°C.\n\n\n\nO símbolo “” (nova linha), pode ser representados usando seus códigos Unicode.\n\n\n\n[1] │ Primeira linha\n    │ Segunda linha\n\n\n\nCaracteres matemáticos, como o símbolo de somatório (\\(\\sum\\)), podem ser representados com seus códigos Unicode.\n\n\n\n[1] │ O símolo do somatório é: ∑\n\n\n\nEmojis também podem ser representados por Unicode.\n\n\n\n[1] │ OMG! Também posso usar emoji! 😱\n\n\n\n\n4.9.2 4.9.2 Concatenando strings\nMuitas vezes temos interesse em combinar strings, como faziamos antes com a função paste().\n\n\n   nome sobrenome                    ola\n1   Ana    Santos  Boa noite Ana Santos!\n2 Maria     Silva Boa noite Maria Silva!\n3  João     Souza  Boa noite João Souza!\n4  &lt;NA&gt;      &lt;NA&gt;                   &lt;NA&gt;\n\n\nAlternativamente, quando temos diversas variáveis que queremos combinar, podemos utilizar a função str_glue.\n\n\n   nome sobrenome               mensagem\n1   Ana    Santos  Boa noite Ana Santos!\n2 Maria     Silva Boa noite Maria Silva!\n3  João     Souza  Boa noite João Souza!\n4  &lt;NA&gt;      &lt;NA&gt;       Boa noite NA NA!\n\n\nOutra opção para a qual utilizamavamos o paste, era para unir todos os elementos de uma string, utilizando o argumento collapse.\n\n\n[1] \"Ana, Maria, João, NA\"\n\n\nUma alternativa é utilizarmos a função str_flatten.\n\n\n[1] \"AnaMariaJoão\"\n\n\n\n\n[1] \"Ana, Maria e João\"\n\n\n\n\n4.9.3 4.9.3 Separando Strings\nMuitas vezes precisamos separar uma string em duas (ou mais). Na aula passada vimos a função separate. Hoje vamos ver a str_split.\n\n\n     [,1]    [,2]    \n[1,] \"Ana\"   \"Santos\"\n[2,] \"Maria\" \"Silva\" \n[3,] \"João\"  \"Souza\" \n[4,] NA      \"\"      \n\n\n\n\n4.9.4 4.9.4 Formatação básica\nMuitas vezes queremos passar um texto para caixa alta, caixa baixa, título ou até mesmo formato de sentença. Para isso podemos utilizar as funções: str_to_upper(), str_to_lower(), str_to_title() e str_to_sentence() respectivamente.\n\n\n[1] \"caixa baixa\"       \"caixa alta\"        \"texto de sentença\"\n[4] \"texto em título\"  \n\n\n\n\n[1] \"Caixa baixa\"       \"Caixa alta\"        \"Texto de sentença\"\n[4] \"Texto em título\"  \n\n\n\n\n[1] \"Caixa Baixa\"       \"Caixa Alta\"        \"Texto De Sentença\"\n[4] \"Texto Em Título\"  \n\n\n\n\n[1] \"CAIXA BAIXA\"       \"CAIXA ALTA\"        \"TEXTO DE SENTENÇA\"\n[4] \"TEXTO EM TÍTULO\"  \n\n\nAlgumas vezes recebemos um texto desformatado, no sentido de conter diversos espaços no meio do texto. E temos interesse em limpar os excessos de espaço. Para isso podemos utilizar as seguintes funções: str_trim() e str_squish().\n\n\n[1] \"Olá, esse texto tem    diversos        espaços completamente desnecessários. \"\n\n\n\n\n[1] \"  Olá, esse texto tem    diversos        espaços completamente desnecessários.\"\n\n\n\n\n[1] \"Olá, esse texto tem    diversos        espaços completamente desnecessários.\"\n\n\n\n\n[1] \"Olá, esse texto tem diversos espaços completamente desnecessários.\"\n\n\n\n\n4.9.5 4.9.5 Comprimento de string\nMuitas vezes temos interesse em encontrar textos incorretos em um banco de dados, uma maneira de identificar essas observações é simplesmente por contar a quantidade de caracteres de uma string. Para isso podemos utilizar a função str_length().\n\n\n   nome sobrenome Nome_Sobrenome comprimento_nome\n1   Ana    Santos     Ana Santos                3\n2 Maria     Silva    Maria Silva                5\n3  João     Souza     João Souza                4\n4  &lt;NA&gt;      &lt;NA&gt;           &lt;NA&gt;               NA\n\n\nAlternativamente podemos estar interessados em contar a quantidade de caracteres especificos. Para isso, utilizamos a função str_count().\n\n\n   nome sobrenome Nome_Sobrenome qtd_a\n1   Ana    Santos     Ana Santos     1\n2 Maria     Silva    Maria Silva     2\n3  João     Souza     João Souza     0\n4  &lt;NA&gt;      &lt;NA&gt;           &lt;NA&gt;    NA\n\n\n\n\n   nome sobrenome Nome_Sobrenome qtd_vogais qtd_consoantes\n1   Ana    Santos     Ana Santos          1              2\n2 Maria     Silva    Maria Silva          3              2\n3  João     Souza     João Souza          2              2\n4  &lt;NA&gt;      &lt;NA&gt;           &lt;NA&gt;         NA             NA\n\n\n\n\n4.9.6 4.9.6 Substituição de strings\nAlgumas vezes podemos estar interessados em substituir alguma string por outra. Para isso podemos utilizar a função str_replace().\n\n\n   nome sobrenome Nome_Sobrenome\n1   Ana    Santos     Ana Santos\n2 Maria     Silva    Maria Silva\n3  Joao     Souza     João Souza\n4  &lt;NA&gt;      &lt;NA&gt;           &lt;NA&gt;\n\n\nOutras vezes queremos simplesmente remover algum caracter. Para isso utilizamos a função str_remove() para remover a primeira instância do caracter ou str_remove_all() para remover todas as instâncias.\n\n\n  nome sobrenome Nome_Sobrenome\n1   An    Santos     Ana Santos\n2 Mria     Silva    Maria Silva\n3  Jão     Souza     João Souza\n4 &lt;NA&gt;      &lt;NA&gt;           &lt;NA&gt;\n\n\n\n\n  nome sobrenome Nome_Sobrenome\n1   An    Santos     Ana Santos\n2   Mr     Silva    Maria Silva\n3    J     Souza     João Souza\n4 &lt;NA&gt;      &lt;NA&gt;           &lt;NA&gt;\n\n\n\n\n4.9.7 4.9.7 Expressões Regulares\nExpressões regulares, muitas vezes abreviadas como “RegEx” são padrões de texto que descrevem conjuntos de strings. Elas são amplamente utilizadas para realizar operações de busca, correspondência e manipulação de strings em linguagens de programação e ferramentas de processamento de texto, incluindo R. Alguns símbolos e conceitos-chave em expressões regulares:\n\nLiterais: Caracteres literais correspondem a si mesmos. Por exemplo, a regex “abc” corresponderá à sequência “abc” em uma string.\n\n\n\n[1] TRUE\n\n\n\nMeta-caracteres: São caracteres com significados especiais em regex. Alguns exemplos incluem:\n\n\n. (ponto): Corresponde a qualquer caractere, exceto uma nova linha.\n*: Corresponde a zero ou mais ocorrências do caractere ou grupo anterior.\n+: Corresponde a uma ou mais ocorrências do caractere ou grupo anterior.\n?: Corresponde a zero ou uma ocorrência do caractere ou grupo anterior.\n[]: Define uma classe de caracteres. Por exemplo, [aeiou] corresponde a qualquer vogal.\n| (barra vertical): Funciona como um “OU” lógico. Por exemplo, “a|b” corresponde a “a” ou “b”.\n\n\n\n[1]  TRUE  TRUE FALSE\n\n\n\nÂncoras: São usadas para ancorar padrões em posições específicas da string.\n\n\n^: Corresponde ao início da string.\n$: Corresponde ao final da string.\n\\b: Corresponde a uma borda de palavra (início ou fim de uma palavra).\n\n\n\n[1] FALSE FALSE FALSE\n\n\n\n\n[1] TRUE TRUE TRUE\n\n\n\n\n[1]  TRUE  TRUE FALSE\n\n\n\n\n[1] FALSE  TRUE  TRUE\n\n\n\n\n[1] FALSE  TRUE FALSE\n\n\n\nGrupos: Parênteses () são usados para agrupar caracteres em subexpressões. Isso é útil para aplicar operadores a um conjunto de caracteres.\n\n\nExemplo: (abc)+ corresponde a “abc”, “abcabc”, “abcabcabc”, etc.\n\n\n\n[1] \"nana\" \"na\"   \"nana\"\n\n\n\nQuantificadores: Controlam o número de ocorrências de um caractere ou grupo.\n\n\n{n}: Corresponde exatamente a n ocorrências.\n{n,}: Corresponde a pelo menos n ocorrências.\n{n,m}: Corresponde de n a m ocorrências.\n\n\n\n     [,1]  [,2] \n[1,] \"123\" \"456\"\n\n\n\n\n     [,1] [,2] [,3]\n[1,] \"12\" \"45\" \"78\"\n\n\n\n\n4.9.8 4.9.8 Exercício\nUtilizando os dados disponíveis em words crie RegEx capaz de encontrar palavras que:\n\nComece com “y”.\nNão comece com “y”.\nTermine com “x”.\nTenham exatamente três letras.\nTenham sete letras ou mais.\nContenham um par vogal-consoante.\nContenham pelo menos dois pares vogal-consoante consecutivos.\n\nPara cada um dos desafios a seguir, tente resolvê-los usando tanto uma única expressão regular quanto uma combinação de várias chamadas de str_detect():\n\nEncontre todas as palavras que começam ou terminam com “x”.\nEncontre todas as palavras que começam com uma vogal e terminam com uma consoante.\nExistem palavras que contêm pelo menos uma de cada vogal diferente?\nEm colors() existem diversos modificadores de cores como light e dark. Crie um banco contendo o nome da cor original e o nome sem o modificador."
  },
  {
    "objectID": "04_transfomacao-de-dados.html#cheatsheets",
    "href": "04_transfomacao-de-dados.html#cheatsheets",
    "title": "4  4 Transformação de dados",
    "section": "4.10 4.10 Cheatsheets",
    "text": "4.10 4.10 Cheatsheets\n\nTidyR\nManipulando dados\nLubridate\nStrings\nRegEx\nPara saber mais sobre RegEx\nJogo de palavra cruzadas em RegEx."
  },
  {
    "objectID": "01_markdown_git.html#markdown",
    "href": "01_markdown_git.html#markdown",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n2.1 1.1  Markdown",
    "text": "2.1 1.1  Markdown\nMarkdown é uma linguagem de marcação leve1, criada por John Gruber em 2004, que permite formatação de texto de forma simples e rápida, sem a necessidade de conhecimentos avançados de programação ou design. É amplamente utilizado em diversas plataformas para criar documentos, páginas web, blogs, e-mails e muito mais.\nO Markdown foi projetado para ser fácil de ler e escrever, utilizando uma sintaxe simples e intuitiva. Compatível com HTML, ele pode ser convertido diretamente para outras linguagens de marcação, facilitando a publicação em diferentes plataformas.\nO uso do Markdown tem se popularizado principalmente entre escritores, programadores, blogueiros e criadores de conteúdo online sem a complexidade de outras linguagens de marcação, como HTML.\nNeste capítulo, veremos os conceitos básicos do Markdown e como utilizá-lo para criar conteúdo com formatação atraente e organizada.\n\n2.1.1 1.1.1 Editores de Markdown\nAntes de começarmos a escrever em Markdown, é útil saber que podemos utilizar qualquer editor de texto simples para criar arquivos Markdown. No entanto, existem editores específicos que oferecem recursos adicionais, como visualização em tempo real, realce de sintaxe e pré-visualização.\nAlguns editores de Markdown populares são:\n\nVisual Studio Code: Um editor de código altamente configurável que possui extensões para suporte ao Markdown. Além disso, o Visual Studio Code oferece uma pré-visualização em tempo real à medida que você digita seu conteúdo Markdown.\nAtom: Outro editor de código fonte aberto com suporte ao Markdown e uma comunidade ativa de desenvolvedores. O Atom também fornece pacotes que aprimoram a experiência de escrita em Markdown.\nTypora: Um editor Markdown com visualização em tempo real e uma interface de escrita amigável. O Typora é conhecido por sua abordagem “What You See Is What You Get” (WYSIWYG), o que significa que a visualização em tempo real mostra o documento final como apareceria após ser renderizado.\nStackEdit: Uma ferramenta online que permite escrever e salvar seus documentos Markdown na nuvem. O StackEdit também possui uma visualização em tempo real para facilitar a visualização do resultado final. Teste Aqui\nRStudio/Posit: RStudio é uma IDE (Integrated Development Environment) muito utilizada por programadores e cientistas de dados em projetos envolvendo a linguagem R. O RStudio possui um ambiente dedicado para edição de documentos R Markdown, que combina a facilidade do Markdown com a capacidade de incorporar análises e gráficos gerados pelo R.\n\nArquivos puramente em Markdown apresentam a extensão .md. Porém, quando utilizamos RMarkdown ou Quarto sua extensão se torna .Rmd ou .qmd, respectivamente.\n\n2.1.2 1.1.2 Sintaxe Básica\n\n2.1.2.1 1.1.2.1 Títulos\nPara criar títulos em Markdown, podemos utilizar a sintaxe de hashtags (#). A quantidade de hashtags determina o nível do título.\n\nExemplo\n Código\n\n# Título de Nível 1\n## Título de Nível 2\n### Título de Nível 3\n\n Resultado\n\n3 Título de Nível 1\n\n3.1 Título de Nível 2\n\n3.1.1 Título de Nível 3\n\n\n3.1.1.1 1.1.2.2 Parágrafos e Quebras de Linha\nPara criar parágrafos, basta digitar o texto normalmente. Para criar uma quebra de linha, insira dois espaços no final do parágrafo.\n\nExemplo\n Código\n\nIsso é um parágrafo.\n\nIsso é outro parágrafo.\n\n Resultado\nIsso é um parágrafo.\nIsso é outro parágrafo.\n\n\n3.1.1.2 1.1.2.3 Ênfase\nPara destacar palavras ou frases, você pode utilizar o asterisco (*) ou o sublinhado (_).\n\nExemplo\n Código\n\n*Itálico* ou _Itálico_\n\n**Negrito** ou __Negrito__\n\n Resultado\nItálico ou Itálico\nNegrito ou Negrito\n\n\n3.1.1.3 1.1.2.4 Listas\n\n3.1.1.3.1 1.1.2.4.1 Lista Não Ordenada\nPara criar uma lista não ordenada, utilize o asterisco (*), o sinal de mais (+) ou o traço (-) seguido do item.\n\nExemplo\n Código\n\n- Item 1\n- Item 2\n- Item 3\n\n\n+ Item 1\n+ Item 2\n+ Item 3\n\n\n* Item 1\n* Item 2\n* Item 3\n\n Resultado\n\nItem 1\nItem 2\nItem 3\n\n\n\n3.1.1.3.2 1.1.2.4.2 Lista Ordenada\nPara criar uma lista ordenada, digitamos o número seguido de um ponto.\n\nExemplo\n Código\n\n1.  Item 1\n2.  Item 2\n3.  Item 3\n\n Resultado\n\nItem 1\nItem 2\nItem 3\n\n\n\nSe os números forem colocados fora de ordem, os itens ainda serão numerados corretamente.\n\n\n3.1.1.4 1.1.2.5 Lista Aninhada\nPara criar uma lista aninhada, simplesmente digitamos uma tabulação antes do indicador de lista (*, +, -, 1.).\n\nExemplo\n Código\n\n*  Item 1\n   +  Item 1.1\n\n Resultado\n\nItem 1\n\nItem 1.1\n\n\n\n\n\n3.1.1.5 1.1.2.6 Links\nPara adicionar um link, utilizamos a sintaxe [texto](URL).\n\nExemplo\n Código\n\n[Google.com](google.com)\n\n Resultado\nGoogle.com\n\n\nPara incluir links rapidamente também podemos utilizar &lt;link&gt;.\n\n\n3.1.1.6 1.1.2.7 Imagens\nPara inserirmos uma imagem, utilizamos a sintaxe ![texto alternativo](URL da imagem).\n\nExemplo\n Código\n\n![Logo do Markdown](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/312px-Markdown-mark.svg.png?20190322184628)\n\n Resultado\n\n\n\n3.1.1.7 1.1.2.8 Citações\nPara adcionar uma citação, utilizamos o sinal de maior que (&gt;).\n\nExemplo\n Código\n\n&gt; E nessa loucura de dizer que não te quero  \n&gt; Vou negando as aparências  \n&gt; Disfarçando as evidências  \n&gt; (Evidências, \nChitãozinho & Xororó)\n\n Resultado\n\nE nessa loucura de dizer que não te quero  Vou negando as aparências  Disfarçando as evidências  (Evidências, Chitãozinho & Xororó)\n\n\n\n3.1.2 1.1.3 Funcionalidades Avançadas do Markdown\nAgora que já aprendemos os conceitos básicos do Markdown, vamos explorar algumas funcionalidades mais avançadas que tornam essa linguagem ainda mais poderosa e versátil.\n\n3.1.2.1 1.1.3.1 Referência cruzada\nAs referências cruzadas permitem que você crie links para seções específicas dentro do seu documento Markdown. Isso é especialmente útil para documentos extensos, onde você deseja facilitar a navegação do leitor. Para criar uma referência cruzada precisamos atribuir um identificador único a um título usando a sintaxe {#identificador} e, em seguida, criar o link utilizando o mesmo identificador precedido de #.\n\nExemplo\n Código\n\n## Seção 1 {#sec-01}\n\nEste é o conteúdo da seção 1.\n\nPara referenciar esta seção, [clique aqui](#sec-01).\n\n Resultado\n\n3.2 Seção 1\nEste é o conteúdo da seção 1.\nPara referenciar esta seção, clique aqui.\n\nOutra opção para referenciamento é utilizando o @.\n\n\n## Seção 2 {#sec-02}\n\nEste é o conteúdo da seção 2.\n\nComo visto na @sec-02, ... .\n\n Resultado\n\n3.3 Seção 2\nEste é o conteúdo da seção 2.\nComo visto na Section 3.3, … .\n\n\nPara uma melhor organização das referências cruzadas em um projeto categorizamos figuras como fig-, tabelas como tab- e seções como sec-.\n\n\n3.3.0.1 1.3.0.1 Tabelas\nAs tabelas permitem organizar dados em formato tabular. Para criar uma tabela em Markdown, utilizamos o caractere de pipe (|) para separar as colunas e o hífen (-) na segunda linha para definir o alinhamento das células.\n\nExemplo\n Código\n\n| Nome   | Idade | Profissão       |\n|--------|-------|-----------------|\n| João   | 30    | Estatístico     |\n| Maria  | 28    | Designer        |\n| Pedro  | 35    | Desenvolvedor   |\n\n Resultado\n\n\nNome\nIdade\nProfissão\n\n\n\nJoão\n30\nEstatístico\n\n\nMaria\n28\nDesigner\n\n\nPedro\n35\nDesenvolvedor\n\n\n\n\n\n3.3.0.2 1.3.0.2 Blocos de Código\nPara exibir blocos de código, utilizamos três acentos graves (```) seguidos do nome da linguagem de programação. Isso destacará a sintaxe de acordo com a linguagem escolhida.\nQuando estamos utilizando Quarto, portanto, um arquivo .qmd o código incluído dentro do bloco delimitado será executado de acordo com a linguagem definida. Isto é, se o código dentro do bloco é um código em R, será executado como em R, se é um código em Python, será executado em Python, se é um código em Mermaid, será executado em Mermaid, e assim por diante.\n\nExemplo\n Código\n\n```{r}\n1 + 1 \n\\```\n\n\n```{python}\n1 + 1 \n\\```\n\n Resultado\n\n1 + 1\n\n[1] 2\n\n\n\n1 + 1\n\n2\n\n\n\n\n3.3.0.3 1.3.0.3 Linhas Horizontais\nPara criar uma linha horizontal, utilize três hífens (---).\n\nExemplo\n Código\n\nTexto acima da linha horizontal.\n\n---\n\nTexto abaixo da linha horizontal.\n\n Resultado\nTexto acima da linha horizontal.\n\nTexto abaixo da linha horizontal.\n\n\n3.3.0.4 1.3.0.4 Fórmulas Matemáticas\nSe você precisa escrever fórmulas matemáticas, é possível utilizar a notação LaTeX dentro de um par de cifrões ($$). Isso permitirá que o Markdown renderize a fórmula corretamente.\n\nExemplo\n Código\n\nA equação quadrática é definida como $$ax^2 + bx + c = 0.$$\n\n Resultado\nA equação quadrática é definida como \\[ax^2 + bx + c = 0.\\]\n\nQuando queremos utilizar alguma fórmula matemática dentro de um texto utilizamos apenas um cifrão $ de cada lado da equação.\n\nExemplo\n Código\n\nA equação quadrática é definida como $ax^2 + bx + c = 0.$\n\n Resultado\nA equação quadrática é definida como \\(ax^2 + bx + c = 0.\\)\n\n\nPara saber mais sobre como escrever equações em LaTex acesse a Apostila Online.\n\n\n3.3.1 1.3.1 Cheat-Sheet\nClique aqui para a cheat-sheet so material de Markdown."
  },
  {
    "objectID": "01_markdown_git.html#organização",
    "href": "01_markdown_git.html#organização",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n3.4 1.4 Organização",
    "text": "3.4 1.4 Organização\nAs boas práticas de programação são essenciais para desenvolver código de qualidade, que seja fácil de entender, manter e evoluir. Uma das áreas importantes dentro das boas práticas é a organização dos arquivos, que ajuda a tornar o projeto mais coeso e legível.\n\n3.4.1 1.4.1 Nomenclatura Adequada\nA nomenclatura adequada dos arquivos é essencial para uma organização eficiente. Ao criar arquivos para projetos de análise de dados, independente da linguagem, devemos escolher nomes descritivos que reflitam o conteúdo ou a finalidade do arquivo. Por exemplo, limpeza_dados.R ou analise_exploratoria.R são nomes mais informativos do que arquivo1.R ou script_final.R.\nQuando lidamos com uma sequência nas quais os códigos devem ser executados prefira salvar os códigos com nomes que indiquem essa ordem. Por exemplo, se há necessidade de que os dados sejam limpos antes de iniciarmos uma análise exploratória devemos salvar os códigos com os seguintes nomes 01_limpeza_dados.R e 02_analise_exploratoria.R, indicando a ordem na qual os códigos devem ser executados.\nAo longo do curso, utilizaremos nomes consistentes para facilitar a compreensão e a busca de arquivos relacionados.\n\n3.4.2 1.4.2 Estrutura de Diretórios\nA organização dos arquivos em diretórios lógicos é crucial para projetos de análise de dados. Considere uma estrutura de diretórios que abranja etapas comuns da análise, como dados para armazenar os dados brutos, codigo para conter os códigos de análise e resultados para guardar os resultados da análise.\nExemplo de estrutura de diretórios:\n\nmeu_projeto/\n|-- dados/\n|-- codigos/\n|-- resultados/\n\nTambém podemos ter essa mesma estrutura em inglês:\n\nmy_project/\n|-- data/\n|-- code/\n|-- results/\n\nMantendo uma estrutura organizada torna mais fácil encontrar e gerenciar os arquivos relevantes para cada etapa da análise em cada um dos projetos.\nObviamente, cada pasta pode conter sub-pastas, por exemplo, em projetos onde temos muitos dados brutos e dados processados podemos subdividir a pasta data em raw e clean, ou input e output.\n\nmy_project/\n|-- data/\n|   |-- raw/\n|   |-- clean/\n|-- code/\n|-- results/\n\n\nmy_project/\n|-- data/\n|   |-- input/\n|   |-- output/\n|-- code/\n|-- results/\n\n\n3.4.3 1.4.3 Módulos e Funções Reutilizáveis\nEm diversas linguagens, como R, Python, Perl, C, etc, podemos criar funções reutilizáveis para realizar tarefas específicas. Separe o código em módulos e funções para facilitar a manutenção e a reutilização em diferentes partes da análise.\nPor exemplo, podemos criar um módulo limpeza_dados.R que contenha funções para lidar com a limpeza e preparação dos dados brutos. Dessa forma, essas funções podem ser reutilizadas em outras análises futuras, economizando tempo e esforço.\nTambém devemos nomear os arquivos de módulos e funções através de um prefixo que identifique que aquele arquivo contém funções e módulos ao invés das análises específicas para o projeto em questão. Por exemplo, identifique com o prefixo mod_, obtendo o arquivo mod_limpeza_dados.R.\n\n3.4.4 1.4.4 Divisão por Responsabilidade\nAgrupe os arquivos de acordo com suas responsabilidades na análise. Por exemplo, separe os scripts que realizam a limpeza dos dados dos scripts que executam a análise estatística. Além disso, crie um arquivo específico para a geração de gráficos e visualizações dos resultados.\nEssa abordagem facilita a manutenção do código, já que cada arquivo é responsável por uma tarefa específica.\n\n3.4.5 1.4.5 Documentação\nA documentação adequada é essencial para entender a análise de dados, independente da linguagem. Sempre comente o código de forma clara e inclua explicações para as etapas mais importantes da análise.\nTambém podemos considerar a utilização de arquivos do tipo R Markdown ou Quarto para criar relatórios interativos que combinem código, gráficos e texto explicativo em um único documento. Essa prática é excelente para comunicar os resultados da análise de forma mais clara e visual.\n\n3.4.6 1.4.6 Versionamento com Git\nUtilize o Git para controlar as versões do código e acompanhar o histórico de alterações. O versionamento é especialmente útil em análises de dados, pois permite que você explore diferentes abordagens e compare os resultados de diferentes versões do código.\n\n3.4.7 1.4.7 Exemplo de Estrutura Completa do Projeto\n\nmy_projeto/\n|-- data/\n|   |-- raw/\n|   |-- clean/\n|-- scripts/\n|   |-- 00_limpeza_dados.R\n|   |-- 01_analise_estatistica.R\n|   |-- 02_visualizacao_resultados.R\n|   |-- mod_limpeza_dados.R\n|-- results/\n|   |-- relatorio_analise.html\n|   |-- graficos/\n|       |-- grafico1.png\n|       |-- grafico2.png"
  },
  {
    "objectID": "01_markdown_git.html#sistemas-de-versionamento",
    "href": "01_markdown_git.html#sistemas-de-versionamento",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n3.5 1.5 Sistemas de Versionamento",
    "text": "3.5 1.5 Sistemas de Versionamento\nVersionamento de Código refere-se ao controle cuidadoso das alterações feitas em um projeto de software ao longo do tempo. Isso é realizado através de um sistema de controle de versão, como o Git, que registra todas as modificações no código-fonte do projeto. Cada conjunto de mudanças é registrado em uma versão, permitindo que os desenvolvedores acessem e revertam as alterações conforme necessário.\nUm sistema de controle de versão é uma ferramenta essencial para o desenvolvimento colaborativo, permitindo que várias pessoas trabalhem em um mesmo projeto sem conflitos e de maneira mais organizada. O Git é um exemplo de sistema de versionamento de códigos, que pode ser hospedado no GitHub, por exemplo.\n\n3.5.1 1.5.1  Git\nGit é um sistema de controle de versão distribuído. Foi criado por Linus Torvalds em 2005 e é amplamente utilizado na indústria de desenvolvimento de software. O Git permite que desenvolvedores rastreiem mudanças no código-fonte ao longo do tempo, facilitando o trabalho em equipe e a colaboração. Ele oferece recursos para criar ramos (ramificações) do código, mesclá-los e reverter alterações, permitindo que os desenvolvedores experimentem diferentes abordagens sem afetar a versão principal do projeto. O Git é executado localmente no computador do desenvolvedor e não requer uma conexão com a internet, a menos que você queira sincronizar com um repositório remoto, como o GitHub.\n\n3.5.2 1.5.2  GitHub\nO GitHub é uma plataforma de hospedagem de código-fonte e colaboração baseada em Git. Lançado em 2008, o GitHub tornou-se rapidamente um dos maiores repositórios de código-fonte do mundo. Ele permite que os desenvolvedores hospedem seus repositórios Git na nuvem e colaborem com outros membros da equipe ou contribuidores externos. O GitHub facilita o compartilhamento de código, rastreamento de problemas (issues), solicitações de pull (pull requests) e revisão de código. Além disso, fornece uma interface amigável para visualizar histórico de alterações, ramos, problemas e outras informações importantes relacionadas ao desenvolvimento do software.\n\n3.5.3 1.5.3 Importância do Versionamento de Código\n1. Rastreamento de Alterações: Com o versionamento de código, é possível rastrear todas as modificações feitas no projeto, incluindo quem realizou cada alteração e quando. Isso facilita a identificação de problemas e a compreensão do histórico do projeto.\n2. Reversão Segura: Caso um erro seja introduzido no código, é possível reverter para uma versão anterior que esteja funcionando corretamente. Isso é especialmente útil em situações de bugs críticos ou mudanças indesejadas.\n3. Colaboração Eficiente: Equipes de desenvolvimento podem trabalhar em paralelo em diferentes partes do projeto, sem interferir no trabalho um do outro. O versionamento permite que cada desenvolvedor trabalhe em sua própria cópia (branch) do código antes de integrá-lo ao projeto principal.\n4. Testes e Experimentações: É possível criar branches para testar novos recursos, correções ou experimentações sem impactar o código principal. Esses branches podem ser compartilhados com colegas para revisão antes de serem incorporados.\n5. Backup e Segurança: Os repositórios versionados atuam como um backup seguro para o código-fonte do projeto. Em caso de falha no hardware ou perda de dados local, as versões remotas do código podem ser recuperadas.\n\n3.5.4 1.5.4 Criando uma Conta no GitHub\nGitHub é uma plataforma popular para hospedar projetos versionados usando o Git. Siga os seguintes passos para criar uma conta:\n\nAcesse o site oficial do GitHub em https://github.com/.\nClique em “Sign Up” ou “Criar conta”.\nPreencha seus dados, incluindo nome de usuário, endereço de e-mail e senha.\nSelecione um plano de conta.\nConclua o processo de criação de conta seguindo as instruções na tela.\n\n\nUtilize seu e-mail @ufpr para criação da conta para ter acesso a conta Pro.\n\n\n3.5.5 1.5.5 Mantendo Projetos e Colaborando no GitHub\n1. Repositórios: Após criar uma conta no GitHub, você pode criar um novo repositório ou clonar (fazer uma cópia local) um repositório existente para começar a trabalhar no projeto.\n2. Commits: Os commits são registros das alterações feitas no código. Ao fazer um commit, é importante fornecer uma mensagem clara e concisa que explique o que foi alterado. Isso ajuda na compreensão das mudanças realizadas em cada versão.\n3. Branches: Os branches permitem que você crie cópias do seu repositório para trabalhar em funcionalidades específicas ou correções. Branches são úteis para desenvolver recursos em paralelo sem afetar o projeto principal. Quando um trabalho em um branch estiver concluído, ele pode ser mesclado ao projeto principal através de um pull request.\n4. Pull Requests: Um pull request é uma solicitação para mesclar as alterações de um branch ao projeto principal. É uma etapa crucial para a colaboração, pois permite que outros membros da equipe revisem as mudanças, façam comentários e discutam as alterações antes de serem integradas ao código principal.\n5. Forks: Quando você deseja contribuir para um projeto mantido por outra pessoa, pode criar um fork, que é uma cópia independente do repositório original em sua conta do GitHub. Após fazer as alterações em seu fork, você pode enviar um pull request para o repositório original, sugerindo que suas mudanças sejam incorporadas ao projeto principal.\n\n3.5.6 1.5.6 Comandos Básicos do Git\nAqui estão os comandos essenciais do Git que ajudarão você a começar com o versionamento de código:\n1. git init: Inicializa um novo repositório Git em um diretório vazio ou converte um projeto existente em um repositório Git.\n2. git clone: Cria uma cópia local de um repositório Git existente. Você pode clonar um repositório do GitHub ou de outro servidor Git.\n3. git add: Adiciona arquivos ao índice (staging area) para serem incluídos no próximo commit. Use “git add .” para adicionar todos os arquivos modificados.\n4. git commit: Registra as alterações adicionadas ao índice como uma nova versão no histórico do repositório. Lembre-se de fornecer uma mensagem significativa usando o parâmetro “-m”.\n5. git status: Exibe o estado atual do seu repositório, mostrando os arquivos modificados, adicionados e aqueles que ainda não foram monitorados pelo Git.\n6. git log: Mostra o histórico de commits do repositório, incluindo os autores, datas e mensagens de commit.\n7. git branch: Lista todas as branches do repositório. O branch atual é marcado com um asterisco.\n8. git checkout: Permite alternar entre branches. Use “git checkout -b nome-do-branch” para criar e alternar para um novo branch.\n9. git merge: Mescla as alterações de um branch específico no branch atual. Use após realizar um pull request ou ao concluir o trabalho em um branch paralelo.\n10.git pull: Puxa as alterações do repositório remoto para o seu repositório local. É uma combinação dos comandos “git fetch” e “git merge”.\n11. git push: Envia as alterações do seu repositório local para o repositório remoto (por exemplo, GitHub). Use “git push origin nome-do-branch” para enviar um branch específico.\n12. git remote: Exibe informações sobre os repositórios remotos conectados ao seu projeto.\n13. git fetch: Busca as alterações do repositório remoto, mas não as mescla automaticamente em seu repositório local.\n14. git rm: Remove arquivos do repositório e os prepara para serem removidos do controle de versão.\n15. git diff: Mostra as diferenças entre o código no diretório de trabalho e as alterações confirmadas.\n\n3.5.7 1.5.7 Cheat-Sheet Git\nClique aqui para a cheat-sheet do material de Git.\n\n3.5.8 1.5.8 Cheat-Sheet RStudio & Git\nClique aqui para a cheat-sheet do material de Git & Rstudio."
  },
  {
    "objectID": "01_markdown_git.html#recursos-extras",
    "href": "01_markdown_git.html#recursos-extras",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "\n3.6 1.6 Recursos extras",
    "text": "3.6 1.6 Recursos extras\nAlguns recursos extras que podem ser utilizados:\n\nAprenda Markdown em 60 segundos\nMelhore seu .Rmd\nComo usar o GitHub\nMais sobre o GitHub"
  },
  {
    "objectID": "01_markdown_git.html#footnotes",
    "href": "01_markdown_git.html#footnotes",
    "title": "\n2  Documentação, Organização de códigos e Sistemas de versionamento\n",
    "section": "",
    "text": "conjunto de sinais e códigos aplicados a um texto ou a dados para para definir formatos, maneiras de exibição e padrões. Ao contrário de linguagens de programação, não possui estruturas de controle como os comandos condicionais e de repetição.↩︎"
  }
]